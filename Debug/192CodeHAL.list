
192CodeHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08007980  08007980  00017980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd0  08007fd0  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd8  08007fd8  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08007fe0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000244  08008224  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08008224  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099ae  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b06  00000000  00000000  00029c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0002b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002bf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a96  00000000  00000000  0002c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b812  00000000  00000000  000430e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a30  00000000  00000000  0004e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6328  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c8  00000000  00000000  000d6378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000d9a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000d9a64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007968 	.word	0x08007968

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	08007968 	.word	0x08007968

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_ldivmod>:
 8000c78:	b97b      	cbnz	r3, 8000c9a <__aeabi_ldivmod+0x22>
 8000c7a:	b972      	cbnz	r2, 8000c9a <__aeabi_ldivmod+0x22>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bfbe      	ittt	lt
 8000c80:	2000      	movlt	r0, #0
 8000c82:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c86:	e006      	blt.n	8000c96 <__aeabi_ldivmod+0x1e>
 8000c88:	bf08      	it	eq
 8000c8a:	2800      	cmpeq	r0, #0
 8000c8c:	bf1c      	itt	ne
 8000c8e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c92:	f04f 30ff 	movne.w	r0, #4294967295
 8000c96:	f000 b9bf 	b.w	8001018 <__aeabi_idiv0>
 8000c9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	db09      	blt.n	8000cba <__aeabi_ldivmod+0x42>
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db1a      	blt.n	8000ce0 <__aeabi_ldivmod+0x68>
 8000caa:	f000 f84d 	bl	8000d48 <__udivmoddi4>
 8000cae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb6:	b004      	add	sp, #16
 8000cb8:	4770      	bx	lr
 8000cba:	4240      	negs	r0, r0
 8000cbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db1b      	blt.n	8000cfc <__aeabi_ldivmod+0x84>
 8000cc4:	f000 f840 	bl	8000d48 <__udivmoddi4>
 8000cc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd0:	b004      	add	sp, #16
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	4252      	negs	r2, r2
 8000cda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cde:	4770      	bx	lr
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	f000 f82f 	bl	8000d48 <__udivmoddi4>
 8000cea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf2:	b004      	add	sp, #16
 8000cf4:	4240      	negs	r0, r0
 8000cf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfa:	4770      	bx	lr
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	f000 f821 	bl	8000d48 <__udivmoddi4>
 8000d06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d0e:	b004      	add	sp, #16
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_uldivmod>:
 8000d18:	b953      	cbnz	r3, 8000d30 <__aeabi_uldivmod+0x18>
 8000d1a:	b94a      	cbnz	r2, 8000d30 <__aeabi_uldivmod+0x18>
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	bf08      	it	eq
 8000d20:	2800      	cmpeq	r0, #0
 8000d22:	bf1c      	itt	ne
 8000d24:	f04f 31ff 	movne.w	r1, #4294967295
 8000d28:	f04f 30ff 	movne.w	r0, #4294967295
 8000d2c:	f000 b974 	b.w	8001018 <__aeabi_idiv0>
 8000d30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d38:	f000 f806 	bl	8000d48 <__udivmoddi4>
 8000d3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d44:	b004      	add	sp, #16
 8000d46:	4770      	bx	lr

08000d48 <__udivmoddi4>:
 8000d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d4c:	9d08      	ldr	r5, [sp, #32]
 8000d4e:	4604      	mov	r4, r0
 8000d50:	468e      	mov	lr, r1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d14d      	bne.n	8000df2 <__udivmoddi4+0xaa>
 8000d56:	428a      	cmp	r2, r1
 8000d58:	4694      	mov	ip, r2
 8000d5a:	d969      	bls.n	8000e30 <__udivmoddi4+0xe8>
 8000d5c:	fab2 f282 	clz	r2, r2
 8000d60:	b152      	cbz	r2, 8000d78 <__udivmoddi4+0x30>
 8000d62:	fa01 f302 	lsl.w	r3, r1, r2
 8000d66:	f1c2 0120 	rsb	r1, r2, #32
 8000d6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d72:	ea41 0e03 	orr.w	lr, r1, r3
 8000d76:	4094      	lsls	r4, r2
 8000d78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d7c:	0c21      	lsrs	r1, r4, #16
 8000d7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d82:	fa1f f78c 	uxth.w	r7, ip
 8000d86:	fb08 e316 	mls	r3, r8, r6, lr
 8000d8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8e:	fb06 f107 	mul.w	r1, r6, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x64>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9e:	f080 811f 	bcs.w	8000fe0 <__udivmoddi4+0x298>
 8000da2:	4299      	cmp	r1, r3
 8000da4:	f240 811c 	bls.w	8000fe0 <__udivmoddi4+0x298>
 8000da8:	3e02      	subs	r6, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	1a5b      	subs	r3, r3, r1
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db4:	fb08 3310 	mls	r3, r8, r0, r3
 8000db8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dbc:	fb00 f707 	mul.w	r7, r0, r7
 8000dc0:	42a7      	cmp	r7, r4
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x92>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dcc:	f080 810a 	bcs.w	8000fe4 <__udivmoddi4+0x29c>
 8000dd0:	42a7      	cmp	r7, r4
 8000dd2:	f240 8107 	bls.w	8000fe4 <__udivmoddi4+0x29c>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dde:	1be4      	subs	r4, r4, r7
 8000de0:	2600      	movs	r6, #0
 8000de2:	b11d      	cbz	r5, 8000dec <__udivmoddi4+0xa4>
 8000de4:	40d4      	lsrs	r4, r2
 8000de6:	2300      	movs	r3, #0
 8000de8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d909      	bls.n	8000e0a <__udivmoddi4+0xc2>
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	f000 80ef 	beq.w	8000fda <__udivmoddi4+0x292>
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000e02:	4630      	mov	r0, r6
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	fab3 f683 	clz	r6, r3
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	d14a      	bne.n	8000ea8 <__udivmoddi4+0x160>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xd4>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 80f9 	bhi.w	800100e <__udivmoddi4+0x2c6>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	469e      	mov	lr, r3
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e0      	beq.n	8000dec <__udivmoddi4+0xa4>
 8000e2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2e:	e7dd      	b.n	8000dec <__udivmoddi4+0xa4>
 8000e30:	b902      	cbnz	r2, 8000e34 <__udivmoddi4+0xec>
 8000e32:	deff      	udf	#255	; 0xff
 8000e34:	fab2 f282 	clz	r2, r2
 8000e38:	2a00      	cmp	r2, #0
 8000e3a:	f040 8092 	bne.w	8000f62 <__udivmoddi4+0x21a>
 8000e3e:	eba1 010c 	sub.w	r1, r1, ip
 8000e42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	2601      	movs	r6, #1
 8000e4c:	0c20      	lsrs	r0, r4, #16
 8000e4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e52:	fb07 1113 	mls	r1, r7, r3, r1
 8000e56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5a:	fb0e f003 	mul.w	r0, lr, r3
 8000e5e:	4288      	cmp	r0, r1
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x12c>
 8000e62:	eb1c 0101 	adds.w	r1, ip, r1
 8000e66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x12a>
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	f200 80cb 	bhi.w	8001008 <__udivmoddi4+0x2c0>
 8000e72:	4643      	mov	r3, r8
 8000e74:	1a09      	subs	r1, r1, r0
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e84:	fb0e fe00 	mul.w	lr, lr, r0
 8000e88:	45a6      	cmp	lr, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x156>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x154>
 8000e96:	45a6      	cmp	lr, r4
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2ca>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ea2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea6:	e79c      	b.n	8000de2 <__udivmoddi4+0x9a>
 8000ea8:	f1c6 0720 	rsb	r7, r6, #32
 8000eac:	40b3      	lsls	r3, r6
 8000eae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eba:	fa01 f306 	lsl.w	r3, r1, r6
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	40f9      	lsrs	r1, r7
 8000ec2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ece:	0c20      	lsrs	r0, r4, #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000edc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee6:	d90b      	bls.n	8000f00 <__udivmoddi4+0x1b8>
 8000ee8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef0:	f080 8088 	bcs.w	8001004 <__udivmoddi4+0x2bc>
 8000ef4:	4288      	cmp	r0, r1
 8000ef6:	f240 8085 	bls.w	8001004 <__udivmoddi4+0x2bc>
 8000efa:	f1a8 0802 	sub.w	r8, r8, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f08:	fb09 1110 	mls	r1, r9, r0, r1
 8000f0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f14:	458e      	cmp	lr, r1
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x1e2>
 8000f18:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f20:	d26c      	bcs.n	8000ffc <__udivmoddi4+0x2b4>
 8000f22:	458e      	cmp	lr, r1
 8000f24:	d96a      	bls.n	8000ffc <__udivmoddi4+0x2b4>
 8000f26:	3802      	subs	r0, #2
 8000f28:	4461      	add	r1, ip
 8000f2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f32:	eba1 010e 	sub.w	r1, r1, lr
 8000f36:	42a1      	cmp	r1, r4
 8000f38:	46c8      	mov	r8, r9
 8000f3a:	46a6      	mov	lr, r4
 8000f3c:	d356      	bcc.n	8000fec <__udivmoddi4+0x2a4>
 8000f3e:	d053      	beq.n	8000fe8 <__udivmoddi4+0x2a0>
 8000f40:	b15d      	cbz	r5, 8000f5a <__udivmoddi4+0x212>
 8000f42:	ebb3 0208 	subs.w	r2, r3, r8
 8000f46:	eb61 010e 	sbc.w	r1, r1, lr
 8000f4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f52:	40f1      	lsrs	r1, r6
 8000f54:	431f      	orrs	r7, r3
 8000f56:	e9c5 7100 	strd	r7, r1, [r5]
 8000f5a:	2600      	movs	r6, #0
 8000f5c:	4631      	mov	r1, r6
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	f1c2 0320 	rsb	r3, r2, #32
 8000f66:	40d8      	lsrs	r0, r3
 8000f68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f70:	4091      	lsls	r1, r2
 8000f72:	4301      	orrs	r1, r0
 8000f74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f78:	fa1f fe8c 	uxth.w	lr, ip
 8000f7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f80:	fb07 3610 	mls	r6, r7, r0, r3
 8000f84:	0c0b      	lsrs	r3, r1, #16
 8000f86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8e:	429e      	cmp	r6, r3
 8000f90:	fa04 f402 	lsl.w	r4, r4, r2
 8000f94:	d908      	bls.n	8000fa8 <__udivmoddi4+0x260>
 8000f96:	eb1c 0303 	adds.w	r3, ip, r3
 8000f9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9e:	d22f      	bcs.n	8001000 <__udivmoddi4+0x2b8>
 8000fa0:	429e      	cmp	r6, r3
 8000fa2:	d92d      	bls.n	8001000 <__udivmoddi4+0x2b8>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4463      	add	r3, ip
 8000fa8:	1b9b      	subs	r3, r3, r6
 8000faa:	b289      	uxth	r1, r1
 8000fac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	d908      	bls.n	8000fd2 <__udivmoddi4+0x28a>
 8000fc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc8:	d216      	bcs.n	8000ff8 <__udivmoddi4+0x2b0>
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d914      	bls.n	8000ff8 <__udivmoddi4+0x2b0>
 8000fce:	3e02      	subs	r6, #2
 8000fd0:	4461      	add	r1, ip
 8000fd2:	1ac9      	subs	r1, r1, r3
 8000fd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd8:	e738      	b.n	8000e4c <__udivmoddi4+0x104>
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e705      	b.n	8000dec <__udivmoddi4+0xa4>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e3      	b.n	8000dac <__udivmoddi4+0x64>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6f8      	b.n	8000dda <__udivmoddi4+0x92>
 8000fe8:	454b      	cmp	r3, r9
 8000fea:	d2a9      	bcs.n	8000f40 <__udivmoddi4+0x1f8>
 8000fec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7a3      	b.n	8000f40 <__udivmoddi4+0x1f8>
 8000ff8:	4646      	mov	r6, r8
 8000ffa:	e7ea      	b.n	8000fd2 <__udivmoddi4+0x28a>
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	e794      	b.n	8000f2a <__udivmoddi4+0x1e2>
 8001000:	4640      	mov	r0, r8
 8001002:	e7d1      	b.n	8000fa8 <__udivmoddi4+0x260>
 8001004:	46d0      	mov	r8, sl
 8001006:	e77b      	b.n	8000f00 <__udivmoddi4+0x1b8>
 8001008:	3b02      	subs	r3, #2
 800100a:	4461      	add	r1, ip
 800100c:	e732      	b.n	8000e74 <__udivmoddi4+0x12c>
 800100e:	4630      	mov	r0, r6
 8001010:	e709      	b.n	8000e26 <__udivmoddi4+0xde>
 8001012:	4464      	add	r4, ip
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x156>

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff f8e5 	bl	80001f4 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e007      	b.n	8001044 <bufclr+0x28>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf3      	blt.n	8001034 <bufclr+0x18>
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b096      	sub	sp, #88	; 0x58
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8001062:	f000 f939 	bl	80012d8 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8001066:	4823      	ldr	r0, [pc, #140]	; (80010f4 <ESP_Init+0x9c>)
 8001068:	f000 fa02 	bl	8001470 <Uart_sendstring>
	HAL_Delay(1000);
 800106c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001070:	f001 f9b6 	bl	80023e0 <HAL_Delay>

	Uart_flush();
 8001074:	f000 f978 	bl	8001368 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8001078:	481f      	ldr	r0, [pc, #124]	; (80010f8 <ESP_Init+0xa0>)
 800107a:	f000 f9f9 	bl	8001470 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 800107e:	bf00      	nop
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <ESP_Init+0xa4>)
 8001082:	f000 fa25 	bl	80014d0 <Wait_for>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f9      	beq.n	8001080 <ESP_Init+0x28>

	Uart_flush();
 800108c:	f000 f96c 	bl	8001368 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8001090:	481b      	ldr	r0, [pc, #108]	; (8001100 <ESP_Init+0xa8>)
 8001092:	f000 f9ed 	bl	8001470 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8001096:	bf00      	nop
 8001098:	4818      	ldr	r0, [pc, #96]	; (80010fc <ESP_Init+0xa4>)
 800109a:	f000 fa19 	bl	80014d0 <Wait_for>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f9      	beq.n	8001098 <ESP_Init+0x40>

	Uart_flush();
 80010a4:	f000 f960 	bl	8001368 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80010a8:	f107 0008 	add.w	r0, r7, #8
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4914      	ldr	r1, [pc, #80]	; (8001104 <ESP_Init+0xac>)
 80010b2:	f003 fa71 	bl	8004598 <siprintf>
	Uart_sendstring(data);
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f9d8 	bl	8001470 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 80010c0:	bf00      	nop
 80010c2:	4811      	ldr	r0, [pc, #68]	; (8001108 <ESP_Init+0xb0>)
 80010c4:	f000 fa04 	bl	80014d0 <Wait_for>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f9      	beq.n	80010c2 <ESP_Init+0x6a>

	Uart_flush();
 80010ce:	f000 f94b 	bl	8001368 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <ESP_Init+0xb4>)
 80010d4:	f000 f9cc 	bl	8001470 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80010d8:	bf00      	nop
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <ESP_Init+0xa4>)
 80010dc:	f000 f9f8 	bl	80014d0 <Wait_for>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f9      	beq.n	80010da <ESP_Init+0x82>

	Uart_flush();
 80010e6:	f000 f93f 	bl	8001368 <Uart_flush>

}
 80010ea:	bf00      	nop
 80010ec:	3758      	adds	r7, #88	; 0x58
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	08007980 	.word	0x08007980
 80010f8:	0800798c 	.word	0x0800798c
 80010fc:	08007994 	.word	0x08007994
 8001100:	0800799c 	.word	0x0800799c
 8001104:	080079ac 	.word	0x080079ac
 8001108:	080079c8 	.word	0x080079c8
 800110c:	080079d4 	.word	0x080079d4

08001110 <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, float value[])
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 8001116:	af02      	add	r7, sp, #8
 8001118:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800111c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8001120:	6018      	str	r0, [r3, #0]
 8001122:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001126:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800112a:	6019      	str	r1, [r3, #0]
 800112c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001130:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001134:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8001136:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800113a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fcc2 	bl	8003ad4 <memset>
	char local_buf2[30] = {0};
 8001150:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001154:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	3304      	adds	r3, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 800116e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001172:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	3304      	adds	r3, #4
 800117c:	22c4      	movs	r2, #196	; 0xc4
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fca7 	bl	8003ad4 <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8001186:	484b      	ldr	r0, [pc, #300]	; (80012b4 <ESP_Send_Multi+0x1a4>)
 8001188:	f000 f972 	bl	8001470 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800118c:	bf00      	nop
 800118e:	484a      	ldr	r0, [pc, #296]	; (80012b8 <ESP_Send_Multi+0x1a8>)
 8001190:	f000 f99e 	bl	80014d0 <Wait_for>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f9      	beq.n	800118e <ESP_Send_Multi+0x7e>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 800119a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800119e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80011a2:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4944      	ldr	r1, [pc, #272]	; (80012bc <ESP_Send_Multi+0x1ac>)
 80011aa:	f003 f9f5 	bl	8004598 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80011b4:	e026      	b.n	8001204 <ESP_Send_Multi+0xf4>
	{
		sprintf(field_buf, "&field%d=%f",i+1, value[i]);
 80011b6:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80011ba:	1c5c      	adds	r4, r3, #1
 80011bc:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80011c6:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9d1 	bl	8000578 <__aeabi_f2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	f107 0014 	add.w	r0, r7, #20
 80011de:	e9cd 2300 	strd	r2, r3, [sp]
 80011e2:	4622      	mov	r2, r4
 80011e4:	4936      	ldr	r1, [pc, #216]	; (80012c0 <ESP_Send_Multi+0x1b0>)
 80011e6:	f003 f9d7 	bl	8004598 <siprintf>
		strcat (local_buf, field_buf);
 80011ea:	f107 0214 	add.w	r2, r7, #20
 80011ee:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 f9ef 	bl	80045d8 <strcat>
	for (int i=0; i<numberoffileds; i++)
 80011fa:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80011fe:	3301      	adds	r3, #1
 8001200:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8001204:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001208:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800120c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	dbcf      	blt.n	80011b6 <ESP_Send_Multi+0xa6>
	}

	strcat(local_buf, "\r\n");
 8001216:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800121a:	4618      	mov	r0, r3
 800121c:	f7fe ffea 	bl	80001f4 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001228:	4413      	add	r3, r2
 800122a:	4a26      	ldr	r2, [pc, #152]	; (80012c4 <ESP_Send_Multi+0x1b4>)
 800122c:	8811      	ldrh	r1, [r2, #0]
 800122e:	7892      	ldrb	r2, [r2, #2]
 8001230:	8019      	strh	r1, [r3, #0]
 8001232:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 8001234:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ffdb 	bl	80001f4 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8001244:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001248:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 800124c:	491e      	ldr	r1, [pc, #120]	; (80012c8 <ESP_Send_Multi+0x1b8>)
 800124e:	4618      	mov	r0, r3
 8001250:	f003 f9a2 	bl	8004598 <siprintf>
	Uart_sendstring(local_buf2);
 8001254:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f909 	bl	8001470 <Uart_sendstring>
	while (!(Wait_for(">")));
 800125e:	bf00      	nop
 8001260:	481a      	ldr	r0, [pc, #104]	; (80012cc <ESP_Send_Multi+0x1bc>)
 8001262:	f000 f935 	bl	80014d0 <Wait_for>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f9      	beq.n	8001260 <ESP_Send_Multi+0x150>

	Uart_sendstring (local_buf);
 800126c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f8fd 	bl	8001470 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8001276:	bf00      	nop
 8001278:	4815      	ldr	r0, [pc, #84]	; (80012d0 <ESP_Send_Multi+0x1c0>)
 800127a:	f000 f929 	bl	80014d0 <Wait_for>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <ESP_Send_Multi+0x168>

	while (!(Wait_for("CLOSED")));
 8001284:	bf00      	nop
 8001286:	4813      	ldr	r0, [pc, #76]	; (80012d4 <ESP_Send_Multi+0x1c4>)
 8001288:	f000 f922 	bl	80014d0 <Wait_for>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f9      	beq.n	8001286 <ESP_Send_Multi+0x176>

	bufclr(local_buf);
 8001292:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fec0 	bl	800101c <bufclr>
	bufclr(local_buf2);
 800129c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff febb 	bl	800101c <bufclr>

	Ringbuf_init();
 80012a6:	f000 f817 	bl	80012d8 <Ringbuf_init>

}
 80012aa:	bf00      	nop
 80012ac:	f507 773f 	add.w	r7, r7, #764	; 0x2fc
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	080079e4 	.word	0x080079e4
 80012b8:	08007994 	.word	0x08007994
 80012bc:	08007a5c 	.word	0x08007a5c
 80012c0:	08007a74 	.word	0x08007a74
 80012c4:	08007a80 	.word	0x08007a80
 80012c8:	08007a34 	.word	0x08007a34
 80012cc:	08007a44 	.word	0x08007a44
 80012d0:	08007a48 	.word	0x08007a48
 80012d4:	08007a54 	.word	0x08007a54

080012d8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <Ringbuf_init+0x3c>)
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <Ringbuf_init+0x40>)
 80012e0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <Ringbuf_init+0x44>)
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <Ringbuf_init+0x48>)
 80012e6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <Ringbuf_init+0x4c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <Ringbuf_init+0x4c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <Ringbuf_init+0x4c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <Ringbuf_init+0x4c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	60da      	str	r2, [r3, #12]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200002f0 	.word	0x200002f0
 8001318:	20000260 	.word	0x20000260
 800131c:	200002f4 	.word	0x200002f4
 8001320:	200002a8 	.word	0x200002a8
 8001324:	200002f8 	.word	0x200002f8

08001328 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	3301      	adds	r3, #1
 800133a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800133e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	429a      	cmp	r2, r3
 8001348:	d007      	beq.n	800135a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	79f9      	ldrb	r1, [r7, #7]
 8001352:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <Uart_flush>:

void Uart_flush (void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <Uart_flush+0x1c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <Uart_flush+0x1c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200002f0 	.word	0x200002f0

08001388 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <Uart_read+0x4c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <Uart_read+0x4c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	429a      	cmp	r2, r3
 800139c:	d102      	bne.n	80013a4 <Uart_read+0x1c>
  {
    return -1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e010      	b.n	80013c6 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <Uart_read+0x4c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <Uart_read+0x4c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <Uart_read+0x4c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <Uart_read+0x4c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200002f0 	.word	0x200002f0

080013d8 <Uart_write>:

void Uart_write(int c)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db21      	blt.n	800142a <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <Uart_write+0x60>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	3301      	adds	r3, #1
 80013ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013f2:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80013f4:	bf00      	nop
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <Uart_write+0x60>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d0f9      	beq.n	80013f6 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <Uart_write+0x60>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <Uart_write+0x60>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	b2c9      	uxtb	r1, r1
 8001410:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <Uart_write+0x60>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <Uart_write+0x64>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <Uart_write+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001428:	60da      	str	r2, [r3, #12]
	}
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	200002f4 	.word	0x200002f4
 800143c:	200002f8 	.word	0x200002f8

08001440 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <IsDataAvailable+0x2c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <IsDataAvailable+0x2c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	b29b      	uxth	r3, r3
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b29b      	uxth	r3, r3
 8001458:	3340      	adds	r3, #64	; 0x40
 800145a:	b29b      	uxth	r3, r3
 800145c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
//			}
//	}
//	else {
//		return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
//	}
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200002f0 	.word	0x200002f0

08001470 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001478:	e006      	b.n	8001488 <Uart_sendstring+0x18>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ffa8 	bl	80013d8 <Uart_write>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f4      	bne.n	800147a <Uart_sendstring+0xa>
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <Uart_peek+0x30>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <Uart_peek+0x30>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d102      	bne.n	80014b6 <Uart_peek+0x1a>
  {
    return -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	e005      	b.n	80014c2 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <Uart_peek+0x30>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <Uart_peek+0x30>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	200002f0 	.word	0x200002f0

080014d0 <Wait_for>:
	}
	return 1;
}

int Wait_for (char *string)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7fe fe89 	bl	80001f4 <strlen>
 80014e2:	4603      	mov	r3, r0
 80014e4:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80014e6:	bf00      	nop
 80014e8:	f7ff ffaa 	bl	8001440 <IsDataAvailable>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0fa      	beq.n	80014e8 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 80014f2:	f7ff ffd3 	bl	800149c <Uart_peek>
 80014f6:	4601      	mov	r1, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4299      	cmp	r1, r3
 8001502:	d01a      	beq.n	800153a <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <Wait_for+0xa4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <Wait_for+0xa4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8001516:	e7e6      	b.n	80014e6 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
		Uart_read();
 800151e:	f7ff ff33 	bl	8001388 <Uart_read>
		if (so_far == len) return 1;
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	429a      	cmp	r2, r3
 8001528:	d101      	bne.n	800152e <Wait_for+0x5e>
 800152a:	2301      	movs	r3, #1
 800152c:	e01d      	b.n	800156a <Wait_for+0x9a>
		while (!IsDataAvailable());
 800152e:	bf00      	nop
 8001530:	f7ff ff86 	bl	8001440 <IsDataAvailable>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0fa      	beq.n	8001530 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 800153a:	f7ff ffaf 	bl	800149c <Uart_peek>
 800153e:	4601      	mov	r1, r0
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4299      	cmp	r1, r3
 800154a:	d0e5      	beq.n	8001518 <Wait_for+0x48>
	}

	if (so_far != len)
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	429a      	cmp	r2, r3
 8001552:	d002      	beq.n	800155a <Wait_for+0x8a>
	{
		so_far = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
		goto again;
 8001558:	e7c5      	b.n	80014e6 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	429a      	cmp	r2, r3
 8001560:	d101      	bne.n	8001566 <Wait_for+0x96>
 8001562:	2301      	movs	r3, #1
 8001564:	e001      	b.n	800156a <Wait_for+0x9a>
	else return -1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002f0 	.word	0x200002f0

08001578 <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f003 0320 	and.w	r3, r3, #32
 8001596:	2b00      	cmp	r3, #0
 8001598:	d013      	beq.n	80015c2 <Uart_isr+0x4a>
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00e      	beq.n	80015c2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <Uart_isr+0xac>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff feb4 	bl	8001328 <store_char>
        return;
 80015c0:	e02c      	b.n	800161c <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d027      	beq.n	800161c <Uart_isr+0xa4>
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d022      	beq.n	800161c <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <Uart_isr+0xb0>)
 80015d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <Uart_isr+0xb0>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	429a      	cmp	r2, r3
 80015e0:	d108      	bne.n	80015f4 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80015f2:	e012      	b.n	800161a <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <Uart_isr+0xb0>)
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <Uart_isr+0xb0>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <Uart_isr+0xb0>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	3301      	adds	r3, #1
 8001604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <Uart_isr+0xb0>)
 800160a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	7bba      	ldrb	r2, [r7, #14]
 8001618:	605a      	str	r2, [r3, #4]
    	return;
 800161a:	bf00      	nop
    }
}
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200002f0 	.word	0x200002f0
 8001628:	200002a8 	.word	0x200002a8

0800162c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001630:	f3bf 8f4f 	dsb	sy
}
 8001634:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <__NVIC_SystemReset+0x24>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800163e:	4904      	ldr	r1, [pc, #16]	; (8001650 <__NVIC_SystemReset+0x24>)
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_SystemReset+0x28>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001646:	f3bf 8f4f 	dsb	sy
}
 800164a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <__NVIC_SystemReset+0x20>
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	05fa0004 	.word	0x05fa0004

08001658 <GPIO_Config>:
7. Program the I2C_CR1 register to enable the peripheral
*/


//Inits
void GPIO_Config(void) {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<1);			//GPIOB Clock Enable
 800165c:	4b47      	ldr	r3, [pc, #284]	; (800177c <GPIO_Config+0x124>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a46      	ldr	r2, [pc, #280]	; (800177c <GPIO_Config+0x124>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~(1<<16);		//Alternate Function Mode- 10
 8001668:	4b45      	ldr	r3, [pc, #276]	; (8001780 <GPIO_Config+0x128>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <GPIO_Config+0x128>)
 800166e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<17);
 8001674:	4b42      	ldr	r3, [pc, #264]	; (8001780 <GPIO_Config+0x128>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a41      	ldr	r2, [pc, #260]	; (8001780 <GPIO_Config+0x128>)
 800167a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1<<18);
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <GPIO_Config+0x128>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <GPIO_Config+0x128>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<19);
 800168c:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <GPIO_Config+0x128>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a3b      	ldr	r2, [pc, #236]	; (8001780 <GPIO_Config+0x128>)
 8001692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001696:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (1<<8);		//Output Open-drain- 1
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <GPIO_Config+0x128>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a38      	ldr	r2, [pc, #224]	; (8001780 <GPIO_Config+0x128>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1<<9);
 80016a4:	4b36      	ldr	r3, [pc, #216]	; (8001780 <GPIO_Config+0x128>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a35      	ldr	r2, [pc, #212]	; (8001780 <GPIO_Config+0x128>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6053      	str	r3, [r2, #4]

	GPIOB->OSPEEDR |= (1<<16);		//High Speed- 11, 50Mhz?
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <GPIO_Config+0x128>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a32      	ldr	r2, [pc, #200]	; (8001780 <GPIO_Config+0x128>)
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ba:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<<17);
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <GPIO_Config+0x128>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a2f      	ldr	r2, [pc, #188]	; (8001780 <GPIO_Config+0x128>)
 80016c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c6:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<<18);
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <GPIO_Config+0x128>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a2c      	ldr	r2, [pc, #176]	; (8001780 <GPIO_Config+0x128>)
 80016ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1<<19);
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <GPIO_Config+0x128>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a29      	ldr	r2, [pc, #164]	; (8001780 <GPIO_Config+0x128>)
 80016da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016de:	6093      	str	r3, [r2, #8]

	GPIOB->PUPDR &= ~(1<<16);		//Pull-up- 01, No Pull- 00?
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <GPIO_Config+0x128>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a26      	ldr	r2, [pc, #152]	; (8001780 <GPIO_Config+0x128>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ea:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1<<17);
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <GPIO_Config+0x128>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a23      	ldr	r2, [pc, #140]	; (8001780 <GPIO_Config+0x128>)
 80016f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80016f6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1<<18);
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <GPIO_Config+0x128>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4a20      	ldr	r2, [pc, #128]	; (8001780 <GPIO_Config+0x128>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001702:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1<<19);
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <GPIO_Config+0x128>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <GPIO_Config+0x128>)
 800170a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800170e:	60d3      	str	r3, [r2, #12]

	GPIOB->AFR[1] &= ~(1<<0);		//AF6- 0110
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <GPIO_Config+0x128>)
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <GPIO_Config+0x128>)
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1<<1);		//Wrong ung una, AF4- 0100 (for I2C1)
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <GPIO_Config+0x128>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	4a17      	ldr	r2, [pc, #92]	; (8001780 <GPIO_Config+0x128>)
 8001722:	f023 0302 	bic.w	r3, r3, #2
 8001726:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1<<2);
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <GPIO_Config+0x128>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <GPIO_Config+0x128>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1<<3);
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <GPIO_Config+0x128>)
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	4a11      	ldr	r2, [pc, #68]	; (8001780 <GPIO_Config+0x128>)
 800173a:	f023 0308 	bic.w	r3, r3, #8
 800173e:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->AFR[1] &= ~(1<<4);		//AF7- 0111
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <GPIO_Config+0x128>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <GPIO_Config+0x128>)
 8001746:	f023 0310 	bic.w	r3, r3, #16
 800174a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1<<5);
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <GPIO_Config+0x128>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <GPIO_Config+0x128>)
 8001752:	f023 0320 	bic.w	r3, r3, #32
 8001756:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1<<6);
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <GPIO_Config+0x128>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	4a08      	ldr	r2, [pc, #32]	; (8001780 <GPIO_Config+0x128>)
 800175e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001762:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1<<7);
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <GPIO_Config+0x128>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <GPIO_Config+0x128>)
 800176a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800176e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400

08001784 <I2C_Config>:

void I2C_Config(void) {
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<21);		//I2C Clock Enable
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <I2C_Config+0xdc>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a34      	ldr	r2, [pc, #208]	; (8001860 <I2C_Config+0xdc>)
 800178e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40

	RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <I2C_Config+0xdc>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a31      	ldr	r2, [pc, #196]	; (8001860 <I2C_Config+0xdc>)
 800179a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179e:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <I2C_Config+0xdc>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a2e      	ldr	r2, [pc, #184]	; (8001860 <I2C_Config+0xdc>)
 80017a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017aa:	6213      	str	r3, [r2, #32]
	I2C1->CR1 |= (1<<15);			//Reset- for errors or locked states
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <I2C_Config+0xe0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a2c      	ldr	r2, [pc, #176]	; (8001864 <I2C_Config+0xe0>)
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b6:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<15);
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <I2C_Config+0xe0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <I2C_Config+0xe0>)
 80017be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017c2:	6013      	str	r3, [r2, #0]

	I2C1->CR2 |= (50<<0);			//50MHz, 100kHz; used 8MHz as APB1 PCLK; 8
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <I2C_Config+0xe0>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a26      	ldr	r2, [pc, #152]	; (8001864 <I2C_Config+0xe0>)
 80017ca:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 80017ce:	6053      	str	r3, [r2, #4]

	I2C1->CCR &= ~(1<<15);			//SM																																																																																																											+	`, PCLK- 8MHz? (>=2MHz for SM)
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <I2C_Config+0xe0>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a23      	ldr	r2, [pc, #140]	; (8001864 <I2C_Config+0xe0>)
 80017d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017da:	61d3      	str	r3, [r2, #28]
	I2C1->CCR &= ~(1<<14);			//Since not FM
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <I2C_Config+0xe0>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	4a20      	ldr	r2, [pc, #128]	; (8001864 <I2C_Config+0xe0>)
 80017e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e6:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= (250<<0);			//250, High, computation on CtrlsTech; 40
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <I2C_Config+0xe0>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <I2C_Config+0xe0>)
 80017ee:	f043 03fa 	orr.w	r3, r3, #250	; 0xfa
 80017f2:	61d3      	str	r3, [r2, #28]

	I2C1->TRISE |= (51<<0);			//50+1, "; 9
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <I2C_Config+0xe0>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <I2C_Config+0xe0>)
 80017fa:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 80017fe:	6213      	str	r3, [r2, #32]

	//Configure I2C1 addr mode, dual addr mode, gen call mode, own addr
	I2C1->CR1 &= ~(1<<0);			//Disable I2C1
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <I2C_Config+0xe0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <I2C_Config+0xe0>)
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	6013      	str	r3, [r2, #0]
	I2C1->OAR1 &= ~(1<<15);
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <I2C_Config+0xe0>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <I2C_Config+0xe0>)
 8001812:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001816:	6093      	str	r3, [r2, #8]
	I2C1->OAR1 |= (1<<15);			//7-bit addr mode
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <I2C_Config+0xe0>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a11      	ldr	r2, [pc, #68]	; (8001864 <I2C_Config+0xe0>)
 800181e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001822:	6093      	str	r3, [r2, #8]
	I2C1->OAR2 &= (1<<0);
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <I2C_Config+0xe0>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <I2C_Config+0xe0>)
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60d3      	str	r3, [r2, #12]
	I2C1->CR1 &= ~(I2C_CR1_ENGC | I2C_CR1_NOSTRETCH);
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <I2C_Config+0xe0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <I2C_Config+0xe0>)
 8001836:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800183a:	6013      	str	r3, [r2, #0]
//	I2C1->OAR1 &= ~(I2C_OAR1_ADDMODE | I2C_OAR1_OA1EN);
//	I2C1->OAR1 |= I2C_OAR1_ADDMODE_7BIT;
//	I2C1->OAR2 &= ~I2C_OAR2_OA2EN;
//	I2C1->CR1 &= ~(I2C_CR1_GCEN | I2C_CR1_NOSTETCH);

	I2C1->CR1 |= (1<<10);			//ACK Enable
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <I2C_Config+0xe0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a08      	ldr	r2, [pc, #32]	; (8001864 <I2C_Config+0xe0>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001846:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<0);			//Peripheral Enable
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <I2C_Config+0xe0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a05      	ldr	r2, [pc, #20]	; (8001864 <I2C_Config+0xe0>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40005400 	.word	0x40005400

08001868 <I2C_Start>:

//Functions
void I2C_Start(void) {
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1<<8);				//Start- repeated
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <I2C_Start+0x2c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <I2C_Start+0x2c>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001876:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & (1<<0)));		//Wait for SB bit to set (1)
 8001878:	bf00      	nop
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <I2C_Start+0x2c>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f9      	beq.n	800187a <I2C_Start+0x12>
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40005400 	.word	0x40005400

08001898 <I2C_Stop>:

void I2C_Stop(void) {
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1<<9);				//Stop I2C
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <I2C_Stop+0x1c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <I2C_Stop+0x1c>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40005400 	.word	0x40005400

080018b8 <I2C_Write>:

void I2C_Write(uint8_t data) {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = data;
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <I2C_Write+0x2c>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1<<7)));		//Wait for TXE but to set, BTF?
 80018c8:	bf00      	nop
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <I2C_Write+0x2c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f9      	beq.n	80018ca <I2C_Write+0x12>
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40005400 	.word	0x40005400

080018e8 <I2C_Wake>:

void I2C_Wake(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	I2C_Start();
 80018ec:	f7ff ffbc 	bl	8001868 <I2C_Start>

	(void) I2C1->SR1;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <I2C_Wake+0x20>)
 80018f2:	695b      	ldr	r3, [r3, #20]
	I2C1->DR = AM2320_ADDRESS;
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <I2C_Wake+0x20>)
 80018f6:	22b8      	movs	r2, #184	; 0xb8
 80018f8:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 fd70 	bl	80023e0 <HAL_Delay>


	I2C_Stop();
 8001900:	f7ff ffca 	bl	8001898 <I2C_Stop>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40005400 	.word	0x40005400

0800190c <start_sequence>:

void start_sequence(uint8_t dir) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
	I2C_Start();
 8001916:	f7ff ffa7 	bl	8001868 <I2C_Start>

	(void) I2C1->SR1;								//Addr
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <start_sequence+0x40>)
 800191c:	695b      	ldr	r3, [r3, #20]
	I2C1->DR = dir == 0? AM2320_ADDRESS : (AM2320_ADDRESS + 1);
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <start_sequence+0x1c>
 8001924:	23b8      	movs	r3, #184	; 0xb8
 8001926:	e000      	b.n	800192a <start_sequence+0x1e>
 8001928:	23b9      	movs	r3, #185	; 0xb9
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <start_sequence+0x40>)
 800192c:	6113      	str	r3, [r2, #16]

	while (!(I2C1->SR1 & (1<<1)));					//Wait for ADDR bit to set
 800192e:	bf00      	nop
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <start_sequence+0x40>)
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f9      	beq.n	8001930 <start_sequence+0x24>
	(void) I2C1->SR1;								//For SB?
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <start_sequence+0x40>)
 800193e:	695b      	ldr	r3, [r3, #20]
	(void) I2C1->SR2;								//For ADDR?
 8001940:	4b02      	ldr	r3, [pc, #8]	; (800194c <start_sequence+0x40>)
 8001942:	699b      	ldr	r3, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40005400 	.word	0x40005400

08001950 <crc16>:

unsigned int crc16(uint8_t *ptr, uint8_t len) {		//Based on datasheet
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
	unsigned int crc = 0xFFFF;
 800195c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001960:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	while(len--) {
 8001962:	e022      	b.n	80019aa <crc16+0x5a>
		crc ^= *ptr++;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4053      	eors	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
		for(i=0; i<8; i++) {
 8001974:	2300      	movs	r3, #0
 8001976:	72fb      	strb	r3, [r7, #11]
 8001978:	e014      	b.n	80019a4 <crc16+0x54>
			if(crc & 0x01) {
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <crc16+0x48>
				crc >>= 1;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	085b      	lsrs	r3, r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
				crc ^= 0xA001;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8001990:	f083 0301 	eor.w	r3, r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e002      	b.n	800199e <crc16+0x4e>
			}
			else {
				crc >>= 1;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
		for(i=0; i<8; i++) {
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	3301      	adds	r3, #1
 80019a2:	72fb      	strb	r3, [r7, #11]
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	2b07      	cmp	r3, #7
 80019a8:	d9e7      	bls.n	800197a <crc16+0x2a>
	while(len--) {
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	1e5a      	subs	r2, r3, #1
 80019ae:	70fa      	strb	r2, [r7, #3]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1d7      	bne.n	8001964 <crc16+0x14>
			}
		}
	}

	return crc;
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <AM2320_ReadData>:

void AM2320_ReadData(void) {				//*t, *h
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t buf[8];
	//uint8_t data_t[3];

	I2C_Wake();
 80019ca:	f7ff ff8d 	bl	80018e8 <I2C_Wake>

	//Send Read Command
	start_sequence(0);						//TX
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff ff9c 	bl	800190c <start_sequence>
	I2C_Write(0x03);
 80019d4:	2003      	movs	r0, #3
 80019d6:	f7ff ff6f 	bl	80018b8 <I2C_Write>
	I2C_Write(0x00);
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff ff6c 	bl	80018b8 <I2C_Write>
	I2C_Write(0x04);
 80019e0:	2004      	movs	r0, #4
 80019e2:	f7ff ff69 	bl	80018b8 <I2C_Write>
	I2C_Stop();
 80019e6:	f7ff ff57 	bl	8001898 <I2C_Stop>
	HAL_Delay(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 fcf8 	bl	80023e0 <HAL_Delay>

	//Read Data
	start_sequence(1);						//RX
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff ff8b 	bl	800190c <start_sequence>
	for(i=0;i<8;i++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]
 80019fa:	e011      	b.n	8001a20 <AM2320_ReadData+0x5c>
		while (!(I2C1->SR1 & (1<<6)));		//Wait for RXNE bit to set
 80019fc:	bf00      	nop
 80019fe:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <AM2320_ReadData+0x110>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f9      	beq.n	80019fe <AM2320_ReadData+0x3a>
		buf[i] = I2C1->DR;
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <AM2320_ReadData+0x110>)
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	3318      	adds	r3, #24
 8001a14:	443b      	add	r3, r7
 8001a16:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(i=0;i<8;i++) {
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	75fb      	strb	r3, [r7, #23]
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	d9ea      	bls.n	80019fc <AM2320_ReadData+0x38>
	}
	I2C_Stop();
 8001a26:	f7ff ff37 	bl	8001898 <I2C_Stop>
//
//	HAL_I2C_IsDeviceReady(&hi2c1, 0xB8, 2, 1);
//	HAL_I2C_Master_Transmit(&hi2c1, 0xB8, data_t, 3, 1);
//	HAL_I2C_Master_Receive(&hi2c1, 0xB9, buf, 8, 2);

	unsigned int Rcrc = buf[7] << 8;
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	613b      	str	r3, [r7, #16]
	Rcrc += buf[6];
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	461a      	mov	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4413      	add	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
	if (Rcrc == crc16(buf, 6)) {
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2106      	movs	r1, #6
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff86 	bl	8001950 <crc16>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d13e      	bne.n	8001aca <AM2320_ReadData+0x106>
		unsigned int temperature = ((buf[4] & 0x7F) << 8) + buf[5];
 8001a4c:	793b      	ldrb	r3, [r7, #4]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001a54:	797a      	ldrb	r2, [r7, #5]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
		temp = temperature / 10.0;
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7fe fd6a 	bl	8000534 <__aeabi_ui2d>
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <AM2320_ReadData+0x114>)
 8001a66:	f7fe ff09 	bl	800087c <__aeabi_ddiv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f8b1 	bl	8000bd8 <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a18      	ldr	r2, [pc, #96]	; (8001adc <AM2320_ReadData+0x118>)
 8001a7a:	6013      	str	r3, [r2, #0]
		temp = (((buf[4] & 0x80) >> 7) == 1) ? ((temp) * (-1)) : temp;
 8001a7c:	793b      	ldrb	r3, [r7, #4]
 8001a7e:	09db      	lsrs	r3, r3, #7
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d105      	bne.n	8001a92 <AM2320_ReadData+0xce>
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <AM2320_ReadData+0x118>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	eef1 7a67 	vneg.f32	s15, s15
 8001a90:	e002      	b.n	8001a98 <AM2320_ReadData+0xd4>
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <AM2320_ReadData+0x118>)
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <AM2320_ReadData+0x118>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]
		unsigned int humidity = (buf[2] << 8) + buf[3];
 8001a9e:	78bb      	ldrb	r3, [r7, #2]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
		humid = humidity / 10.0;
 8001aa8:	68b8      	ldr	r0, [r7, #8]
 8001aaa:	f7fe fd43 	bl	8000534 <__aeabi_ui2d>
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <AM2320_ReadData+0x114>)
 8001ab4:	f7fe fee2 	bl	800087c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f88a 	bl	8000bd8 <__aeabi_d2f>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <AM2320_ReadData+0x11c>)
 8001ac8:	6013      	str	r3, [r2, #0]
		//return 0;
	}
	//return 2;
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	40240000 	.word	0x40240000
 8001adc:	2000033c 	.word	0x2000033c
 8001ae0:	20000340 	.word	0x20000340
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aee:	f000 fc05 	bl	80022fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af2:	f000 f919 	bl	8001d28 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af6:	f000 f9a9 	bl	8001e4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001afa:	f000 f97d 	bl	8001df8 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  GPIO_Config();
 8001afe:	f7ff fdab 	bl	8001658 <GPIO_Config>
  I2C_Config();
 8001b02:	f7ff fe3f 	bl	8001784 <I2C_Config>
  ESP_Init("EEE192-320", "EEE192_Room320");			//"JEDEDCHICKEN", "ChickenZ"; "HABIBI", "HABIBIBI";
 8001b06:	4974      	ldr	r1, [pc, #464]	; (8001cd8 <main+0x1f0>)
 8001b08:	4874      	ldr	r0, [pc, #464]	; (8001cdc <main+0x1f4>)
 8001b0a:	f7ff faa5 	bl	8001058 <ESP_Init>
  I2C1->CR1 |= I2C_CR1_ACK;		//ACK Enable
 8001b0e:	4b74      	ldr	r3, [pc, #464]	; (8001ce0 <main+0x1f8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a73      	ldr	r2, [pc, #460]	; (8001ce0 <main+0x1f8>)
 8001b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b18:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	auto_recon = HAL_GetTick() + 60000;
 8001b1a:	f000 fc55 	bl	80023c8 <HAL_GetTick>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8001b24:	3360      	adds	r3, #96	; 0x60
 8001b26:	4a6f      	ldr	r2, [pc, #444]	; (8001ce4 <main+0x1fc>)
 8001b28:	6013      	str	r3, [r2, #0]

	//LED_ONOFF();
	AM2320_ReadData();
 8001b2a:	f7ff ff4b 	bl	80019c4 <AM2320_ReadData>
	//Virtual Actuators
	//Fan system- 1 direct fan, 1 ceiling fan
	//Golden Pothos / "Epipremnum aureum" Requirements- T=2 (65degF night, 75degF day), H=2 (25%-49%), W=2 (Soil surface must be dry before re-watering)
	//1hr sensor data gathering...
	//Time
	time_t current_time = time(NULL);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f002 fd62 	bl	80045f8 <time>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	e9c7 2300 	strd	r2, r3, [r7]
	struct tm *local_time = localtime(&current_time);
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 fea6 	bl	8003890 <localtime>
 8001b44:	60f8      	str	r0, [r7, #12]
	int hour = local_time->tm_hour;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	60bb      	str	r3, [r7, #8]
	am_pm = (hour < 12) ? "AM" : "PM";
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b0b      	cmp	r3, #11
 8001b50:	dc01      	bgt.n	8001b56 <main+0x6e>
 8001b52:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <main+0x200>)
 8001b54:	e000      	b.n	8001b58 <main+0x70>
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <main+0x204>)
 8001b58:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <main+0x208>)
 8001b5a:	6013      	str	r3, [r2, #0]

	//C-F conversion
	tempF = ((9.0/5) * temp) + 32.0;
 8001b5c:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <main+0x20c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fd09 	bl	8000578 <__aeabi_f2d>
 8001b66:	a35a      	add	r3, pc, #360	; (adr r3, 8001cd0 <main+0x1e8>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd5c 	bl	8000628 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b5e      	ldr	r3, [pc, #376]	; (8001cf8 <main+0x210>)
 8001b7e:	f7fe fb9d 	bl	80002bc <__adddf3>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7ff f825 	bl	8000bd8 <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a5a      	ldr	r2, [pc, #360]	; (8001cfc <main+0x214>)
 8001b92:	6013      	str	r3, [r2, #0]

	//
	if (strcmp(am_pm, "AM") == 0) {		//If equal
 8001b94:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <main+0x208>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4953      	ldr	r1, [pc, #332]	; (8001ce8 <main+0x200>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fb20 	bl	80001e0 <strcmp>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d125      	bne.n	8001bf2 <main+0x10a>
		if (tempF < 75.0) {
 8001ba6:	4b55      	ldr	r3, [pc, #340]	; (8001cfc <main+0x214>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d00 <main+0x218>
 8001bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb8:	d508      	bpl.n	8001bcc <main+0xe4>
			direct_fan=0.0;				//Off
 8001bba:	4b52      	ldr	r3, [pc, #328]	; (8001d04 <main+0x21c>)
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
			ceiling_fan=1.0;			//CW
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <main+0x220>)
 8001bc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e037      	b.n	8001c3c <main+0x154>
		}
		else if (tempF > 75.0) {
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <main+0x214>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001d00 <main+0x218>
 8001bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	dd2d      	ble.n	8001c3c <main+0x154>
			direct_fan=1.0;				//Direct
 8001be0:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <main+0x21c>)
 8001be2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001be6:	601a      	str	r2, [r3, #0]
			ceiling_fan=2.0;			//CC
 8001be8:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <main+0x220>)
 8001bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e024      	b.n	8001c3c <main+0x154>
		}
	}
	else {
		if (tempF < 65.0) {
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <main+0x214>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001d0c <main+0x224>
 8001bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	d508      	bpl.n	8001c18 <main+0x130>
			direct_fan=0.0;
 8001c06:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <main+0x21c>)
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
			ceiling_fan=1.0;
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <main+0x220>)
 8001c10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e011      	b.n	8001c3c <main+0x154>
		}
		else if (tempF > 65.0) {
 8001c18:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <main+0x214>)
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001d0c <main+0x224>
 8001c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2a:	dd07      	ble.n	8001c3c <main+0x154>
			direct_fan=1.0;
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <main+0x21c>)
 8001c2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c32:	601a      	str	r2, [r3, #0]
			ceiling_fan=2.0;
 8001c34:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <main+0x220>)
 8001c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c3a:	601a      	str	r2, [r3, #0]
		}
	}

	//Water system
	if (humid < 25.0) {
 8001c3c:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <main+0x228>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d508      	bpl.n	8001c62 <main+0x17a>
		humidity_tray=2.0;				//Pump
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <main+0x22c>)
 8001c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c56:	601a      	str	r2, [r3, #0]
		moisture_absorber_tray=0.0;		//Close
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <main+0x230>)
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e011      	b.n	8001c86 <main+0x19e>
	}
	else if (humid > 49.0) {
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <main+0x228>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001d1c <main+0x234>
 8001c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	dd07      	ble.n	8001c86 <main+0x19e>
		humidity_tray=1.0;				//Drain
 8001c76:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <main+0x22c>)
 8001c78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c7c:	601a      	str	r2, [r3, #0]
		moisture_absorber_tray=1.0;		//Open
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <main+0x230>)
 8001c80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c84:	601a      	str	r2, [r3, #0]
	}

	//
	buf_data[0] = temp;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <main+0x20c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <main+0x238>)
 8001c8c:	6013      	str	r3, [r2, #0]
	buf_data[1] = humid;
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <main+0x228>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <main+0x238>)
 8001c94:	6053      	str	r3, [r2, #4]
	buf_data[2] = direct_fan;
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <main+0x21c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <main+0x238>)
 8001c9c:	6093      	str	r3, [r2, #8]
	buf_data[3] = ceiling_fan;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <main+0x220>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <main+0x238>)
 8001ca4:	60d3      	str	r3, [r2, #12]
	buf_data[4] = humidity_tray;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <main+0x22c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <main+0x238>)
 8001cac:	6113      	str	r3, [r2, #16]
	buf_data[5] = moisture_absorber_tray;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <main+0x230>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <main+0x238>)
 8001cb4:	6153      	str	r3, [r2, #20]
	ESP_Send_Multi("F7VIFLRMML37ATTC", 6, buf_data);
 8001cb6:	4a1a      	ldr	r2, [pc, #104]	; (8001d20 <main+0x238>)
 8001cb8:	2106      	movs	r1, #6
 8001cba:	481a      	ldr	r0, [pc, #104]	; (8001d24 <main+0x23c>)
 8001cbc:	f7ff fa28 	bl	8001110 <ESP_Send_Multi>
	HAL_Delay(15001);										//Must be >=15s delay
 8001cc0:	f643 2099 	movw	r0, #15001	; 0x3a99
 8001cc4:	f000 fb8c 	bl	80023e0 <HAL_Delay>
  {
 8001cc8:	e727      	b.n	8001b1a <main+0x32>
 8001cca:	bf00      	nop
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	cccccccd 	.word	0xcccccccd
 8001cd4:	3ffccccc 	.word	0x3ffccccc
 8001cd8:	08007a84 	.word	0x08007a84
 8001cdc:	08007a94 	.word	0x08007a94
 8001ce0:	40005400 	.word	0x40005400
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	08007aa0 	.word	0x08007aa0
 8001cec:	08007aa4 	.word	0x08007aa4
 8001cf0:	20000360 	.word	0x20000360
 8001cf4:	2000033c 	.word	0x2000033c
 8001cf8:	40400000 	.word	0x40400000
 8001cfc:	20000364 	.word	0x20000364
 8001d00:	42960000 	.word	0x42960000
 8001d04:	20000368 	.word	0x20000368
 8001d08:	2000036c 	.word	0x2000036c
 8001d0c:	42820000 	.word	0x42820000
 8001d10:	20000340 	.word	0x20000340
 8001d14:	20000370 	.word	0x20000370
 8001d18:	20000374 	.word	0x20000374
 8001d1c:	42440000 	.word	0x42440000
 8001d20:	20000344 	.word	0x20000344
 8001d24:	08007aa8 	.word	0x08007aa8

08001d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b094      	sub	sp, #80	; 0x50
 8001d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2e:	f107 0320 	add.w	r3, r7, #32
 8001d32:	2230      	movs	r2, #48	; 0x30
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fecc 	bl	8003ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <SystemClock_Config+0xc8>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <SystemClock_Config+0xc8>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <SystemClock_Config+0xc8>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <SystemClock_Config+0xcc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <SystemClock_Config+0xcc>)
 8001d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <SystemClock_Config+0xcc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001d9c:	2364      	movs	r3, #100	; 0x64
 8001d9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001da0:	2302      	movs	r3, #2
 8001da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001da4:	2304      	movs	r3, #4
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da8:	f107 0320 	add.w	r3, r7, #32
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fdeb 	bl	8002988 <HAL_RCC_OscConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001db8:	f000 f8da 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 f84d 	bl	8002e78 <HAL_RCC_ClockConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001de4:	f000 f8c4 	bl	8001f70 <Error_Handler>
  }
}
 8001de8:	bf00      	nop
 8001dea:	3750      	adds	r7, #80	; 0x50
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000

08001df8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_USART1_UART_Init+0x4c>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <MX_USART1_UART_Init+0x50>)
 8001e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <MX_USART1_UART_Init+0x4c>)
 8001e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <MX_USART1_UART_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_USART1_UART_Init+0x4c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <MX_USART1_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <MX_USART1_UART_Init+0x4c>)
 8001e1e:	220c      	movs	r2, #12
 8001e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <MX_USART1_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <MX_USART1_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_USART1_UART_Init+0x4c>)
 8001e30:	f001 fa42 	bl	80032b8 <HAL_UART_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e3a:	f000 f899 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200002f8 	.word	0x200002f8
 8001e48:	40011000 	.word	0x40011000

08001e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a3d      	ldr	r2, [pc, #244]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a2f      	ldr	r2, [pc, #188]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <MX_GPIO_Init+0x114>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	4823      	ldr	r0, [pc, #140]	; (8001f64 <MX_GPIO_Init+0x118>)
 8001ed8:	f000 fd3c 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ee2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481d      	ldr	r0, [pc, #116]	; (8001f68 <MX_GPIO_Init+0x11c>)
 8001ef4:	f000 fbaa 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ef8:	230c      	movs	r3, #12
 8001efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4814      	ldr	r0, [pc, #80]	; (8001f64 <MX_GPIO_Init+0x118>)
 8001f14:	f000 fb9a 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480d      	ldr	r0, [pc, #52]	; (8001f64 <MX_GPIO_Init+0x118>)
 8001f30:	f000 fb8c 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3a:	2312      	movs	r3, #18
 8001f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f46:	2304      	movs	r3, #4
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4806      	ldr	r0, [pc, #24]	; (8001f6c <MX_GPIO_Init+0x120>)
 8001f52:	f000 fb7b 	bl	800264c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f56:	bf00      	nop
 8001f58:	3728      	adds	r7, #40	; 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020400 	.word	0x40020400

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <Error_Handler+0x8>
	...

08001f7c <SysTick_Handler>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	tick = HAL_GetTick();
 8001f80:	f000 fa22 	bl	80023c8 <HAL_GetTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <SysTick_Handler+0x28>)
 8001f88:	6013      	str	r3, [r2, #0]
	if (tick > auto_recon) { NVIC_SystemReset(); }
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <SysTick_Handler+0x28>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <SysTick_Handler+0x2c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d901      	bls.n	8001f9a <SysTick_Handler+0x1e>
 8001f96:	f7ff fb49 	bl	800162c <__NVIC_SystemReset>

	HAL_IncTick();
 8001f9a:	f000 fa01 	bl	80023a0 <HAL_IncTick>
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000035c 	.word	0x2000035c
 8001fa8:	20000000 	.word	0x20000000

08001fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_MspInit+0x4c>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fea:	2007      	movs	r0, #7
 8001fec:	f000 faec 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800

08001ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_UART_MspInit+0x94>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d134      	bne.n	8002088 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_UART_MspInit+0x98>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <HAL_UART_MspInit+0x98>)
 8002028:	f043 0310 	orr.w	r3, r3, #16
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_UART_MspInit+0x98>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_UART_MspInit+0x98>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <HAL_UART_MspInit+0x98>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_UART_MspInit+0x98>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002056:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002068:	2307      	movs	r3, #7
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4809      	ldr	r0, [pc, #36]	; (8002098 <HAL_UART_MspInit+0x9c>)
 8002074:	f000 faea 	bl	800264c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2025      	movs	r0, #37	; 0x25
 800207e:	f000 faae 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002082:	2025      	movs	r0, #37	; 0x25
 8002084:	f000 fac7 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40011000 	.word	0x40011000
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000

0800209c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <NMI_Handler+0x4>

080020a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <HardFault_Handler+0x4>

080020a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <MemManage_Handler+0x4>

080020ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <UsageFault_Handler+0x4>

080020ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <USART1_IRQHandler+0x10>)
 80020ea:	f7ff fa45 	bl	8001578 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200002f8 	.word	0x200002f8

080020f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_kill>:

int _kill(int pid, int sig)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002112:	f001 fb93 	bl	800383c <__errno>
 8002116:	4603      	mov	r3, r0
 8002118:	2216      	movs	r2, #22
 800211a:	601a      	str	r2, [r3, #0]
  return -1;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_exit>:

void _exit (int status)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffe7 	bl	8002108 <_kill>
  while (1) {}    /* Make sure we hang here */
 800213a:	e7fe      	b.n	800213a <_exit+0x12>

0800213c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e00a      	b.n	8002164 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800214e:	f3af 8000 	nop.w
 8002152:	4601      	mov	r1, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf0      	blt.n	800214e <_read+0x12>
  }

  return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e009      	b.n	800219c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	60ba      	str	r2, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf1      	blt.n	8002188 <_write+0x12>
  }
  return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_close>:

int _close(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d6:	605a      	str	r2, [r3, #4]
  return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_isatty>:

int _isatty(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f001 faf8 	bl	800383c <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20020000 	.word	0x20020000
 8002278:	00000400 	.word	0x00000400
 800227c:	2000037c 	.word	0x2000037c
 8002280:	200003c0 	.word	0x200003c0

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ae:	490e      	ldr	r1, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c4:	4c0b      	ldr	r4, [pc, #44]	; (80022f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d2:	f7ff ffd7 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f001 fab7 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7ff fc05 	bl	8001ae8 <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 80022ec:	08007fe0 	.word	0x08007fe0
  ldr r2, =_sbss
 80022f0:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 80022f4:	200003bc 	.word	0x200003bc

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f94f 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fe3c 	bl	8001fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f967 	bl	8002632 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f000 f92f 	bl	80025de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000008 	.word	0x20000008
 8002398:	20000010 	.word	0x20000010
 800239c:	2000000c 	.word	0x2000000c

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x20>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_IncTick+0x24>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000010 	.word	0x20000010
 80023c4:	20000380 	.word	0x20000380

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000380 	.word	0x20000380

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff ffee 	bl	80023c8 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffde 	bl	80023c8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000010 	.word	0x20000010

08002428 <__NVIC_SetPriorityGrouping>:
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f7ff ff8e 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff29 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff3e 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff8e 	bl	800251c <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5d 	bl	80024c8 <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff31 	bl	800248c <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa2 	bl	8002584 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e159      	b.n	800291c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8148 	bne.w	8002916 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d005      	beq.n	800269e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269a:	2b02      	cmp	r3, #2
 800269c:	d130      	bne.n	8002700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d4:	2201      	movs	r2, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 0201 	and.w	r2, r3, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b03      	cmp	r3, #3
 800270a:	d017      	beq.n	800273c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d123      	bne.n	8002790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a2 	beq.w	8002916 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b57      	ldr	r3, [pc, #348]	; (8002934 <HAL_GPIO_Init+0x2e8>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a56      	ldr	r2, [pc, #344]	; (8002934 <HAL_GPIO_Init+0x2e8>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b54      	ldr	r3, [pc, #336]	; (8002934 <HAL_GPIO_Init+0x2e8>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ee:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_GPIO_Init+0x2ec>)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a49      	ldr	r2, [pc, #292]	; (800293c <HAL_GPIO_Init+0x2f0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d019      	beq.n	800284e <HAL_GPIO_Init+0x202>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a48      	ldr	r2, [pc, #288]	; (8002940 <HAL_GPIO_Init+0x2f4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_Init+0x1fe>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a47      	ldr	r2, [pc, #284]	; (8002944 <HAL_GPIO_Init+0x2f8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_GPIO_Init+0x1fa>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a46      	ldr	r2, [pc, #280]	; (8002948 <HAL_GPIO_Init+0x2fc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_Init+0x1f6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a45      	ldr	r2, [pc, #276]	; (800294c <HAL_GPIO_Init+0x300>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_GPIO_Init+0x1f2>
 800283a:	2304      	movs	r3, #4
 800283c:	e008      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800283e:	2307      	movs	r3, #7
 8002840:	e006      	b.n	8002850 <HAL_GPIO_Init+0x204>
 8002842:	2303      	movs	r3, #3
 8002844:	e004      	b.n	8002850 <HAL_GPIO_Init+0x204>
 8002846:	2302      	movs	r3, #2
 8002848:	e002      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_GPIO_Init+0x204>
 800284e:	2300      	movs	r3, #0
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	f002 0203 	and.w	r2, r2, #3
 8002856:	0092      	lsls	r2, r2, #2
 8002858:	4093      	lsls	r3, r2
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002860:	4935      	ldr	r1, [pc, #212]	; (8002938 <HAL_GPIO_Init+0x2ec>)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002892:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_GPIO_Init+0x304>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028bc:	4a24      	ldr	r2, [pc, #144]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028e6:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_GPIO_Init+0x304>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002910:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_GPIO_Init+0x304>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b0f      	cmp	r3, #15
 8002920:	f67f aea2 	bls.w	8002668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	40013800 	.word	0x40013800
 800293c:	40020000 	.word	0x40020000
 8002940:	40020400 	.word	0x40020400
 8002944:	40020800 	.word	0x40020800
 8002948:	40020c00 	.word	0x40020c00
 800294c:	40021000 	.word	0x40021000
 8002950:	40013c00 	.word	0x40013c00

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e267      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d075      	beq.n	8002a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a6:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d00c      	beq.n	80029cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4b85      	ldr	r3, [pc, #532]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d112      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029be:	4b82      	ldr	r3, [pc, #520]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	4b7e      	ldr	r3, [pc, #504]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05b      	beq.n	8002a90 <HAL_RCC_OscConfig+0x108>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d157      	bne.n	8002a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e242      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d106      	bne.n	80029fc <HAL_RCC_OscConfig+0x74>
 80029ee:	4b76      	ldr	r3, [pc, #472]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a75      	ldr	r2, [pc, #468]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e01d      	b.n	8002a38 <HAL_RCC_OscConfig+0xb0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x98>
 8002a06:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6f      	ldr	r2, [pc, #444]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a6c      	ldr	r2, [pc, #432]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0xb0>
 8002a20:	4b69      	ldr	r3, [pc, #420]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a68      	ldr	r2, [pc, #416]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b66      	ldr	r3, [pc, #408]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7ff fcc2 	bl	80023c8 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a48:	f7ff fcbe 	bl	80023c8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e207      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0xc0>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7ff fcae 	bl	80023c8 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a70:	f7ff fcaa 	bl	80023c8 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1f3      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a82:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0xe8>
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d063      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d11c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d116      	bne.n	8002af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x152>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d001      	beq.n	8002ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e1c7      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4937      	ldr	r1, [pc, #220]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	e03a      	b.n	8002b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af8:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <HAL_RCC_OscConfig+0x244>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7ff fc63 	bl	80023c8 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b06:	f7ff fc5f 	bl	80023c8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e1a8      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4925      	ldr	r1, [pc, #148]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
 8002b38:	e015      	b.n	8002b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_RCC_OscConfig+0x244>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7ff fc42 	bl	80023c8 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b48:	f7ff fc3e 	bl	80023c8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e187      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d036      	beq.n	8002be0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_RCC_OscConfig+0x248>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7ff fc22 	bl	80023c8 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b88:	f7ff fc1e 	bl	80023c8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e167      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x200>
 8002ba6:	e01b      	b.n	8002be0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_RCC_OscConfig+0x248>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7ff fc0b 	bl	80023c8 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	e00e      	b.n	8002bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7ff fc07 	bl	80023c8 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d907      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e150      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	42470000 	.word	0x42470000
 8002bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	4b88      	ldr	r3, [pc, #544]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ea      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8097 	beq.w	8002d1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b81      	ldr	r3, [pc, #516]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b7d      	ldr	r3, [pc, #500]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a7c      	ldr	r2, [pc, #496]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b7a      	ldr	r3, [pc, #488]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <HAL_RCC_OscConfig+0x474>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b74      	ldr	r3, [pc, #464]	; (8002dfc <HAL_RCC_OscConfig+0x474>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a73      	ldr	r2, [pc, #460]	; (8002dfc <HAL_RCC_OscConfig+0x474>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7ff fbc7 	bl	80023c8 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7ff fbc3 	bl	80023c8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e10c      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_OscConfig+0x474>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x2ea>
 8002c64:	4b64      	ldr	r3, [pc, #400]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a63      	ldr	r2, [pc, #396]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	e01c      	b.n	8002cac <HAL_RCC_OscConfig+0x324>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x30c>
 8002c7a:	4b5f      	ldr	r3, [pc, #380]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a5e      	ldr	r2, [pc, #376]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	4b5c      	ldr	r3, [pc, #368]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a5b      	ldr	r2, [pc, #364]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0x324>
 8002c94:	4b58      	ldr	r3, [pc, #352]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a57      	ldr	r2, [pc, #348]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca0:	4b55      	ldr	r3, [pc, #340]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a54      	ldr	r2, [pc, #336]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002ca6:	f023 0304 	bic.w	r3, r3, #4
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d015      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7ff fb88 	bl	80023c8 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7ff fb84 	bl	80023c8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e0cb      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd2:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ee      	beq.n	8002cbc <HAL_RCC_OscConfig+0x334>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7ff fb72 	bl	80023c8 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7ff fb6e 	bl	80023c8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e0b5      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfe:	4b3e      	ldr	r3, [pc, #248]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ee      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d10:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a1 	beq.w	8002e68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d26:	4b34      	ldr	r3, [pc, #208]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d05c      	beq.n	8002dec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d141      	bne.n	8002dbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7ff fb42 	bl	80023c8 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d48:	f7ff fb3e 	bl	80023c8 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e087      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5a:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	491b      	ldr	r1, [pc, #108]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7ff fb17 	bl	80023c8 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7ff fb13 	bl	80023c8 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e05c      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x416>
 8002dbc:	e054      	b.n	8002e68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_RCC_OscConfig+0x478>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7ff fb00 	bl	80023c8 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7ff fafc 	bl	80023c8 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e045      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCC_OscConfig+0x470>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x444>
 8002dea:	e03d      	b.n	8002e68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e038      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x4ec>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d028      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d121      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d11a      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e34:	4013      	ands	r3, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d111      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0cc      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b68      	ldr	r3, [pc, #416]	; (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d90c      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b65      	ldr	r3, [pc, #404]	; (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b63      	ldr	r3, [pc, #396]	; (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0b8      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ecc:	4b59      	ldr	r3, [pc, #356]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a58      	ldr	r2, [pc, #352]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee4:	4b53      	ldr	r3, [pc, #332]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a52      	ldr	r2, [pc, #328]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b50      	ldr	r3, [pc, #320]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	494d      	ldr	r1, [pc, #308]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d044      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d119      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e07f      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d003      	beq.n	8002f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f36:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e06f      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f46:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e067      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f56:	4b37      	ldr	r3, [pc, #220]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4934      	ldr	r1, [pc, #208]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f68:	f7ff fa2e 	bl	80023c8 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f70:	f7ff fa2a 	bl	80023c8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e04f      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 020c 	and.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d1eb      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d20c      	bcs.n	8002fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b22      	ldr	r3, [pc, #136]	; (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e032      	b.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4916      	ldr	r1, [pc, #88]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	490e      	ldr	r1, [pc, #56]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffe:	f000 f821 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8003002:	4602      	mov	r2, r0
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	490a      	ldr	r1, [pc, #40]	; (8003038 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	5ccb      	ldrb	r3, [r1, r3]
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f98e 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00
 8003034:	40023800 	.word	0x40023800
 8003038:	08007ac8 	.word	0x08007ac8
 800303c:	20000008 	.word	0x20000008
 8003040:	2000000c 	.word	0x2000000c

08003044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003048:	b094      	sub	sp, #80	; 0x50
 800304a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	647b      	str	r3, [r7, #68]	; 0x44
 8003050:	2300      	movs	r3, #0
 8003052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003054:	2300      	movs	r3, #0
 8003056:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305c:	4b79      	ldr	r3, [pc, #484]	; (8003244 <HAL_RCC_GetSysClockFreq+0x200>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d00d      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x40>
 8003068:	2b08      	cmp	r3, #8
 800306a:	f200 80e1 	bhi.w	8003230 <HAL_RCC_GetSysClockFreq+0x1ec>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x34>
 8003072:	2b04      	cmp	r3, #4
 8003074:	d003      	beq.n	800307e <HAL_RCC_GetSysClockFreq+0x3a>
 8003076:	e0db      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003078:	4b73      	ldr	r3, [pc, #460]	; (8003248 <HAL_RCC_GetSysClockFreq+0x204>)
 800307a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800307c:	e0db      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800307e:	4b73      	ldr	r3, [pc, #460]	; (800324c <HAL_RCC_GetSysClockFreq+0x208>)
 8003080:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003082:	e0d8      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCC_GetSysClockFreq+0x200>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800308c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800308e:	4b6d      	ldr	r3, [pc, #436]	; (8003244 <HAL_RCC_GetSysClockFreq+0x200>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d063      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309a:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_GetSysClockFreq+0x200>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	099b      	lsrs	r3, r3, #6
 80030a0:	2200      	movs	r2, #0
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
 80030ae:	2300      	movs	r3, #0
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
 80030b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030b6:	4622      	mov	r2, r4
 80030b8:	462b      	mov	r3, r5
 80030ba:	f04f 0000 	mov.w	r0, #0
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	0159      	lsls	r1, r3, #5
 80030c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c8:	0150      	lsls	r0, r2, #5
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4621      	mov	r1, r4
 80030d0:	1a51      	subs	r1, r2, r1
 80030d2:	6139      	str	r1, [r7, #16]
 80030d4:	4629      	mov	r1, r5
 80030d6:	eb63 0301 	sbc.w	r3, r3, r1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030e8:	4659      	mov	r1, fp
 80030ea:	018b      	lsls	r3, r1, #6
 80030ec:	4651      	mov	r1, sl
 80030ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030f2:	4651      	mov	r1, sl
 80030f4:	018a      	lsls	r2, r1, #6
 80030f6:	4651      	mov	r1, sl
 80030f8:	ebb2 0801 	subs.w	r8, r2, r1
 80030fc:	4659      	mov	r1, fp
 80030fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800310e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003116:	4690      	mov	r8, r2
 8003118:	4699      	mov	r9, r3
 800311a:	4623      	mov	r3, r4
 800311c:	eb18 0303 	adds.w	r3, r8, r3
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	462b      	mov	r3, r5
 8003124:	eb49 0303 	adc.w	r3, r9, r3
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003136:	4629      	mov	r1, r5
 8003138:	024b      	lsls	r3, r1, #9
 800313a:	4621      	mov	r1, r4
 800313c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003140:	4621      	mov	r1, r4
 8003142:	024a      	lsls	r2, r1, #9
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800314a:	2200      	movs	r2, #0
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
 800314e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003154:	f7fd fde0 	bl	8000d18 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4613      	mov	r3, r2
 800315e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003160:	e058      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <HAL_RCC_GetSysClockFreq+0x200>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2200      	movs	r2, #0
 800316a:	4618      	mov	r0, r3
 800316c:	4611      	mov	r1, r2
 800316e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	f04f 0000 	mov.w	r0, #0
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	0159      	lsls	r1, r3, #5
 800318a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800318e:	0150      	lsls	r0, r2, #5
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4641      	mov	r1, r8
 8003196:	ebb2 0a01 	subs.w	sl, r2, r1
 800319a:	4649      	mov	r1, r9
 800319c:	eb63 0b01 	sbc.w	fp, r3, r1
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031b4:	ebb2 040a 	subs.w	r4, r2, sl
 80031b8:	eb63 050b 	sbc.w	r5, r3, fp
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	00eb      	lsls	r3, r5, #3
 80031c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ca:	00e2      	lsls	r2, r4, #3
 80031cc:	4614      	mov	r4, r2
 80031ce:	461d      	mov	r5, r3
 80031d0:	4643      	mov	r3, r8
 80031d2:	18e3      	adds	r3, r4, r3
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	464b      	mov	r3, r9
 80031d8:	eb45 0303 	adc.w	r3, r5, r3
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ea:	4629      	mov	r1, r5
 80031ec:	028b      	lsls	r3, r1, #10
 80031ee:	4621      	mov	r1, r4
 80031f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f4:	4621      	mov	r1, r4
 80031f6:	028a      	lsls	r2, r1, #10
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fe:	2200      	movs	r2, #0
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	61fa      	str	r2, [r7, #28]
 8003204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003208:	f7fd fd86 	bl	8000d18 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4613      	mov	r3, r2
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_GetSysClockFreq+0x200>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	3301      	adds	r3, #1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800322e:	e002      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetSysClockFreq+0x204>)
 8003232:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003238:	4618      	mov	r0, r3
 800323a:	3750      	adds	r7, #80	; 0x50
 800323c:	46bd      	mov	sp, r7
 800323e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	00f42400 	.word	0x00f42400
 800324c:	007a1200 	.word	0x007a1200

08003250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_RCC_GetHCLKFreq+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000008 	.word	0x20000008

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800326c:	f7ff fff0 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	; (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	08007ad8 	.word	0x08007ad8

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003294:	f7ff ffdc 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0b5b      	lsrs	r3, r3, #13
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	08007ad8 	.word	0x08007ad8

080032b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e03f      	b.n	800334a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe fe8c 	bl	8001ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f829 	bl	8003354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b0c0      	sub	sp, #256	; 0x100
 800335a:	af00      	add	r7, sp, #0
 800335c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	68d9      	ldr	r1, [r3, #12]
 8003372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	ea40 0301 	orr.w	r3, r0, r1
 800337c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	431a      	orrs	r2, r3
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	431a      	orrs	r2, r3
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033ac:	f021 010c 	bic.w	r1, r1, #12
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033ba:	430b      	orrs	r3, r1
 80033bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ce:	6999      	ldr	r1, [r3, #24]
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	ea40 0301 	orr.w	r3, r0, r1
 80033da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b8f      	ldr	r3, [pc, #572]	; (8003620 <UART_SetConfig+0x2cc>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d005      	beq.n	80033f4 <UART_SetConfig+0xa0>
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b8d      	ldr	r3, [pc, #564]	; (8003624 <UART_SetConfig+0x2d0>)
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d104      	bne.n	80033fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033f4:	f7ff ff4c 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 80033f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033fc:	e003      	b.n	8003406 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033fe:	f7ff ff33 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8003402:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003410:	f040 810c 	bne.w	800362c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003418:	2200      	movs	r2, #0
 800341a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800341e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003422:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003426:	4622      	mov	r2, r4
 8003428:	462b      	mov	r3, r5
 800342a:	1891      	adds	r1, r2, r2
 800342c:	65b9      	str	r1, [r7, #88]	; 0x58
 800342e:	415b      	adcs	r3, r3
 8003430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003432:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003436:	4621      	mov	r1, r4
 8003438:	eb12 0801 	adds.w	r8, r2, r1
 800343c:	4629      	mov	r1, r5
 800343e:	eb43 0901 	adc.w	r9, r3, r1
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800344e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003456:	4690      	mov	r8, r2
 8003458:	4699      	mov	r9, r3
 800345a:	4623      	mov	r3, r4
 800345c:	eb18 0303 	adds.w	r3, r8, r3
 8003460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003464:	462b      	mov	r3, r5
 8003466:	eb49 0303 	adc.w	r3, r9, r3
 800346a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800347a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800347e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003482:	460b      	mov	r3, r1
 8003484:	18db      	adds	r3, r3, r3
 8003486:	653b      	str	r3, [r7, #80]	; 0x50
 8003488:	4613      	mov	r3, r2
 800348a:	eb42 0303 	adc.w	r3, r2, r3
 800348e:	657b      	str	r3, [r7, #84]	; 0x54
 8003490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003494:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003498:	f7fd fc3e 	bl	8000d18 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4b61      	ldr	r3, [pc, #388]	; (8003628 <UART_SetConfig+0x2d4>)
 80034a2:	fba3 2302 	umull	r2, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	011c      	lsls	r4, r3, #4
 80034aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	1891      	adds	r1, r2, r2
 80034c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80034c4:	415b      	adcs	r3, r3
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034cc:	4641      	mov	r1, r8
 80034ce:	eb12 0a01 	adds.w	sl, r2, r1
 80034d2:	4649      	mov	r1, r9
 80034d4:	eb43 0b01 	adc.w	fp, r3, r1
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ec:	4692      	mov	sl, r2
 80034ee:	469b      	mov	fp, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	eb1a 0303 	adds.w	r3, sl, r3
 80034f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034fa:	464b      	mov	r3, r9
 80034fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003510:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003514:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003518:	460b      	mov	r3, r1
 800351a:	18db      	adds	r3, r3, r3
 800351c:	643b      	str	r3, [r7, #64]	; 0x40
 800351e:	4613      	mov	r3, r2
 8003520:	eb42 0303 	adc.w	r3, r2, r3
 8003524:	647b      	str	r3, [r7, #68]	; 0x44
 8003526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800352a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800352e:	f7fd fbf3 	bl	8000d18 <__aeabi_uldivmod>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4611      	mov	r1, r2
 8003538:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <UART_SetConfig+0x2d4>)
 800353a:	fba3 2301 	umull	r2, r3, r3, r1
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2264      	movs	r2, #100	; 0x64
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	1acb      	subs	r3, r1, r3
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800354e:	4b36      	ldr	r3, [pc, #216]	; (8003628 <UART_SetConfig+0x2d4>)
 8003550:	fba3 2302 	umull	r2, r3, r3, r2
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800355c:	441c      	add	r4, r3
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003568:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800356c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	1891      	adds	r1, r2, r2
 8003576:	63b9      	str	r1, [r7, #56]	; 0x38
 8003578:	415b      	adcs	r3, r3
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003580:	4641      	mov	r1, r8
 8003582:	1851      	adds	r1, r2, r1
 8003584:	6339      	str	r1, [r7, #48]	; 0x30
 8003586:	4649      	mov	r1, r9
 8003588:	414b      	adcs	r3, r1
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003598:	4659      	mov	r1, fp
 800359a:	00cb      	lsls	r3, r1, #3
 800359c:	4651      	mov	r1, sl
 800359e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a2:	4651      	mov	r1, sl
 80035a4:	00ca      	lsls	r2, r1, #3
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	4642      	mov	r2, r8
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035b4:	464b      	mov	r3, r9
 80035b6:	460a      	mov	r2, r1
 80035b8:	eb42 0303 	adc.w	r3, r2, r3
 80035bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035d4:	460b      	mov	r3, r1
 80035d6:	18db      	adds	r3, r3, r3
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035da:	4613      	mov	r3, r2
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ea:	f7fd fb95 	bl	8000d18 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <UART_SetConfig+0x2d4>)
 80035f4:	fba3 1302 	umull	r1, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	2164      	movs	r1, #100	; 0x64
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	3332      	adds	r3, #50	; 0x32
 8003606:	4a08      	ldr	r2, [pc, #32]	; (8003628 <UART_SetConfig+0x2d4>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f003 0207 	and.w	r2, r3, #7
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4422      	add	r2, r4
 800361a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800361c:	e105      	b.n	800382a <UART_SetConfig+0x4d6>
 800361e:	bf00      	nop
 8003620:	40011000 	.word	0x40011000
 8003624:	40011400 	.word	0x40011400
 8003628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800362c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003630:	2200      	movs	r2, #0
 8003632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003636:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800363a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800363e:	4642      	mov	r2, r8
 8003640:	464b      	mov	r3, r9
 8003642:	1891      	adds	r1, r2, r2
 8003644:	6239      	str	r1, [r7, #32]
 8003646:	415b      	adcs	r3, r3
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800364e:	4641      	mov	r1, r8
 8003650:	1854      	adds	r4, r2, r1
 8003652:	4649      	mov	r1, r9
 8003654:	eb43 0501 	adc.w	r5, r3, r1
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	00eb      	lsls	r3, r5, #3
 8003662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003666:	00e2      	lsls	r2, r4, #3
 8003668:	4614      	mov	r4, r2
 800366a:	461d      	mov	r5, r3
 800366c:	4643      	mov	r3, r8
 800366e:	18e3      	adds	r3, r4, r3
 8003670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003674:	464b      	mov	r3, r9
 8003676:	eb45 0303 	adc.w	r3, r5, r3
 800367a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800368a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800369a:	4629      	mov	r1, r5
 800369c:	008b      	lsls	r3, r1, #2
 800369e:	4621      	mov	r1, r4
 80036a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a4:	4621      	mov	r1, r4
 80036a6:	008a      	lsls	r2, r1, #2
 80036a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036ac:	f7fd fb34 	bl	8000d18 <__aeabi_uldivmod>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4b60      	ldr	r3, [pc, #384]	; (8003838 <UART_SetConfig+0x4e4>)
 80036b6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	011c      	lsls	r4, r3, #4
 80036be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036d0:	4642      	mov	r2, r8
 80036d2:	464b      	mov	r3, r9
 80036d4:	1891      	adds	r1, r2, r2
 80036d6:	61b9      	str	r1, [r7, #24]
 80036d8:	415b      	adcs	r3, r3
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e0:	4641      	mov	r1, r8
 80036e2:	1851      	adds	r1, r2, r1
 80036e4:	6139      	str	r1, [r7, #16]
 80036e6:	4649      	mov	r1, r9
 80036e8:	414b      	adcs	r3, r1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f8:	4659      	mov	r1, fp
 80036fa:	00cb      	lsls	r3, r1, #3
 80036fc:	4651      	mov	r1, sl
 80036fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003702:	4651      	mov	r1, sl
 8003704:	00ca      	lsls	r2, r1, #3
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	4603      	mov	r3, r0
 800370c:	4642      	mov	r2, r8
 800370e:	189b      	adds	r3, r3, r2
 8003710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003714:	464b      	mov	r3, r9
 8003716:	460a      	mov	r2, r1
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	67bb      	str	r3, [r7, #120]	; 0x78
 800372a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003738:	4649      	mov	r1, r9
 800373a:	008b      	lsls	r3, r1, #2
 800373c:	4641      	mov	r1, r8
 800373e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003742:	4641      	mov	r1, r8
 8003744:	008a      	lsls	r2, r1, #2
 8003746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800374a:	f7fd fae5 	bl	8000d18 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4b39      	ldr	r3, [pc, #228]	; (8003838 <UART_SetConfig+0x4e4>)
 8003754:	fba3 1302 	umull	r1, r3, r3, r2
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	2164      	movs	r1, #100	; 0x64
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	3332      	adds	r3, #50	; 0x32
 8003766:	4a34      	ldr	r2, [pc, #208]	; (8003838 <UART_SetConfig+0x4e4>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003772:	441c      	add	r4, r3
 8003774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003778:	2200      	movs	r2, #0
 800377a:	673b      	str	r3, [r7, #112]	; 0x70
 800377c:	677a      	str	r2, [r7, #116]	; 0x74
 800377e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003782:	4642      	mov	r2, r8
 8003784:	464b      	mov	r3, r9
 8003786:	1891      	adds	r1, r2, r2
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	415b      	adcs	r3, r3
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003792:	4641      	mov	r1, r8
 8003794:	1851      	adds	r1, r2, r1
 8003796:	6039      	str	r1, [r7, #0]
 8003798:	4649      	mov	r1, r9
 800379a:	414b      	adcs	r3, r1
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037aa:	4659      	mov	r1, fp
 80037ac:	00cb      	lsls	r3, r1, #3
 80037ae:	4651      	mov	r1, sl
 80037b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b4:	4651      	mov	r1, sl
 80037b6:	00ca      	lsls	r2, r1, #3
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	4603      	mov	r3, r0
 80037be:	4642      	mov	r2, r8
 80037c0:	189b      	adds	r3, r3, r2
 80037c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037c4:	464b      	mov	r3, r9
 80037c6:	460a      	mov	r2, r1
 80037c8:	eb42 0303 	adc.w	r3, r2, r3
 80037cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	663b      	str	r3, [r7, #96]	; 0x60
 80037d8:	667a      	str	r2, [r7, #100]	; 0x64
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037e6:	4649      	mov	r1, r9
 80037e8:	008b      	lsls	r3, r1, #2
 80037ea:	4641      	mov	r1, r8
 80037ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f0:	4641      	mov	r1, r8
 80037f2:	008a      	lsls	r2, r1, #2
 80037f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037f8:	f7fd fa8e 	bl	8000d18 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <UART_SetConfig+0x4e4>)
 8003802:	fba3 1302 	umull	r1, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2164      	movs	r1, #100	; 0x64
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	3332      	adds	r3, #50	; 0x32
 8003814:	4a08      	ldr	r2, [pc, #32]	; (8003838 <UART_SetConfig+0x4e4>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 020f 	and.w	r2, r3, #15
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4422      	add	r2, r4
 8003828:	609a      	str	r2, [r3, #8]
}
 800382a:	bf00      	nop
 800382c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003830:	46bd      	mov	sp, r7
 8003832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003836:	bf00      	nop
 8003838:	51eb851f 	.word	0x51eb851f

0800383c <__errno>:
 800383c:	4b01      	ldr	r3, [pc, #4]	; (8003844 <__errno+0x8>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000014 	.word	0x20000014

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4d0d      	ldr	r5, [pc, #52]	; (8003880 <__libc_init_array+0x38>)
 800384c:	4c0d      	ldr	r4, [pc, #52]	; (8003884 <__libc_init_array+0x3c>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	2600      	movs	r6, #0
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	4d0b      	ldr	r5, [pc, #44]	; (8003888 <__libc_init_array+0x40>)
 800385a:	4c0c      	ldr	r4, [pc, #48]	; (800388c <__libc_init_array+0x44>)
 800385c:	f004 f884 	bl	8007968 <_init>
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	2600      	movs	r6, #0
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	f855 3b04 	ldr.w	r3, [r5], #4
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	08007fd8 	.word	0x08007fd8
 8003884:	08007fd8 	.word	0x08007fd8
 8003888:	08007fd8 	.word	0x08007fd8
 800388c:	08007fdc 	.word	0x08007fdc

08003890 <localtime>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <localtime+0x30>)
 8003894:	681d      	ldr	r5, [r3, #0]
 8003896:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003898:	4604      	mov	r4, r0
 800389a:	b953      	cbnz	r3, 80038b2 <localtime+0x22>
 800389c:	2024      	movs	r0, #36	; 0x24
 800389e:	f000 f909 	bl	8003ab4 <malloc>
 80038a2:	4602      	mov	r2, r0
 80038a4:	63e8      	str	r0, [r5, #60]	; 0x3c
 80038a6:	b920      	cbnz	r0, 80038b2 <localtime+0x22>
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <localtime+0x34>)
 80038aa:	4807      	ldr	r0, [pc, #28]	; (80038c8 <localtime+0x38>)
 80038ac:	2132      	movs	r1, #50	; 0x32
 80038ae:	f001 f8f9 	bl	8004aa4 <__assert_func>
 80038b2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80038b4:	4620      	mov	r0, r4
 80038b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ba:	f000 b807 	b.w	80038cc <localtime_r>
 80038be:	bf00      	nop
 80038c0:	20000014 	.word	0x20000014
 80038c4:	08007ae4 	.word	0x08007ae4
 80038c8:	08007afb 	.word	0x08007afb

080038cc <localtime_r>:
 80038cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80038d0:	4680      	mov	r8, r0
 80038d2:	9101      	str	r1, [sp, #4]
 80038d4:	f001 ffe6 	bl	80058a4 <__gettzinfo>
 80038d8:	9901      	ldr	r1, [sp, #4]
 80038da:	4605      	mov	r5, r0
 80038dc:	4640      	mov	r0, r8
 80038de:	f001 ffe5 	bl	80058ac <gmtime_r>
 80038e2:	6943      	ldr	r3, [r0, #20]
 80038e4:	0799      	lsls	r1, r3, #30
 80038e6:	4604      	mov	r4, r0
 80038e8:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80038ec:	d105      	bne.n	80038fa <localtime_r+0x2e>
 80038ee:	2264      	movs	r2, #100	; 0x64
 80038f0:	fb97 f3f2 	sdiv	r3, r7, r2
 80038f4:	fb02 7313 	mls	r3, r2, r3, r7
 80038f8:	bb73      	cbnz	r3, 8003958 <localtime_r+0x8c>
 80038fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80038fe:	fb97 f6f3 	sdiv	r6, r7, r3
 8003902:	fb03 7616 	mls	r6, r3, r6, r7
 8003906:	fab6 f386 	clz	r3, r6
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	4e67      	ldr	r6, [pc, #412]	; (8003aac <localtime_r+0x1e0>)
 800390e:	2230      	movs	r2, #48	; 0x30
 8003910:	fb02 6603 	mla	r6, r2, r3, r6
 8003914:	f000 ff34 	bl	8004780 <__tz_lock>
 8003918:	f000 ff3e 	bl	8004798 <_tzset_unlocked>
 800391c:	4b64      	ldr	r3, [pc, #400]	; (8003ab0 <localtime_r+0x1e4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	b34b      	cbz	r3, 8003976 <localtime_r+0xaa>
 8003922:	686b      	ldr	r3, [r5, #4]
 8003924:	42bb      	cmp	r3, r7
 8003926:	d119      	bne.n	800395c <localtime_r+0x90>
 8003928:	682f      	ldr	r7, [r5, #0]
 800392a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800392e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8003932:	b9df      	cbnz	r7, 800396c <localtime_r+0xa0>
 8003934:	4282      	cmp	r2, r0
 8003936:	eb73 0101 	sbcs.w	r1, r3, r1
 800393a:	da23      	bge.n	8003984 <localtime_r+0xb8>
 800393c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8003940:	4282      	cmp	r2, r0
 8003942:	eb73 0701 	sbcs.w	r7, r3, r1
 8003946:	bfb4      	ite	lt
 8003948:	2701      	movlt	r7, #1
 800394a:	2700      	movge	r7, #0
 800394c:	4282      	cmp	r2, r0
 800394e:	418b      	sbcs	r3, r1
 8003950:	6227      	str	r7, [r4, #32]
 8003952:	db19      	blt.n	8003988 <localtime_r+0xbc>
 8003954:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003956:	e018      	b.n	800398a <localtime_r+0xbe>
 8003958:	2301      	movs	r3, #1
 800395a:	e7d7      	b.n	800390c <localtime_r+0x40>
 800395c:	4638      	mov	r0, r7
 800395e:	f000 fe65 	bl	800462c <__tzcalc_limits>
 8003962:	2800      	cmp	r0, #0
 8003964:	d1e0      	bne.n	8003928 <localtime_r+0x5c>
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	e004      	b.n	8003976 <localtime_r+0xaa>
 800396c:	4282      	cmp	r2, r0
 800396e:	eb73 0101 	sbcs.w	r1, r3, r1
 8003972:	da02      	bge.n	800397a <localtime_r+0xae>
 8003974:	2300      	movs	r3, #0
 8003976:	6223      	str	r3, [r4, #32]
 8003978:	e7ec      	b.n	8003954 <localtime_r+0x88>
 800397a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800397e:	4282      	cmp	r2, r0
 8003980:	418b      	sbcs	r3, r1
 8003982:	daf7      	bge.n	8003974 <localtime_r+0xa8>
 8003984:	2301      	movs	r3, #1
 8003986:	6223      	str	r3, [r4, #32]
 8003988:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800398a:	6861      	ldr	r1, [r4, #4]
 800398c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003990:	203c      	movs	r0, #60	; 0x3c
 8003992:	fb93 f5f2 	sdiv	r5, r3, r2
 8003996:	fb02 3315 	mls	r3, r2, r5, r3
 800399a:	fb93 f2f0 	sdiv	r2, r3, r0
 800399e:	fb00 3012 	mls	r0, r0, r2, r3
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	1a89      	subs	r1, r1, r2
 80039a6:	68a2      	ldr	r2, [r4, #8]
 80039a8:	6061      	str	r1, [r4, #4]
 80039aa:	1a1b      	subs	r3, r3, r0
 80039ac:	1b52      	subs	r2, r2, r5
 80039ae:	2b3b      	cmp	r3, #59	; 0x3b
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	60a2      	str	r2, [r4, #8]
 80039b4:	dd35      	ble.n	8003a22 <localtime_r+0x156>
 80039b6:	3101      	adds	r1, #1
 80039b8:	6061      	str	r1, [r4, #4]
 80039ba:	3b3c      	subs	r3, #60	; 0x3c
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	6863      	ldr	r3, [r4, #4]
 80039c0:	2b3b      	cmp	r3, #59	; 0x3b
 80039c2:	dd34      	ble.n	8003a2e <localtime_r+0x162>
 80039c4:	3201      	adds	r2, #1
 80039c6:	60a2      	str	r2, [r4, #8]
 80039c8:	3b3c      	subs	r3, #60	; 0x3c
 80039ca:	6063      	str	r3, [r4, #4]
 80039cc:	68a3      	ldr	r3, [r4, #8]
 80039ce:	2b17      	cmp	r3, #23
 80039d0:	dd33      	ble.n	8003a3a <localtime_r+0x16e>
 80039d2:	69e2      	ldr	r2, [r4, #28]
 80039d4:	3201      	adds	r2, #1
 80039d6:	61e2      	str	r2, [r4, #28]
 80039d8:	69a2      	ldr	r2, [r4, #24]
 80039da:	3201      	adds	r2, #1
 80039dc:	2a06      	cmp	r2, #6
 80039de:	bfc8      	it	gt
 80039e0:	2200      	movgt	r2, #0
 80039e2:	61a2      	str	r2, [r4, #24]
 80039e4:	68e2      	ldr	r2, [r4, #12]
 80039e6:	3b18      	subs	r3, #24
 80039e8:	3201      	adds	r2, #1
 80039ea:	60a3      	str	r3, [r4, #8]
 80039ec:	6923      	ldr	r3, [r4, #16]
 80039ee:	60e2      	str	r2, [r4, #12]
 80039f0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80039f4:	428a      	cmp	r2, r1
 80039f6:	dd0e      	ble.n	8003a16 <localtime_r+0x14a>
 80039f8:	2b0b      	cmp	r3, #11
 80039fa:	eba2 0201 	sub.w	r2, r2, r1
 80039fe:	60e2      	str	r2, [r4, #12]
 8003a00:	f103 0201 	add.w	r2, r3, #1
 8003a04:	bf09      	itett	eq
 8003a06:	6963      	ldreq	r3, [r4, #20]
 8003a08:	6122      	strne	r2, [r4, #16]
 8003a0a:	2200      	moveq	r2, #0
 8003a0c:	3301      	addeq	r3, #1
 8003a0e:	bf02      	ittt	eq
 8003a10:	6122      	streq	r2, [r4, #16]
 8003a12:	6163      	streq	r3, [r4, #20]
 8003a14:	61e2      	streq	r2, [r4, #28]
 8003a16:	f000 feb9 	bl	800478c <__tz_unlock>
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	b002      	add	sp, #8
 8003a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	dacb      	bge.n	80039be <localtime_r+0xf2>
 8003a26:	3901      	subs	r1, #1
 8003a28:	6061      	str	r1, [r4, #4]
 8003a2a:	333c      	adds	r3, #60	; 0x3c
 8003a2c:	e7c6      	b.n	80039bc <localtime_r+0xf0>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	dacc      	bge.n	80039cc <localtime_r+0x100>
 8003a32:	3a01      	subs	r2, #1
 8003a34:	60a2      	str	r2, [r4, #8]
 8003a36:	333c      	adds	r3, #60	; 0x3c
 8003a38:	e7c7      	b.n	80039ca <localtime_r+0xfe>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	daeb      	bge.n	8003a16 <localtime_r+0x14a>
 8003a3e:	69e2      	ldr	r2, [r4, #28]
 8003a40:	3a01      	subs	r2, #1
 8003a42:	61e2      	str	r2, [r4, #28]
 8003a44:	69a2      	ldr	r2, [r4, #24]
 8003a46:	3a01      	subs	r2, #1
 8003a48:	bf48      	it	mi
 8003a4a:	2206      	movmi	r2, #6
 8003a4c:	61a2      	str	r2, [r4, #24]
 8003a4e:	68e2      	ldr	r2, [r4, #12]
 8003a50:	3318      	adds	r3, #24
 8003a52:	3a01      	subs	r2, #1
 8003a54:	60e2      	str	r2, [r4, #12]
 8003a56:	60a3      	str	r3, [r4, #8]
 8003a58:	2a00      	cmp	r2, #0
 8003a5a:	d1dc      	bne.n	8003a16 <localtime_r+0x14a>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	d405      	bmi.n	8003a6e <localtime_r+0x1a2>
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	6923      	ldr	r3, [r4, #16]
 8003a66:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003a6a:	60e3      	str	r3, [r4, #12]
 8003a6c:	e7d3      	b.n	8003a16 <localtime_r+0x14a>
 8003a6e:	230b      	movs	r3, #11
 8003a70:	6123      	str	r3, [r4, #16]
 8003a72:	6963      	ldr	r3, [r4, #20]
 8003a74:	1e5a      	subs	r2, r3, #1
 8003a76:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8003a7a:	6162      	str	r2, [r4, #20]
 8003a7c:	079a      	lsls	r2, r3, #30
 8003a7e:	d105      	bne.n	8003a8c <localtime_r+0x1c0>
 8003a80:	2164      	movs	r1, #100	; 0x64
 8003a82:	fb93 f2f1 	sdiv	r2, r3, r1
 8003a86:	fb01 3212 	mls	r2, r1, r2, r3
 8003a8a:	b962      	cbnz	r2, 8003aa6 <localtime_r+0x1da>
 8003a8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003a90:	fb93 f1f2 	sdiv	r1, r3, r2
 8003a94:	fb02 3311 	mls	r3, r2, r1, r3
 8003a98:	fab3 f383 	clz	r3, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003aa2:	61e3      	str	r3, [r4, #28]
 8003aa4:	e7de      	b.n	8003a64 <localtime_r+0x198>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e7f9      	b.n	8003a9e <localtime_r+0x1d2>
 8003aaa:	bf00      	nop
 8003aac:	08007b58 	.word	0x08007b58
 8003ab0:	200003a8 	.word	0x200003a8

08003ab4 <malloc>:
 8003ab4:	4b02      	ldr	r3, [pc, #8]	; (8003ac0 <malloc+0xc>)
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	f000 b87f 	b.w	8003bbc <_malloc_r>
 8003abe:	bf00      	nop
 8003ac0:	20000014 	.word	0x20000014

08003ac4 <free>:
 8003ac4:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <free+0xc>)
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	f000 b80b 	b.w	8003ae4 <_free_r>
 8003ace:	bf00      	nop
 8003ad0:	20000014 	.word	0x20000014

08003ad4 <memset>:
 8003ad4:	4402      	add	r2, r0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d100      	bne.n	8003ade <memset+0xa>
 8003adc:	4770      	bx	lr
 8003ade:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae2:	e7f9      	b.n	8003ad8 <memset+0x4>

08003ae4 <_free_r>:
 8003ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	d044      	beq.n	8003b74 <_free_r+0x90>
 8003aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aee:	9001      	str	r0, [sp, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f1a1 0404 	sub.w	r4, r1, #4
 8003af6:	bfb8      	it	lt
 8003af8:	18e4      	addlt	r4, r4, r3
 8003afa:	f001 ff9b 	bl	8005a34 <__malloc_lock>
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <_free_r+0x94>)
 8003b00:	9801      	ldr	r0, [sp, #4]
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	b933      	cbnz	r3, 8003b14 <_free_r+0x30>
 8003b06:	6063      	str	r3, [r4, #4]
 8003b08:	6014      	str	r4, [r2, #0]
 8003b0a:	b003      	add	sp, #12
 8003b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b10:	f001 bf96 	b.w	8005a40 <__malloc_unlock>
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d908      	bls.n	8003b2a <_free_r+0x46>
 8003b18:	6825      	ldr	r5, [r4, #0]
 8003b1a:	1961      	adds	r1, r4, r5
 8003b1c:	428b      	cmp	r3, r1
 8003b1e:	bf01      	itttt	eq
 8003b20:	6819      	ldreq	r1, [r3, #0]
 8003b22:	685b      	ldreq	r3, [r3, #4]
 8003b24:	1949      	addeq	r1, r1, r5
 8003b26:	6021      	streq	r1, [r4, #0]
 8003b28:	e7ed      	b.n	8003b06 <_free_r+0x22>
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	b10b      	cbz	r3, 8003b34 <_free_r+0x50>
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	d9fa      	bls.n	8003b2a <_free_r+0x46>
 8003b34:	6811      	ldr	r1, [r2, #0]
 8003b36:	1855      	adds	r5, r2, r1
 8003b38:	42a5      	cmp	r5, r4
 8003b3a:	d10b      	bne.n	8003b54 <_free_r+0x70>
 8003b3c:	6824      	ldr	r4, [r4, #0]
 8003b3e:	4421      	add	r1, r4
 8003b40:	1854      	adds	r4, r2, r1
 8003b42:	42a3      	cmp	r3, r4
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	d1e0      	bne.n	8003b0a <_free_r+0x26>
 8003b48:	681c      	ldr	r4, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	6053      	str	r3, [r2, #4]
 8003b4e:	4421      	add	r1, r4
 8003b50:	6011      	str	r1, [r2, #0]
 8003b52:	e7da      	b.n	8003b0a <_free_r+0x26>
 8003b54:	d902      	bls.n	8003b5c <_free_r+0x78>
 8003b56:	230c      	movs	r3, #12
 8003b58:	6003      	str	r3, [r0, #0]
 8003b5a:	e7d6      	b.n	8003b0a <_free_r+0x26>
 8003b5c:	6825      	ldr	r5, [r4, #0]
 8003b5e:	1961      	adds	r1, r4, r5
 8003b60:	428b      	cmp	r3, r1
 8003b62:	bf04      	itt	eq
 8003b64:	6819      	ldreq	r1, [r3, #0]
 8003b66:	685b      	ldreq	r3, [r3, #4]
 8003b68:	6063      	str	r3, [r4, #4]
 8003b6a:	bf04      	itt	eq
 8003b6c:	1949      	addeq	r1, r1, r5
 8003b6e:	6021      	streq	r1, [r4, #0]
 8003b70:	6054      	str	r4, [r2, #4]
 8003b72:	e7ca      	b.n	8003b0a <_free_r+0x26>
 8003b74:	b003      	add	sp, #12
 8003b76:	bd30      	pop	{r4, r5, pc}
 8003b78:	20000384 	.word	0x20000384

08003b7c <sbrk_aligned>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	4e0e      	ldr	r6, [pc, #56]	; (8003bb8 <sbrk_aligned+0x3c>)
 8003b80:	460c      	mov	r4, r1
 8003b82:	6831      	ldr	r1, [r6, #0]
 8003b84:	4605      	mov	r5, r0
 8003b86:	b911      	cbnz	r1, 8003b8e <sbrk_aligned+0x12>
 8003b88:	f000 fcf6 	bl	8004578 <_sbrk_r>
 8003b8c:	6030      	str	r0, [r6, #0]
 8003b8e:	4621      	mov	r1, r4
 8003b90:	4628      	mov	r0, r5
 8003b92:	f000 fcf1 	bl	8004578 <_sbrk_r>
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	d00a      	beq.n	8003bb0 <sbrk_aligned+0x34>
 8003b9a:	1cc4      	adds	r4, r0, #3
 8003b9c:	f024 0403 	bic.w	r4, r4, #3
 8003ba0:	42a0      	cmp	r0, r4
 8003ba2:	d007      	beq.n	8003bb4 <sbrk_aligned+0x38>
 8003ba4:	1a21      	subs	r1, r4, r0
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 fce6 	bl	8004578 <_sbrk_r>
 8003bac:	3001      	adds	r0, #1
 8003bae:	d101      	bne.n	8003bb4 <sbrk_aligned+0x38>
 8003bb0:	f04f 34ff 	mov.w	r4, #4294967295
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	20000388 	.word	0x20000388

08003bbc <_malloc_r>:
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	1ccd      	adds	r5, r1, #3
 8003bc2:	f025 0503 	bic.w	r5, r5, #3
 8003bc6:	3508      	adds	r5, #8
 8003bc8:	2d0c      	cmp	r5, #12
 8003bca:	bf38      	it	cc
 8003bcc:	250c      	movcc	r5, #12
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	db01      	blt.n	8003bd8 <_malloc_r+0x1c>
 8003bd4:	42a9      	cmp	r1, r5
 8003bd6:	d905      	bls.n	8003be4 <_malloc_r+0x28>
 8003bd8:	230c      	movs	r3, #12
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	2600      	movs	r6, #0
 8003bde:	4630      	mov	r0, r6
 8003be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be4:	4e2e      	ldr	r6, [pc, #184]	; (8003ca0 <_malloc_r+0xe4>)
 8003be6:	f001 ff25 	bl	8005a34 <__malloc_lock>
 8003bea:	6833      	ldr	r3, [r6, #0]
 8003bec:	461c      	mov	r4, r3
 8003bee:	bb34      	cbnz	r4, 8003c3e <_malloc_r+0x82>
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	f7ff ffc2 	bl	8003b7c <sbrk_aligned>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	d14d      	bne.n	8003c9a <_malloc_r+0xde>
 8003bfe:	6834      	ldr	r4, [r6, #0]
 8003c00:	4626      	mov	r6, r4
 8003c02:	2e00      	cmp	r6, #0
 8003c04:	d140      	bne.n	8003c88 <_malloc_r+0xcc>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	4631      	mov	r1, r6
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	eb04 0803 	add.w	r8, r4, r3
 8003c10:	f000 fcb2 	bl	8004578 <_sbrk_r>
 8003c14:	4580      	cmp	r8, r0
 8003c16:	d13a      	bne.n	8003c8e <_malloc_r+0xd2>
 8003c18:	6821      	ldr	r1, [r4, #0]
 8003c1a:	3503      	adds	r5, #3
 8003c1c:	1a6d      	subs	r5, r5, r1
 8003c1e:	f025 0503 	bic.w	r5, r5, #3
 8003c22:	3508      	adds	r5, #8
 8003c24:	2d0c      	cmp	r5, #12
 8003c26:	bf38      	it	cc
 8003c28:	250c      	movcc	r5, #12
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	4638      	mov	r0, r7
 8003c2e:	f7ff ffa5 	bl	8003b7c <sbrk_aligned>
 8003c32:	3001      	adds	r0, #1
 8003c34:	d02b      	beq.n	8003c8e <_malloc_r+0xd2>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	442b      	add	r3, r5
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	e00e      	b.n	8003c5c <_malloc_r+0xa0>
 8003c3e:	6822      	ldr	r2, [r4, #0]
 8003c40:	1b52      	subs	r2, r2, r5
 8003c42:	d41e      	bmi.n	8003c82 <_malloc_r+0xc6>
 8003c44:	2a0b      	cmp	r2, #11
 8003c46:	d916      	bls.n	8003c76 <_malloc_r+0xba>
 8003c48:	1961      	adds	r1, r4, r5
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	6025      	str	r5, [r4, #0]
 8003c4e:	bf18      	it	ne
 8003c50:	6059      	strne	r1, [r3, #4]
 8003c52:	6863      	ldr	r3, [r4, #4]
 8003c54:	bf08      	it	eq
 8003c56:	6031      	streq	r1, [r6, #0]
 8003c58:	5162      	str	r2, [r4, r5]
 8003c5a:	604b      	str	r3, [r1, #4]
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	f104 060b 	add.w	r6, r4, #11
 8003c62:	f001 feed 	bl	8005a40 <__malloc_unlock>
 8003c66:	f026 0607 	bic.w	r6, r6, #7
 8003c6a:	1d23      	adds	r3, r4, #4
 8003c6c:	1af2      	subs	r2, r6, r3
 8003c6e:	d0b6      	beq.n	8003bde <_malloc_r+0x22>
 8003c70:	1b9b      	subs	r3, r3, r6
 8003c72:	50a3      	str	r3, [r4, r2]
 8003c74:	e7b3      	b.n	8003bde <_malloc_r+0x22>
 8003c76:	6862      	ldr	r2, [r4, #4]
 8003c78:	42a3      	cmp	r3, r4
 8003c7a:	bf0c      	ite	eq
 8003c7c:	6032      	streq	r2, [r6, #0]
 8003c7e:	605a      	strne	r2, [r3, #4]
 8003c80:	e7ec      	b.n	8003c5c <_malloc_r+0xa0>
 8003c82:	4623      	mov	r3, r4
 8003c84:	6864      	ldr	r4, [r4, #4]
 8003c86:	e7b2      	b.n	8003bee <_malloc_r+0x32>
 8003c88:	4634      	mov	r4, r6
 8003c8a:	6876      	ldr	r6, [r6, #4]
 8003c8c:	e7b9      	b.n	8003c02 <_malloc_r+0x46>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4638      	mov	r0, r7
 8003c94:	f001 fed4 	bl	8005a40 <__malloc_unlock>
 8003c98:	e7a1      	b.n	8003bde <_malloc_r+0x22>
 8003c9a:	6025      	str	r5, [r4, #0]
 8003c9c:	e7de      	b.n	8003c5c <_malloc_r+0xa0>
 8003c9e:	bf00      	nop
 8003ca0:	20000384 	.word	0x20000384

08003ca4 <__cvt>:
 8003ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	ec55 4b10 	vmov	r4, r5, d0
 8003cac:	2d00      	cmp	r5, #0
 8003cae:	460e      	mov	r6, r1
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	462b      	mov	r3, r5
 8003cb4:	bfbb      	ittet	lt
 8003cb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003cba:	461d      	movlt	r5, r3
 8003cbc:	2300      	movge	r3, #0
 8003cbe:	232d      	movlt	r3, #45	; 0x2d
 8003cc0:	700b      	strb	r3, [r1, #0]
 8003cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003cc8:	4691      	mov	r9, r2
 8003cca:	f023 0820 	bic.w	r8, r3, #32
 8003cce:	bfbc      	itt	lt
 8003cd0:	4622      	movlt	r2, r4
 8003cd2:	4614      	movlt	r4, r2
 8003cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cd8:	d005      	beq.n	8003ce6 <__cvt+0x42>
 8003cda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003cde:	d100      	bne.n	8003ce2 <__cvt+0x3e>
 8003ce0:	3601      	adds	r6, #1
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	e000      	b.n	8003ce8 <__cvt+0x44>
 8003ce6:	2103      	movs	r1, #3
 8003ce8:	ab03      	add	r3, sp, #12
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	ab02      	add	r3, sp, #8
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	ec45 4b10 	vmov	d0, r4, r5
 8003cf4:	4653      	mov	r3, sl
 8003cf6:	4632      	mov	r2, r6
 8003cf8:	f000 ff7e 	bl	8004bf8 <_dtoa_r>
 8003cfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d00:	4607      	mov	r7, r0
 8003d02:	d102      	bne.n	8003d0a <__cvt+0x66>
 8003d04:	f019 0f01 	tst.w	r9, #1
 8003d08:	d022      	beq.n	8003d50 <__cvt+0xac>
 8003d0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d0e:	eb07 0906 	add.w	r9, r7, r6
 8003d12:	d110      	bne.n	8003d36 <__cvt+0x92>
 8003d14:	783b      	ldrb	r3, [r7, #0]
 8003d16:	2b30      	cmp	r3, #48	; 0x30
 8003d18:	d10a      	bne.n	8003d30 <__cvt+0x8c>
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	4620      	mov	r0, r4
 8003d20:	4629      	mov	r1, r5
 8003d22:	f7fc fee9 	bl	8000af8 <__aeabi_dcmpeq>
 8003d26:	b918      	cbnz	r0, 8003d30 <__cvt+0x8c>
 8003d28:	f1c6 0601 	rsb	r6, r6, #1
 8003d2c:	f8ca 6000 	str.w	r6, [sl]
 8003d30:	f8da 3000 	ldr.w	r3, [sl]
 8003d34:	4499      	add	r9, r3
 8003d36:	2200      	movs	r2, #0
 8003d38:	2300      	movs	r3, #0
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	f7fc fedb 	bl	8000af8 <__aeabi_dcmpeq>
 8003d42:	b108      	cbz	r0, 8003d48 <__cvt+0xa4>
 8003d44:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d48:	2230      	movs	r2, #48	; 0x30
 8003d4a:	9b03      	ldr	r3, [sp, #12]
 8003d4c:	454b      	cmp	r3, r9
 8003d4e:	d307      	bcc.n	8003d60 <__cvt+0xbc>
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d54:	1bdb      	subs	r3, r3, r7
 8003d56:	4638      	mov	r0, r7
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	b004      	add	sp, #16
 8003d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	9103      	str	r1, [sp, #12]
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	e7f0      	b.n	8003d4a <__cvt+0xa6>

08003d68 <__exponent>:
 8003d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	bfb8      	it	lt
 8003d70:	4249      	neglt	r1, r1
 8003d72:	f803 2b02 	strb.w	r2, [r3], #2
 8003d76:	bfb4      	ite	lt
 8003d78:	222d      	movlt	r2, #45	; 0x2d
 8003d7a:	222b      	movge	r2, #43	; 0x2b
 8003d7c:	2909      	cmp	r1, #9
 8003d7e:	7042      	strb	r2, [r0, #1]
 8003d80:	dd2a      	ble.n	8003dd8 <__exponent+0x70>
 8003d82:	f10d 0407 	add.w	r4, sp, #7
 8003d86:	46a4      	mov	ip, r4
 8003d88:	270a      	movs	r7, #10
 8003d8a:	46a6      	mov	lr, r4
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003d92:	fb07 1516 	mls	r5, r7, r6, r1
 8003d96:	3530      	adds	r5, #48	; 0x30
 8003d98:	2a63      	cmp	r2, #99	; 0x63
 8003d9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003d9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003da2:	4631      	mov	r1, r6
 8003da4:	dcf1      	bgt.n	8003d8a <__exponent+0x22>
 8003da6:	3130      	adds	r1, #48	; 0x30
 8003da8:	f1ae 0502 	sub.w	r5, lr, #2
 8003dac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003db0:	1c44      	adds	r4, r0, #1
 8003db2:	4629      	mov	r1, r5
 8003db4:	4561      	cmp	r1, ip
 8003db6:	d30a      	bcc.n	8003dce <__exponent+0x66>
 8003db8:	f10d 0209 	add.w	r2, sp, #9
 8003dbc:	eba2 020e 	sub.w	r2, r2, lr
 8003dc0:	4565      	cmp	r5, ip
 8003dc2:	bf88      	it	hi
 8003dc4:	2200      	movhi	r2, #0
 8003dc6:	4413      	add	r3, r2
 8003dc8:	1a18      	subs	r0, r3, r0
 8003dca:	b003      	add	sp, #12
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003dd6:	e7ed      	b.n	8003db4 <__exponent+0x4c>
 8003dd8:	2330      	movs	r3, #48	; 0x30
 8003dda:	3130      	adds	r1, #48	; 0x30
 8003ddc:	7083      	strb	r3, [r0, #2]
 8003dde:	70c1      	strb	r1, [r0, #3]
 8003de0:	1d03      	adds	r3, r0, #4
 8003de2:	e7f1      	b.n	8003dc8 <__exponent+0x60>

08003de4 <_printf_float>:
 8003de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de8:	ed2d 8b02 	vpush	{d8}
 8003dec:	b08d      	sub	sp, #52	; 0x34
 8003dee:	460c      	mov	r4, r1
 8003df0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003df4:	4616      	mov	r6, r2
 8003df6:	461f      	mov	r7, r3
 8003df8:	4605      	mov	r5, r0
 8003dfa:	f001 fe03 	bl	8005a04 <_localeconv_r>
 8003dfe:	f8d0 a000 	ldr.w	sl, [r0]
 8003e02:	4650      	mov	r0, sl
 8003e04:	f7fc f9f6 	bl	80001f4 <strlen>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	9305      	str	r3, [sp, #20]
 8003e10:	f8d8 3000 	ldr.w	r3, [r8]
 8003e14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003e18:	3307      	adds	r3, #7
 8003e1a:	f023 0307 	bic.w	r3, r3, #7
 8003e1e:	f103 0208 	add.w	r2, r3, #8
 8003e22:	f8c8 2000 	str.w	r2, [r8]
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003e32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e36:	9307      	str	r3, [sp, #28]
 8003e38:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e3c:	ee08 0a10 	vmov	s16, r0
 8003e40:	4b9f      	ldr	r3, [pc, #636]	; (80040c0 <_printf_float+0x2dc>)
 8003e42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e46:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4a:	f7fc fe87 	bl	8000b5c <__aeabi_dcmpun>
 8003e4e:	bb88      	cbnz	r0, 8003eb4 <_printf_float+0xd0>
 8003e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e54:	4b9a      	ldr	r3, [pc, #616]	; (80040c0 <_printf_float+0x2dc>)
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5a:	f7fc fe61 	bl	8000b20 <__aeabi_dcmple>
 8003e5e:	bb48      	cbnz	r0, 8003eb4 <_printf_float+0xd0>
 8003e60:	2200      	movs	r2, #0
 8003e62:	2300      	movs	r3, #0
 8003e64:	4640      	mov	r0, r8
 8003e66:	4649      	mov	r1, r9
 8003e68:	f7fc fe50 	bl	8000b0c <__aeabi_dcmplt>
 8003e6c:	b110      	cbz	r0, 8003e74 <_printf_float+0x90>
 8003e6e:	232d      	movs	r3, #45	; 0x2d
 8003e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e74:	4b93      	ldr	r3, [pc, #588]	; (80040c4 <_printf_float+0x2e0>)
 8003e76:	4894      	ldr	r0, [pc, #592]	; (80040c8 <_printf_float+0x2e4>)
 8003e78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003e7c:	bf94      	ite	ls
 8003e7e:	4698      	movls	r8, r3
 8003e80:	4680      	movhi	r8, r0
 8003e82:	2303      	movs	r3, #3
 8003e84:	6123      	str	r3, [r4, #16]
 8003e86:	9b05      	ldr	r3, [sp, #20]
 8003e88:	f023 0204 	bic.w	r2, r3, #4
 8003e8c:	6022      	str	r2, [r4, #0]
 8003e8e:	f04f 0900 	mov.w	r9, #0
 8003e92:	9700      	str	r7, [sp, #0]
 8003e94:	4633      	mov	r3, r6
 8003e96:	aa0b      	add	r2, sp, #44	; 0x2c
 8003e98:	4621      	mov	r1, r4
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f000 f9d8 	bl	8004250 <_printf_common>
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	f040 8090 	bne.w	8003fc6 <_printf_float+0x1e2>
 8003ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eaa:	b00d      	add	sp, #52	; 0x34
 8003eac:	ecbd 8b02 	vpop	{d8}
 8003eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	4640      	mov	r0, r8
 8003eba:	4649      	mov	r1, r9
 8003ebc:	f7fc fe4e 	bl	8000b5c <__aeabi_dcmpun>
 8003ec0:	b140      	cbz	r0, 8003ed4 <_printf_float+0xf0>
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bfbc      	itt	lt
 8003ec8:	232d      	movlt	r3, #45	; 0x2d
 8003eca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ece:	487f      	ldr	r0, [pc, #508]	; (80040cc <_printf_float+0x2e8>)
 8003ed0:	4b7f      	ldr	r3, [pc, #508]	; (80040d0 <_printf_float+0x2ec>)
 8003ed2:	e7d1      	b.n	8003e78 <_printf_float+0x94>
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003eda:	9206      	str	r2, [sp, #24]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	d13f      	bne.n	8003f60 <_printf_float+0x17c>
 8003ee0:	2306      	movs	r3, #6
 8003ee2:	6063      	str	r3, [r4, #4]
 8003ee4:	9b05      	ldr	r3, [sp, #20]
 8003ee6:	6861      	ldr	r1, [r4, #4]
 8003ee8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003eec:	2300      	movs	r3, #0
 8003eee:	9303      	str	r3, [sp, #12]
 8003ef0:	ab0a      	add	r3, sp, #40	; 0x28
 8003ef2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003ef6:	ab09      	add	r3, sp, #36	; 0x24
 8003ef8:	ec49 8b10 	vmov	d0, r8, r9
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	6022      	str	r2, [r4, #0]
 8003f00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f04:	4628      	mov	r0, r5
 8003f06:	f7ff fecd 	bl	8003ca4 <__cvt>
 8003f0a:	9b06      	ldr	r3, [sp, #24]
 8003f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f0e:	2b47      	cmp	r3, #71	; 0x47
 8003f10:	4680      	mov	r8, r0
 8003f12:	d108      	bne.n	8003f26 <_printf_float+0x142>
 8003f14:	1cc8      	adds	r0, r1, #3
 8003f16:	db02      	blt.n	8003f1e <_printf_float+0x13a>
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	4299      	cmp	r1, r3
 8003f1c:	dd41      	ble.n	8003fa2 <_printf_float+0x1be>
 8003f1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003f22:	fa5f fb8b 	uxtb.w	fp, fp
 8003f26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f2a:	d820      	bhi.n	8003f6e <_printf_float+0x18a>
 8003f2c:	3901      	subs	r1, #1
 8003f2e:	465a      	mov	r2, fp
 8003f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f34:	9109      	str	r1, [sp, #36]	; 0x24
 8003f36:	f7ff ff17 	bl	8003d68 <__exponent>
 8003f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f3c:	1813      	adds	r3, r2, r0
 8003f3e:	2a01      	cmp	r2, #1
 8003f40:	4681      	mov	r9, r0
 8003f42:	6123      	str	r3, [r4, #16]
 8003f44:	dc02      	bgt.n	8003f4c <_printf_float+0x168>
 8003f46:	6822      	ldr	r2, [r4, #0]
 8003f48:	07d2      	lsls	r2, r2, #31
 8003f4a:	d501      	bpl.n	8003f50 <_printf_float+0x16c>
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	6123      	str	r3, [r4, #16]
 8003f50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d09c      	beq.n	8003e92 <_printf_float+0xae>
 8003f58:	232d      	movs	r3, #45	; 0x2d
 8003f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f5e:	e798      	b.n	8003e92 <_printf_float+0xae>
 8003f60:	9a06      	ldr	r2, [sp, #24]
 8003f62:	2a47      	cmp	r2, #71	; 0x47
 8003f64:	d1be      	bne.n	8003ee4 <_printf_float+0x100>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1bc      	bne.n	8003ee4 <_printf_float+0x100>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e7b9      	b.n	8003ee2 <_printf_float+0xfe>
 8003f6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003f72:	d118      	bne.n	8003fa6 <_printf_float+0x1c2>
 8003f74:	2900      	cmp	r1, #0
 8003f76:	6863      	ldr	r3, [r4, #4]
 8003f78:	dd0b      	ble.n	8003f92 <_printf_float+0x1ae>
 8003f7a:	6121      	str	r1, [r4, #16]
 8003f7c:	b913      	cbnz	r3, 8003f84 <_printf_float+0x1a0>
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	07d0      	lsls	r0, r2, #31
 8003f82:	d502      	bpl.n	8003f8a <_printf_float+0x1a6>
 8003f84:	3301      	adds	r3, #1
 8003f86:	440b      	add	r3, r1
 8003f88:	6123      	str	r3, [r4, #16]
 8003f8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f8c:	f04f 0900 	mov.w	r9, #0
 8003f90:	e7de      	b.n	8003f50 <_printf_float+0x16c>
 8003f92:	b913      	cbnz	r3, 8003f9a <_printf_float+0x1b6>
 8003f94:	6822      	ldr	r2, [r4, #0]
 8003f96:	07d2      	lsls	r2, r2, #31
 8003f98:	d501      	bpl.n	8003f9e <_printf_float+0x1ba>
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	e7f4      	b.n	8003f88 <_printf_float+0x1a4>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e7f2      	b.n	8003f88 <_printf_float+0x1a4>
 8003fa2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	db05      	blt.n	8003fb8 <_printf_float+0x1d4>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	6121      	str	r1, [r4, #16]
 8003fb0:	07d8      	lsls	r0, r3, #31
 8003fb2:	d5ea      	bpl.n	8003f8a <_printf_float+0x1a6>
 8003fb4:	1c4b      	adds	r3, r1, #1
 8003fb6:	e7e7      	b.n	8003f88 <_printf_float+0x1a4>
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	bfd4      	ite	le
 8003fbc:	f1c1 0202 	rsble	r2, r1, #2
 8003fc0:	2201      	movgt	r2, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	e7e0      	b.n	8003f88 <_printf_float+0x1a4>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	055a      	lsls	r2, r3, #21
 8003fca:	d407      	bmi.n	8003fdc <_printf_float+0x1f8>
 8003fcc:	6923      	ldr	r3, [r4, #16]
 8003fce:	4642      	mov	r2, r8
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	47b8      	blx	r7
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d12c      	bne.n	8004034 <_printf_float+0x250>
 8003fda:	e764      	b.n	8003ea6 <_printf_float+0xc2>
 8003fdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fe0:	f240 80e0 	bls.w	80041a4 <_printf_float+0x3c0>
 8003fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2300      	movs	r3, #0
 8003fec:	f7fc fd84 	bl	8000af8 <__aeabi_dcmpeq>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d034      	beq.n	800405e <_printf_float+0x27a>
 8003ff4:	4a37      	ldr	r2, [pc, #220]	; (80040d4 <_printf_float+0x2f0>)
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	47b8      	blx	r7
 8003ffe:	3001      	adds	r0, #1
 8004000:	f43f af51 	beq.w	8003ea6 <_printf_float+0xc2>
 8004004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004008:	429a      	cmp	r2, r3
 800400a:	db02      	blt.n	8004012 <_printf_float+0x22e>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	07d8      	lsls	r0, r3, #31
 8004010:	d510      	bpl.n	8004034 <_printf_float+0x250>
 8004012:	ee18 3a10 	vmov	r3, s16
 8004016:	4652      	mov	r2, sl
 8004018:	4631      	mov	r1, r6
 800401a:	4628      	mov	r0, r5
 800401c:	47b8      	blx	r7
 800401e:	3001      	adds	r0, #1
 8004020:	f43f af41 	beq.w	8003ea6 <_printf_float+0xc2>
 8004024:	f04f 0800 	mov.w	r8, #0
 8004028:	f104 091a 	add.w	r9, r4, #26
 800402c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	4543      	cmp	r3, r8
 8004032:	dc09      	bgt.n	8004048 <_printf_float+0x264>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	079b      	lsls	r3, r3, #30
 8004038:	f100 8105 	bmi.w	8004246 <_printf_float+0x462>
 800403c:	68e0      	ldr	r0, [r4, #12]
 800403e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004040:	4298      	cmp	r0, r3
 8004042:	bfb8      	it	lt
 8004044:	4618      	movlt	r0, r3
 8004046:	e730      	b.n	8003eaa <_printf_float+0xc6>
 8004048:	2301      	movs	r3, #1
 800404a:	464a      	mov	r2, r9
 800404c:	4631      	mov	r1, r6
 800404e:	4628      	mov	r0, r5
 8004050:	47b8      	blx	r7
 8004052:	3001      	adds	r0, #1
 8004054:	f43f af27 	beq.w	8003ea6 <_printf_float+0xc2>
 8004058:	f108 0801 	add.w	r8, r8, #1
 800405c:	e7e6      	b.n	800402c <_printf_float+0x248>
 800405e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	dc39      	bgt.n	80040d8 <_printf_float+0x2f4>
 8004064:	4a1b      	ldr	r2, [pc, #108]	; (80040d4 <_printf_float+0x2f0>)
 8004066:	2301      	movs	r3, #1
 8004068:	4631      	mov	r1, r6
 800406a:	4628      	mov	r0, r5
 800406c:	47b8      	blx	r7
 800406e:	3001      	adds	r0, #1
 8004070:	f43f af19 	beq.w	8003ea6 <_printf_float+0xc2>
 8004074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004078:	4313      	orrs	r3, r2
 800407a:	d102      	bne.n	8004082 <_printf_float+0x29e>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	07d9      	lsls	r1, r3, #31
 8004080:	d5d8      	bpl.n	8004034 <_printf_float+0x250>
 8004082:	ee18 3a10 	vmov	r3, s16
 8004086:	4652      	mov	r2, sl
 8004088:	4631      	mov	r1, r6
 800408a:	4628      	mov	r0, r5
 800408c:	47b8      	blx	r7
 800408e:	3001      	adds	r0, #1
 8004090:	f43f af09 	beq.w	8003ea6 <_printf_float+0xc2>
 8004094:	f04f 0900 	mov.w	r9, #0
 8004098:	f104 0a1a 	add.w	sl, r4, #26
 800409c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800409e:	425b      	negs	r3, r3
 80040a0:	454b      	cmp	r3, r9
 80040a2:	dc01      	bgt.n	80040a8 <_printf_float+0x2c4>
 80040a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040a6:	e792      	b.n	8003fce <_printf_float+0x1ea>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4652      	mov	r2, sl
 80040ac:	4631      	mov	r1, r6
 80040ae:	4628      	mov	r0, r5
 80040b0:	47b8      	blx	r7
 80040b2:	3001      	adds	r0, #1
 80040b4:	f43f aef7 	beq.w	8003ea6 <_printf_float+0xc2>
 80040b8:	f109 0901 	add.w	r9, r9, #1
 80040bc:	e7ee      	b.n	800409c <_printf_float+0x2b8>
 80040be:	bf00      	nop
 80040c0:	7fefffff 	.word	0x7fefffff
 80040c4:	08007bb8 	.word	0x08007bb8
 80040c8:	08007bbc 	.word	0x08007bbc
 80040cc:	08007bc4 	.word	0x08007bc4
 80040d0:	08007bc0 	.word	0x08007bc0
 80040d4:	08007fb6 	.word	0x08007fb6
 80040d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040dc:	429a      	cmp	r2, r3
 80040de:	bfa8      	it	ge
 80040e0:	461a      	movge	r2, r3
 80040e2:	2a00      	cmp	r2, #0
 80040e4:	4691      	mov	r9, r2
 80040e6:	dc37      	bgt.n	8004158 <_printf_float+0x374>
 80040e8:	f04f 0b00 	mov.w	fp, #0
 80040ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040f0:	f104 021a 	add.w	r2, r4, #26
 80040f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040f6:	9305      	str	r3, [sp, #20]
 80040f8:	eba3 0309 	sub.w	r3, r3, r9
 80040fc:	455b      	cmp	r3, fp
 80040fe:	dc33      	bgt.n	8004168 <_printf_float+0x384>
 8004100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004104:	429a      	cmp	r2, r3
 8004106:	db3b      	blt.n	8004180 <_printf_float+0x39c>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	07da      	lsls	r2, r3, #31
 800410c:	d438      	bmi.n	8004180 <_printf_float+0x39c>
 800410e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004110:	9a05      	ldr	r2, [sp, #20]
 8004112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004114:	1a9a      	subs	r2, r3, r2
 8004116:	eba3 0901 	sub.w	r9, r3, r1
 800411a:	4591      	cmp	r9, r2
 800411c:	bfa8      	it	ge
 800411e:	4691      	movge	r9, r2
 8004120:	f1b9 0f00 	cmp.w	r9, #0
 8004124:	dc35      	bgt.n	8004192 <_printf_float+0x3ae>
 8004126:	f04f 0800 	mov.w	r8, #0
 800412a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800412e:	f104 0a1a 	add.w	sl, r4, #26
 8004132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	eba3 0309 	sub.w	r3, r3, r9
 800413c:	4543      	cmp	r3, r8
 800413e:	f77f af79 	ble.w	8004034 <_printf_float+0x250>
 8004142:	2301      	movs	r3, #1
 8004144:	4652      	mov	r2, sl
 8004146:	4631      	mov	r1, r6
 8004148:	4628      	mov	r0, r5
 800414a:	47b8      	blx	r7
 800414c:	3001      	adds	r0, #1
 800414e:	f43f aeaa 	beq.w	8003ea6 <_printf_float+0xc2>
 8004152:	f108 0801 	add.w	r8, r8, #1
 8004156:	e7ec      	b.n	8004132 <_printf_float+0x34e>
 8004158:	4613      	mov	r3, r2
 800415a:	4631      	mov	r1, r6
 800415c:	4642      	mov	r2, r8
 800415e:	4628      	mov	r0, r5
 8004160:	47b8      	blx	r7
 8004162:	3001      	adds	r0, #1
 8004164:	d1c0      	bne.n	80040e8 <_printf_float+0x304>
 8004166:	e69e      	b.n	8003ea6 <_printf_float+0xc2>
 8004168:	2301      	movs	r3, #1
 800416a:	4631      	mov	r1, r6
 800416c:	4628      	mov	r0, r5
 800416e:	9205      	str	r2, [sp, #20]
 8004170:	47b8      	blx	r7
 8004172:	3001      	adds	r0, #1
 8004174:	f43f ae97 	beq.w	8003ea6 <_printf_float+0xc2>
 8004178:	9a05      	ldr	r2, [sp, #20]
 800417a:	f10b 0b01 	add.w	fp, fp, #1
 800417e:	e7b9      	b.n	80040f4 <_printf_float+0x310>
 8004180:	ee18 3a10 	vmov	r3, s16
 8004184:	4652      	mov	r2, sl
 8004186:	4631      	mov	r1, r6
 8004188:	4628      	mov	r0, r5
 800418a:	47b8      	blx	r7
 800418c:	3001      	adds	r0, #1
 800418e:	d1be      	bne.n	800410e <_printf_float+0x32a>
 8004190:	e689      	b.n	8003ea6 <_printf_float+0xc2>
 8004192:	9a05      	ldr	r2, [sp, #20]
 8004194:	464b      	mov	r3, r9
 8004196:	4442      	add	r2, r8
 8004198:	4631      	mov	r1, r6
 800419a:	4628      	mov	r0, r5
 800419c:	47b8      	blx	r7
 800419e:	3001      	adds	r0, #1
 80041a0:	d1c1      	bne.n	8004126 <_printf_float+0x342>
 80041a2:	e680      	b.n	8003ea6 <_printf_float+0xc2>
 80041a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041a6:	2a01      	cmp	r2, #1
 80041a8:	dc01      	bgt.n	80041ae <_printf_float+0x3ca>
 80041aa:	07db      	lsls	r3, r3, #31
 80041ac:	d538      	bpl.n	8004220 <_printf_float+0x43c>
 80041ae:	2301      	movs	r3, #1
 80041b0:	4642      	mov	r2, r8
 80041b2:	4631      	mov	r1, r6
 80041b4:	4628      	mov	r0, r5
 80041b6:	47b8      	blx	r7
 80041b8:	3001      	adds	r0, #1
 80041ba:	f43f ae74 	beq.w	8003ea6 <_printf_float+0xc2>
 80041be:	ee18 3a10 	vmov	r3, s16
 80041c2:	4652      	mov	r2, sl
 80041c4:	4631      	mov	r1, r6
 80041c6:	4628      	mov	r0, r5
 80041c8:	47b8      	blx	r7
 80041ca:	3001      	adds	r0, #1
 80041cc:	f43f ae6b 	beq.w	8003ea6 <_printf_float+0xc2>
 80041d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041d4:	2200      	movs	r2, #0
 80041d6:	2300      	movs	r3, #0
 80041d8:	f7fc fc8e 	bl	8000af8 <__aeabi_dcmpeq>
 80041dc:	b9d8      	cbnz	r0, 8004216 <_printf_float+0x432>
 80041de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041e0:	f108 0201 	add.w	r2, r8, #1
 80041e4:	3b01      	subs	r3, #1
 80041e6:	4631      	mov	r1, r6
 80041e8:	4628      	mov	r0, r5
 80041ea:	47b8      	blx	r7
 80041ec:	3001      	adds	r0, #1
 80041ee:	d10e      	bne.n	800420e <_printf_float+0x42a>
 80041f0:	e659      	b.n	8003ea6 <_printf_float+0xc2>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4652      	mov	r2, sl
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b8      	blx	r7
 80041fc:	3001      	adds	r0, #1
 80041fe:	f43f ae52 	beq.w	8003ea6 <_printf_float+0xc2>
 8004202:	f108 0801 	add.w	r8, r8, #1
 8004206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	4543      	cmp	r3, r8
 800420c:	dcf1      	bgt.n	80041f2 <_printf_float+0x40e>
 800420e:	464b      	mov	r3, r9
 8004210:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004214:	e6dc      	b.n	8003fd0 <_printf_float+0x1ec>
 8004216:	f04f 0800 	mov.w	r8, #0
 800421a:	f104 0a1a 	add.w	sl, r4, #26
 800421e:	e7f2      	b.n	8004206 <_printf_float+0x422>
 8004220:	2301      	movs	r3, #1
 8004222:	4642      	mov	r2, r8
 8004224:	e7df      	b.n	80041e6 <_printf_float+0x402>
 8004226:	2301      	movs	r3, #1
 8004228:	464a      	mov	r2, r9
 800422a:	4631      	mov	r1, r6
 800422c:	4628      	mov	r0, r5
 800422e:	47b8      	blx	r7
 8004230:	3001      	adds	r0, #1
 8004232:	f43f ae38 	beq.w	8003ea6 <_printf_float+0xc2>
 8004236:	f108 0801 	add.w	r8, r8, #1
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800423e:	1a5b      	subs	r3, r3, r1
 8004240:	4543      	cmp	r3, r8
 8004242:	dcf0      	bgt.n	8004226 <_printf_float+0x442>
 8004244:	e6fa      	b.n	800403c <_printf_float+0x258>
 8004246:	f04f 0800 	mov.w	r8, #0
 800424a:	f104 0919 	add.w	r9, r4, #25
 800424e:	e7f4      	b.n	800423a <_printf_float+0x456>

08004250 <_printf_common>:
 8004250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	4616      	mov	r6, r2
 8004256:	4699      	mov	r9, r3
 8004258:	688a      	ldr	r2, [r1, #8]
 800425a:	690b      	ldr	r3, [r1, #16]
 800425c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004260:	4293      	cmp	r3, r2
 8004262:	bfb8      	it	lt
 8004264:	4613      	movlt	r3, r2
 8004266:	6033      	str	r3, [r6, #0]
 8004268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800426c:	4607      	mov	r7, r0
 800426e:	460c      	mov	r4, r1
 8004270:	b10a      	cbz	r2, 8004276 <_printf_common+0x26>
 8004272:	3301      	adds	r3, #1
 8004274:	6033      	str	r3, [r6, #0]
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	0699      	lsls	r1, r3, #26
 800427a:	bf42      	ittt	mi
 800427c:	6833      	ldrmi	r3, [r6, #0]
 800427e:	3302      	addmi	r3, #2
 8004280:	6033      	strmi	r3, [r6, #0]
 8004282:	6825      	ldr	r5, [r4, #0]
 8004284:	f015 0506 	ands.w	r5, r5, #6
 8004288:	d106      	bne.n	8004298 <_printf_common+0x48>
 800428a:	f104 0a19 	add.w	sl, r4, #25
 800428e:	68e3      	ldr	r3, [r4, #12]
 8004290:	6832      	ldr	r2, [r6, #0]
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	42ab      	cmp	r3, r5
 8004296:	dc26      	bgt.n	80042e6 <_printf_common+0x96>
 8004298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800429c:	1e13      	subs	r3, r2, #0
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	bf18      	it	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	0692      	lsls	r2, r2, #26
 80042a6:	d42b      	bmi.n	8004300 <_printf_common+0xb0>
 80042a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042ac:	4649      	mov	r1, r9
 80042ae:	4638      	mov	r0, r7
 80042b0:	47c0      	blx	r8
 80042b2:	3001      	adds	r0, #1
 80042b4:	d01e      	beq.n	80042f4 <_printf_common+0xa4>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	68e5      	ldr	r5, [r4, #12]
 80042ba:	6832      	ldr	r2, [r6, #0]
 80042bc:	f003 0306 	and.w	r3, r3, #6
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	bf08      	it	eq
 80042c4:	1aad      	subeq	r5, r5, r2
 80042c6:	68a3      	ldr	r3, [r4, #8]
 80042c8:	6922      	ldr	r2, [r4, #16]
 80042ca:	bf0c      	ite	eq
 80042cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d0:	2500      	movne	r5, #0
 80042d2:	4293      	cmp	r3, r2
 80042d4:	bfc4      	itt	gt
 80042d6:	1a9b      	subgt	r3, r3, r2
 80042d8:	18ed      	addgt	r5, r5, r3
 80042da:	2600      	movs	r6, #0
 80042dc:	341a      	adds	r4, #26
 80042de:	42b5      	cmp	r5, r6
 80042e0:	d11a      	bne.n	8004318 <_printf_common+0xc8>
 80042e2:	2000      	movs	r0, #0
 80042e4:	e008      	b.n	80042f8 <_printf_common+0xa8>
 80042e6:	2301      	movs	r3, #1
 80042e8:	4652      	mov	r2, sl
 80042ea:	4649      	mov	r1, r9
 80042ec:	4638      	mov	r0, r7
 80042ee:	47c0      	blx	r8
 80042f0:	3001      	adds	r0, #1
 80042f2:	d103      	bne.n	80042fc <_printf_common+0xac>
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fc:	3501      	adds	r5, #1
 80042fe:	e7c6      	b.n	800428e <_printf_common+0x3e>
 8004300:	18e1      	adds	r1, r4, r3
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	2030      	movs	r0, #48	; 0x30
 8004306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800430a:	4422      	add	r2, r4
 800430c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004314:	3302      	adds	r3, #2
 8004316:	e7c7      	b.n	80042a8 <_printf_common+0x58>
 8004318:	2301      	movs	r3, #1
 800431a:	4622      	mov	r2, r4
 800431c:	4649      	mov	r1, r9
 800431e:	4638      	mov	r0, r7
 8004320:	47c0      	blx	r8
 8004322:	3001      	adds	r0, #1
 8004324:	d0e6      	beq.n	80042f4 <_printf_common+0xa4>
 8004326:	3601      	adds	r6, #1
 8004328:	e7d9      	b.n	80042de <_printf_common+0x8e>
	...

0800432c <_printf_i>:
 800432c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004330:	7e0f      	ldrb	r7, [r1, #24]
 8004332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004334:	2f78      	cmp	r7, #120	; 0x78
 8004336:	4691      	mov	r9, r2
 8004338:	4680      	mov	r8, r0
 800433a:	460c      	mov	r4, r1
 800433c:	469a      	mov	sl, r3
 800433e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004342:	d807      	bhi.n	8004354 <_printf_i+0x28>
 8004344:	2f62      	cmp	r7, #98	; 0x62
 8004346:	d80a      	bhi.n	800435e <_printf_i+0x32>
 8004348:	2f00      	cmp	r7, #0
 800434a:	f000 80d8 	beq.w	80044fe <_printf_i+0x1d2>
 800434e:	2f58      	cmp	r7, #88	; 0x58
 8004350:	f000 80a3 	beq.w	800449a <_printf_i+0x16e>
 8004354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800435c:	e03a      	b.n	80043d4 <_printf_i+0xa8>
 800435e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004362:	2b15      	cmp	r3, #21
 8004364:	d8f6      	bhi.n	8004354 <_printf_i+0x28>
 8004366:	a101      	add	r1, pc, #4	; (adr r1, 800436c <_printf_i+0x40>)
 8004368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800436c:	080043c5 	.word	0x080043c5
 8004370:	080043d9 	.word	0x080043d9
 8004374:	08004355 	.word	0x08004355
 8004378:	08004355 	.word	0x08004355
 800437c:	08004355 	.word	0x08004355
 8004380:	08004355 	.word	0x08004355
 8004384:	080043d9 	.word	0x080043d9
 8004388:	08004355 	.word	0x08004355
 800438c:	08004355 	.word	0x08004355
 8004390:	08004355 	.word	0x08004355
 8004394:	08004355 	.word	0x08004355
 8004398:	080044e5 	.word	0x080044e5
 800439c:	08004409 	.word	0x08004409
 80043a0:	080044c7 	.word	0x080044c7
 80043a4:	08004355 	.word	0x08004355
 80043a8:	08004355 	.word	0x08004355
 80043ac:	08004507 	.word	0x08004507
 80043b0:	08004355 	.word	0x08004355
 80043b4:	08004409 	.word	0x08004409
 80043b8:	08004355 	.word	0x08004355
 80043bc:	08004355 	.word	0x08004355
 80043c0:	080044cf 	.word	0x080044cf
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	1d1a      	adds	r2, r3, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	602a      	str	r2, [r5, #0]
 80043cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0a3      	b.n	8004520 <_printf_i+0x1f4>
 80043d8:	6820      	ldr	r0, [r4, #0]
 80043da:	6829      	ldr	r1, [r5, #0]
 80043dc:	0606      	lsls	r6, r0, #24
 80043de:	f101 0304 	add.w	r3, r1, #4
 80043e2:	d50a      	bpl.n	80043fa <_printf_i+0xce>
 80043e4:	680e      	ldr	r6, [r1, #0]
 80043e6:	602b      	str	r3, [r5, #0]
 80043e8:	2e00      	cmp	r6, #0
 80043ea:	da03      	bge.n	80043f4 <_printf_i+0xc8>
 80043ec:	232d      	movs	r3, #45	; 0x2d
 80043ee:	4276      	negs	r6, r6
 80043f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f4:	485e      	ldr	r0, [pc, #376]	; (8004570 <_printf_i+0x244>)
 80043f6:	230a      	movs	r3, #10
 80043f8:	e019      	b.n	800442e <_printf_i+0x102>
 80043fa:	680e      	ldr	r6, [r1, #0]
 80043fc:	602b      	str	r3, [r5, #0]
 80043fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004402:	bf18      	it	ne
 8004404:	b236      	sxthne	r6, r6
 8004406:	e7ef      	b.n	80043e8 <_printf_i+0xbc>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	6820      	ldr	r0, [r4, #0]
 800440c:	1d19      	adds	r1, r3, #4
 800440e:	6029      	str	r1, [r5, #0]
 8004410:	0601      	lsls	r1, r0, #24
 8004412:	d501      	bpl.n	8004418 <_printf_i+0xec>
 8004414:	681e      	ldr	r6, [r3, #0]
 8004416:	e002      	b.n	800441e <_printf_i+0xf2>
 8004418:	0646      	lsls	r6, r0, #25
 800441a:	d5fb      	bpl.n	8004414 <_printf_i+0xe8>
 800441c:	881e      	ldrh	r6, [r3, #0]
 800441e:	4854      	ldr	r0, [pc, #336]	; (8004570 <_printf_i+0x244>)
 8004420:	2f6f      	cmp	r7, #111	; 0x6f
 8004422:	bf0c      	ite	eq
 8004424:	2308      	moveq	r3, #8
 8004426:	230a      	movne	r3, #10
 8004428:	2100      	movs	r1, #0
 800442a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800442e:	6865      	ldr	r5, [r4, #4]
 8004430:	60a5      	str	r5, [r4, #8]
 8004432:	2d00      	cmp	r5, #0
 8004434:	bfa2      	ittt	ge
 8004436:	6821      	ldrge	r1, [r4, #0]
 8004438:	f021 0104 	bicge.w	r1, r1, #4
 800443c:	6021      	strge	r1, [r4, #0]
 800443e:	b90e      	cbnz	r6, 8004444 <_printf_i+0x118>
 8004440:	2d00      	cmp	r5, #0
 8004442:	d04d      	beq.n	80044e0 <_printf_i+0x1b4>
 8004444:	4615      	mov	r5, r2
 8004446:	fbb6 f1f3 	udiv	r1, r6, r3
 800444a:	fb03 6711 	mls	r7, r3, r1, r6
 800444e:	5dc7      	ldrb	r7, [r0, r7]
 8004450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004454:	4637      	mov	r7, r6
 8004456:	42bb      	cmp	r3, r7
 8004458:	460e      	mov	r6, r1
 800445a:	d9f4      	bls.n	8004446 <_printf_i+0x11a>
 800445c:	2b08      	cmp	r3, #8
 800445e:	d10b      	bne.n	8004478 <_printf_i+0x14c>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	07de      	lsls	r6, r3, #31
 8004464:	d508      	bpl.n	8004478 <_printf_i+0x14c>
 8004466:	6923      	ldr	r3, [r4, #16]
 8004468:	6861      	ldr	r1, [r4, #4]
 800446a:	4299      	cmp	r1, r3
 800446c:	bfde      	ittt	le
 800446e:	2330      	movle	r3, #48	; 0x30
 8004470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004478:	1b52      	subs	r2, r2, r5
 800447a:	6122      	str	r2, [r4, #16]
 800447c:	f8cd a000 	str.w	sl, [sp]
 8004480:	464b      	mov	r3, r9
 8004482:	aa03      	add	r2, sp, #12
 8004484:	4621      	mov	r1, r4
 8004486:	4640      	mov	r0, r8
 8004488:	f7ff fee2 	bl	8004250 <_printf_common>
 800448c:	3001      	adds	r0, #1
 800448e:	d14c      	bne.n	800452a <_printf_i+0x1fe>
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	b004      	add	sp, #16
 8004496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449a:	4835      	ldr	r0, [pc, #212]	; (8004570 <_printf_i+0x244>)
 800449c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044a0:	6829      	ldr	r1, [r5, #0]
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80044a8:	6029      	str	r1, [r5, #0]
 80044aa:	061d      	lsls	r5, r3, #24
 80044ac:	d514      	bpl.n	80044d8 <_printf_i+0x1ac>
 80044ae:	07df      	lsls	r7, r3, #31
 80044b0:	bf44      	itt	mi
 80044b2:	f043 0320 	orrmi.w	r3, r3, #32
 80044b6:	6023      	strmi	r3, [r4, #0]
 80044b8:	b91e      	cbnz	r6, 80044c2 <_printf_i+0x196>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f023 0320 	bic.w	r3, r3, #32
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	2310      	movs	r3, #16
 80044c4:	e7b0      	b.n	8004428 <_printf_i+0xfc>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	f043 0320 	orr.w	r3, r3, #32
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	2378      	movs	r3, #120	; 0x78
 80044d0:	4828      	ldr	r0, [pc, #160]	; (8004574 <_printf_i+0x248>)
 80044d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044d6:	e7e3      	b.n	80044a0 <_printf_i+0x174>
 80044d8:	0659      	lsls	r1, r3, #25
 80044da:	bf48      	it	mi
 80044dc:	b2b6      	uxthmi	r6, r6
 80044de:	e7e6      	b.n	80044ae <_printf_i+0x182>
 80044e0:	4615      	mov	r5, r2
 80044e2:	e7bb      	b.n	800445c <_printf_i+0x130>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	6826      	ldr	r6, [r4, #0]
 80044e8:	6961      	ldr	r1, [r4, #20]
 80044ea:	1d18      	adds	r0, r3, #4
 80044ec:	6028      	str	r0, [r5, #0]
 80044ee:	0635      	lsls	r5, r6, #24
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	d501      	bpl.n	80044f8 <_printf_i+0x1cc>
 80044f4:	6019      	str	r1, [r3, #0]
 80044f6:	e002      	b.n	80044fe <_printf_i+0x1d2>
 80044f8:	0670      	lsls	r0, r6, #25
 80044fa:	d5fb      	bpl.n	80044f4 <_printf_i+0x1c8>
 80044fc:	8019      	strh	r1, [r3, #0]
 80044fe:	2300      	movs	r3, #0
 8004500:	6123      	str	r3, [r4, #16]
 8004502:	4615      	mov	r5, r2
 8004504:	e7ba      	b.n	800447c <_printf_i+0x150>
 8004506:	682b      	ldr	r3, [r5, #0]
 8004508:	1d1a      	adds	r2, r3, #4
 800450a:	602a      	str	r2, [r5, #0]
 800450c:	681d      	ldr	r5, [r3, #0]
 800450e:	6862      	ldr	r2, [r4, #4]
 8004510:	2100      	movs	r1, #0
 8004512:	4628      	mov	r0, r5
 8004514:	f7fb fe7c 	bl	8000210 <memchr>
 8004518:	b108      	cbz	r0, 800451e <_printf_i+0x1f2>
 800451a:	1b40      	subs	r0, r0, r5
 800451c:	6060      	str	r0, [r4, #4]
 800451e:	6863      	ldr	r3, [r4, #4]
 8004520:	6123      	str	r3, [r4, #16]
 8004522:	2300      	movs	r3, #0
 8004524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004528:	e7a8      	b.n	800447c <_printf_i+0x150>
 800452a:	6923      	ldr	r3, [r4, #16]
 800452c:	462a      	mov	r2, r5
 800452e:	4649      	mov	r1, r9
 8004530:	4640      	mov	r0, r8
 8004532:	47d0      	blx	sl
 8004534:	3001      	adds	r0, #1
 8004536:	d0ab      	beq.n	8004490 <_printf_i+0x164>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	079b      	lsls	r3, r3, #30
 800453c:	d413      	bmi.n	8004566 <_printf_i+0x23a>
 800453e:	68e0      	ldr	r0, [r4, #12]
 8004540:	9b03      	ldr	r3, [sp, #12]
 8004542:	4298      	cmp	r0, r3
 8004544:	bfb8      	it	lt
 8004546:	4618      	movlt	r0, r3
 8004548:	e7a4      	b.n	8004494 <_printf_i+0x168>
 800454a:	2301      	movs	r3, #1
 800454c:	4632      	mov	r2, r6
 800454e:	4649      	mov	r1, r9
 8004550:	4640      	mov	r0, r8
 8004552:	47d0      	blx	sl
 8004554:	3001      	adds	r0, #1
 8004556:	d09b      	beq.n	8004490 <_printf_i+0x164>
 8004558:	3501      	adds	r5, #1
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	9903      	ldr	r1, [sp, #12]
 800455e:	1a5b      	subs	r3, r3, r1
 8004560:	42ab      	cmp	r3, r5
 8004562:	dcf2      	bgt.n	800454a <_printf_i+0x21e>
 8004564:	e7eb      	b.n	800453e <_printf_i+0x212>
 8004566:	2500      	movs	r5, #0
 8004568:	f104 0619 	add.w	r6, r4, #25
 800456c:	e7f5      	b.n	800455a <_printf_i+0x22e>
 800456e:	bf00      	nop
 8004570:	08007bc8 	.word	0x08007bc8
 8004574:	08007bd9 	.word	0x08007bd9

08004578 <_sbrk_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4d06      	ldr	r5, [pc, #24]	; (8004594 <_sbrk_r+0x1c>)
 800457c:	2300      	movs	r3, #0
 800457e:	4604      	mov	r4, r0
 8004580:	4608      	mov	r0, r1
 8004582:	602b      	str	r3, [r5, #0]
 8004584:	f7fd fe48 	bl	8002218 <_sbrk>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_sbrk_r+0x1a>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b103      	cbz	r3, 8004592 <_sbrk_r+0x1a>
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	200003b8 	.word	0x200003b8

08004598 <siprintf>:
 8004598:	b40e      	push	{r1, r2, r3}
 800459a:	b500      	push	{lr}
 800459c:	b09c      	sub	sp, #112	; 0x70
 800459e:	ab1d      	add	r3, sp, #116	; 0x74
 80045a0:	9002      	str	r0, [sp, #8]
 80045a2:	9006      	str	r0, [sp, #24]
 80045a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045a8:	4809      	ldr	r0, [pc, #36]	; (80045d0 <siprintf+0x38>)
 80045aa:	9107      	str	r1, [sp, #28]
 80045ac:	9104      	str	r1, [sp, #16]
 80045ae:	4909      	ldr	r1, [pc, #36]	; (80045d4 <siprintf+0x3c>)
 80045b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045b4:	9105      	str	r1, [sp, #20]
 80045b6:	6800      	ldr	r0, [r0, #0]
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	a902      	add	r1, sp, #8
 80045bc:	f001 fe3c 	bl	8006238 <_svfiprintf_r>
 80045c0:	9b02      	ldr	r3, [sp, #8]
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	b01c      	add	sp, #112	; 0x70
 80045c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045cc:	b003      	add	sp, #12
 80045ce:	4770      	bx	lr
 80045d0:	20000014 	.word	0x20000014
 80045d4:	ffff0208 	.word	0xffff0208

080045d8 <strcat>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	4602      	mov	r2, r0
 80045dc:	7814      	ldrb	r4, [r2, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	3201      	adds	r2, #1
 80045e2:	2c00      	cmp	r4, #0
 80045e4:	d1fa      	bne.n	80045dc <strcat+0x4>
 80045e6:	3b01      	subs	r3, #1
 80045e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045f0:	2a00      	cmp	r2, #0
 80045f2:	d1f9      	bne.n	80045e8 <strcat+0x10>
 80045f4:	bd10      	pop	{r4, pc}
	...

080045f8 <time>:
 80045f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <time+0x30>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	4669      	mov	r1, sp
 8004600:	4604      	mov	r4, r0
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	f001 f93c 	bl	8005880 <_gettimeofday_r>
 8004608:	2800      	cmp	r0, #0
 800460a:	bfbe      	ittt	lt
 800460c:	f04f 32ff 	movlt.w	r2, #4294967295
 8004610:	f04f 33ff 	movlt.w	r3, #4294967295
 8004614:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800461c:	b10c      	cbz	r4, 8004622 <time+0x2a>
 800461e:	e9c4 0100 	strd	r0, r1, [r4]
 8004622:	b004      	add	sp, #16
 8004624:	bd10      	pop	{r4, pc}
 8004626:	bf00      	nop
 8004628:	20000014 	.word	0x20000014

0800462c <__tzcalc_limits>:
 800462c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004630:	4605      	mov	r5, r0
 8004632:	f001 f937 	bl	80058a4 <__gettzinfo>
 8004636:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800463a:	429d      	cmp	r5, r3
 800463c:	f340 8099 	ble.w	8004772 <__tzcalc_limits+0x146>
 8004640:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8004644:	18ac      	adds	r4, r5, r2
 8004646:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800464a:	f240 126d 	movw	r2, #365	; 0x16d
 800464e:	10a4      	asrs	r4, r4, #2
 8004650:	fb02 4403 	mla	r4, r2, r3, r4
 8004654:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8004658:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800465c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004660:	441c      	add	r4, r3
 8004662:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004666:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800466a:	fb95 fcf3 	sdiv	ip, r5, r3
 800466e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8004672:	186a      	adds	r2, r5, r1
 8004674:	fabc f68c 	clz	r6, ip
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	f005 0303 	and.w	r3, r5, #3
 8004680:	4414      	add	r4, r2
 8004682:	2264      	movs	r2, #100	; 0x64
 8004684:	6045      	str	r5, [r0, #4]
 8004686:	fb95 f7f2 	sdiv	r7, r5, r2
 800468a:	0976      	lsrs	r6, r6, #5
 800468c:	fb02 5717 	mls	r7, r2, r7, r5
 8004690:	4601      	mov	r1, r0
 8004692:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	f04f 0a07 	mov.w	sl, #7
 800469c:	7a0d      	ldrb	r5, [r1, #8]
 800469e:	694b      	ldr	r3, [r1, #20]
 80046a0:	2d4a      	cmp	r5, #74	; 0x4a
 80046a2:	d12d      	bne.n	8004700 <__tzcalc_limits+0xd4>
 80046a4:	9a00      	ldr	r2, [sp, #0]
 80046a6:	eb04 0e03 	add.w	lr, r4, r3
 80046aa:	b902      	cbnz	r2, 80046ae <__tzcalc_limits+0x82>
 80046ac:	b917      	cbnz	r7, 80046b4 <__tzcalc_limits+0x88>
 80046ae:	f1bc 0f00 	cmp.w	ip, #0
 80046b2:	d123      	bne.n	80046fc <__tzcalc_limits+0xd0>
 80046b4:	2b3b      	cmp	r3, #59	; 0x3b
 80046b6:	bfd4      	ite	le
 80046b8:	2300      	movle	r3, #0
 80046ba:	2301      	movgt	r3, #1
 80046bc:	4473      	add	r3, lr
 80046be:	3b01      	subs	r3, #1
 80046c0:	698d      	ldr	r5, [r1, #24]
 80046c2:	4a2d      	ldr	r2, [pc, #180]	; (8004778 <__tzcalc_limits+0x14c>)
 80046c4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80046c8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80046cc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80046ce:	18ed      	adds	r5, r5, r3
 80046d0:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80046d4:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80046d8:	3128      	adds	r1, #40	; 0x28
 80046da:	458b      	cmp	fp, r1
 80046dc:	d1de      	bne.n	800469c <__tzcalc_limits+0x70>
 80046de:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80046e2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80046e6:	428c      	cmp	r4, r1
 80046e8:	eb72 0303 	sbcs.w	r3, r2, r3
 80046ec:	bfb4      	ite	lt
 80046ee:	2301      	movlt	r3, #1
 80046f0:	2300      	movge	r3, #0
 80046f2:	6003      	str	r3, [r0, #0]
 80046f4:	2001      	movs	r0, #1
 80046f6:	b003      	add	sp, #12
 80046f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fc:	2300      	movs	r3, #0
 80046fe:	e7dd      	b.n	80046bc <__tzcalc_limits+0x90>
 8004700:	2d44      	cmp	r5, #68	; 0x44
 8004702:	d101      	bne.n	8004708 <__tzcalc_limits+0xdc>
 8004704:	4423      	add	r3, r4
 8004706:	e7db      	b.n	80046c0 <__tzcalc_limits+0x94>
 8004708:	9a00      	ldr	r2, [sp, #0]
 800470a:	bb62      	cbnz	r2, 8004766 <__tzcalc_limits+0x13a>
 800470c:	2f00      	cmp	r7, #0
 800470e:	bf0c      	ite	eq
 8004710:	4635      	moveq	r5, r6
 8004712:	2501      	movne	r5, #1
 8004714:	68ca      	ldr	r2, [r1, #12]
 8004716:	9201      	str	r2, [sp, #4]
 8004718:	4a18      	ldr	r2, [pc, #96]	; (800477c <__tzcalc_limits+0x150>)
 800471a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800471e:	fb09 2505 	mla	r5, r9, r5, r2
 8004722:	46a6      	mov	lr, r4
 8004724:	f04f 0800 	mov.w	r8, #0
 8004728:	3d04      	subs	r5, #4
 800472a:	9a01      	ldr	r2, [sp, #4]
 800472c:	f108 0801 	add.w	r8, r8, #1
 8004730:	4542      	cmp	r2, r8
 8004732:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8004736:	dc18      	bgt.n	800476a <__tzcalc_limits+0x13e>
 8004738:	f10e 0504 	add.w	r5, lr, #4
 800473c:	fb95 f8fa 	sdiv	r8, r5, sl
 8004740:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8004744:	eba5 0808 	sub.w	r8, r5, r8
 8004748:	ebb3 0808 	subs.w	r8, r3, r8
 800474c:	690b      	ldr	r3, [r1, #16]
 800474e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004752:	bf48      	it	mi
 8004754:	f108 0807 	addmi.w	r8, r8, #7
 8004758:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800475c:	4443      	add	r3, r8
 800475e:	454b      	cmp	r3, r9
 8004760:	da05      	bge.n	800476e <__tzcalc_limits+0x142>
 8004762:	4473      	add	r3, lr
 8004764:	e7ac      	b.n	80046c0 <__tzcalc_limits+0x94>
 8004766:	4635      	mov	r5, r6
 8004768:	e7d4      	b.n	8004714 <__tzcalc_limits+0xe8>
 800476a:	44ce      	add	lr, r9
 800476c:	e7dd      	b.n	800472a <__tzcalc_limits+0xfe>
 800476e:	3b07      	subs	r3, #7
 8004770:	e7f5      	b.n	800475e <__tzcalc_limits+0x132>
 8004772:	2000      	movs	r0, #0
 8004774:	e7bf      	b.n	80046f6 <__tzcalc_limits+0xca>
 8004776:	bf00      	nop
 8004778:	00015180 	.word	0x00015180
 800477c:	08007b58 	.word	0x08007b58

08004780 <__tz_lock>:
 8004780:	4801      	ldr	r0, [pc, #4]	; (8004788 <__tz_lock+0x8>)
 8004782:	f001 b944 	b.w	8005a0e <__retarget_lock_acquire>
 8004786:	bf00      	nop
 8004788:	200003b4 	.word	0x200003b4

0800478c <__tz_unlock>:
 800478c:	4801      	ldr	r0, [pc, #4]	; (8004794 <__tz_unlock+0x8>)
 800478e:	f001 b940 	b.w	8005a12 <__retarget_lock_release>
 8004792:	bf00      	nop
 8004794:	200003b4 	.word	0x200003b4

08004798 <_tzset_unlocked>:
 8004798:	4b01      	ldr	r3, [pc, #4]	; (80047a0 <_tzset_unlocked+0x8>)
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	f000 b802 	b.w	80047a4 <_tzset_unlocked_r>
 80047a0:	20000014 	.word	0x20000014

080047a4 <_tzset_unlocked_r>:
 80047a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a8:	b08d      	sub	sp, #52	; 0x34
 80047aa:	4607      	mov	r7, r0
 80047ac:	f001 f87a 	bl	80058a4 <__gettzinfo>
 80047b0:	49b0      	ldr	r1, [pc, #704]	; (8004a74 <_tzset_unlocked_r+0x2d0>)
 80047b2:	4eb1      	ldr	r6, [pc, #708]	; (8004a78 <_tzset_unlocked_r+0x2d4>)
 80047b4:	4605      	mov	r5, r0
 80047b6:	4638      	mov	r0, r7
 80047b8:	f001 f85a 	bl	8005870 <_getenv_r>
 80047bc:	4604      	mov	r4, r0
 80047be:	b970      	cbnz	r0, 80047de <_tzset_unlocked_r+0x3a>
 80047c0:	4bae      	ldr	r3, [pc, #696]	; (8004a7c <_tzset_unlocked_r+0x2d8>)
 80047c2:	4aaf      	ldr	r2, [pc, #700]	; (8004a80 <_tzset_unlocked_r+0x2dc>)
 80047c4:	6018      	str	r0, [r3, #0]
 80047c6:	4baf      	ldr	r3, [pc, #700]	; (8004a84 <_tzset_unlocked_r+0x2e0>)
 80047c8:	6018      	str	r0, [r3, #0]
 80047ca:	4baf      	ldr	r3, [pc, #700]	; (8004a88 <_tzset_unlocked_r+0x2e4>)
 80047cc:	6830      	ldr	r0, [r6, #0]
 80047ce:	e9c3 2200 	strd	r2, r2, [r3]
 80047d2:	f7ff f977 	bl	8003ac4 <free>
 80047d6:	6034      	str	r4, [r6, #0]
 80047d8:	b00d      	add	sp, #52	; 0x34
 80047da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047de:	6831      	ldr	r1, [r6, #0]
 80047e0:	2900      	cmp	r1, #0
 80047e2:	d162      	bne.n	80048aa <_tzset_unlocked_r+0x106>
 80047e4:	6830      	ldr	r0, [r6, #0]
 80047e6:	f7ff f96d 	bl	8003ac4 <free>
 80047ea:	4620      	mov	r0, r4
 80047ec:	f7fb fd02 	bl	80001f4 <strlen>
 80047f0:	1c41      	adds	r1, r0, #1
 80047f2:	4638      	mov	r0, r7
 80047f4:	f7ff f9e2 	bl	8003bbc <_malloc_r>
 80047f8:	6030      	str	r0, [r6, #0]
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d15a      	bne.n	80048b4 <_tzset_unlocked_r+0x110>
 80047fe:	7823      	ldrb	r3, [r4, #0]
 8004800:	4aa2      	ldr	r2, [pc, #648]	; (8004a8c <_tzset_unlocked_r+0x2e8>)
 8004802:	49a3      	ldr	r1, [pc, #652]	; (8004a90 <_tzset_unlocked_r+0x2ec>)
 8004804:	2b3a      	cmp	r3, #58	; 0x3a
 8004806:	bf08      	it	eq
 8004808:	3401      	addeq	r4, #1
 800480a:	ae0a      	add	r6, sp, #40	; 0x28
 800480c:	4633      	mov	r3, r6
 800480e:	4620      	mov	r0, r4
 8004810:	f001 ff6c 	bl	80066ec <siscanf>
 8004814:	2800      	cmp	r0, #0
 8004816:	dddf      	ble.n	80047d8 <_tzset_unlocked_r+0x34>
 8004818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800481a:	18e7      	adds	r7, r4, r3
 800481c:	5ce3      	ldrb	r3, [r4, r3]
 800481e:	2b2d      	cmp	r3, #45	; 0x2d
 8004820:	d14c      	bne.n	80048bc <_tzset_unlocked_r+0x118>
 8004822:	3701      	adds	r7, #1
 8004824:	f04f 38ff 	mov.w	r8, #4294967295
 8004828:	f10d 0a20 	add.w	sl, sp, #32
 800482c:	f10d 0b1e 	add.w	fp, sp, #30
 8004830:	2400      	movs	r4, #0
 8004832:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8004836:	4997      	ldr	r1, [pc, #604]	; (8004a94 <_tzset_unlocked_r+0x2f0>)
 8004838:	9603      	str	r6, [sp, #12]
 800483a:	f8cd b000 	str.w	fp, [sp]
 800483e:	4633      	mov	r3, r6
 8004840:	aa07      	add	r2, sp, #28
 8004842:	4638      	mov	r0, r7
 8004844:	f8ad 401e 	strh.w	r4, [sp, #30]
 8004848:	f8ad 4020 	strh.w	r4, [sp, #32]
 800484c:	f001 ff4e 	bl	80066ec <siscanf>
 8004850:	42a0      	cmp	r0, r4
 8004852:	ddc1      	ble.n	80047d8 <_tzset_unlocked_r+0x34>
 8004854:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004858:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800485c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8004aa0 <_tzset_unlocked_r+0x2fc>
 8004860:	213c      	movs	r1, #60	; 0x3c
 8004862:	fb01 3302 	mla	r3, r1, r2, r3
 8004866:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800486a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800486e:	fb01 3302 	mla	r3, r1, r2, r3
 8004872:	fb08 f303 	mul.w	r3, r8, r3
 8004876:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8004a88 <_tzset_unlocked_r+0x2e4>
 800487a:	62ab      	str	r3, [r5, #40]	; 0x28
 800487c:	4b83      	ldr	r3, [pc, #524]	; (8004a8c <_tzset_unlocked_r+0x2e8>)
 800487e:	f8c8 3000 	str.w	r3, [r8]
 8004882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004884:	4982      	ldr	r1, [pc, #520]	; (8004a90 <_tzset_unlocked_r+0x2ec>)
 8004886:	441f      	add	r7, r3
 8004888:	464a      	mov	r2, r9
 800488a:	4633      	mov	r3, r6
 800488c:	4638      	mov	r0, r7
 800488e:	f001 ff2d 	bl	80066ec <siscanf>
 8004892:	42a0      	cmp	r0, r4
 8004894:	dc18      	bgt.n	80048c8 <_tzset_unlocked_r+0x124>
 8004896:	f8d8 3000 	ldr.w	r3, [r8]
 800489a:	f8c8 3004 	str.w	r3, [r8, #4]
 800489e:	4b77      	ldr	r3, [pc, #476]	; (8004a7c <_tzset_unlocked_r+0x2d8>)
 80048a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	4b77      	ldr	r3, [pc, #476]	; (8004a84 <_tzset_unlocked_r+0x2e0>)
 80048a6:	601c      	str	r4, [r3, #0]
 80048a8:	e796      	b.n	80047d8 <_tzset_unlocked_r+0x34>
 80048aa:	f7fb fc99 	bl	80001e0 <strcmp>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d198      	bne.n	80047e4 <_tzset_unlocked_r+0x40>
 80048b2:	e791      	b.n	80047d8 <_tzset_unlocked_r+0x34>
 80048b4:	4621      	mov	r1, r4
 80048b6:	f001 ff8a 	bl	80067ce <strcpy>
 80048ba:	e7a0      	b.n	80047fe <_tzset_unlocked_r+0x5a>
 80048bc:	2b2b      	cmp	r3, #43	; 0x2b
 80048be:	bf08      	it	eq
 80048c0:	3701      	addeq	r7, #1
 80048c2:	f04f 0801 	mov.w	r8, #1
 80048c6:	e7af      	b.n	8004828 <_tzset_unlocked_r+0x84>
 80048c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ca:	f8c8 9004 	str.w	r9, [r8, #4]
 80048ce:	18fc      	adds	r4, r7, r3
 80048d0:	5cfb      	ldrb	r3, [r7, r3]
 80048d2:	2b2d      	cmp	r3, #45	; 0x2d
 80048d4:	f040 808b 	bne.w	80049ee <_tzset_unlocked_r+0x24a>
 80048d8:	3401      	adds	r4, #1
 80048da:	f04f 37ff 	mov.w	r7, #4294967295
 80048de:	2300      	movs	r3, #0
 80048e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80048e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80048e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80048ec:	930a      	str	r3, [sp, #40]	; 0x28
 80048ee:	e9cd a602 	strd	sl, r6, [sp, #8]
 80048f2:	e9cd b600 	strd	fp, r6, [sp]
 80048f6:	4967      	ldr	r1, [pc, #412]	; (8004a94 <_tzset_unlocked_r+0x2f0>)
 80048f8:	4633      	mov	r3, r6
 80048fa:	aa07      	add	r2, sp, #28
 80048fc:	4620      	mov	r0, r4
 80048fe:	f001 fef5 	bl	80066ec <siscanf>
 8004902:	2800      	cmp	r0, #0
 8004904:	dc78      	bgt.n	80049f8 <_tzset_unlocked_r+0x254>
 8004906:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004908:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800490c:	652b      	str	r3, [r5, #80]	; 0x50
 800490e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004910:	462f      	mov	r7, r5
 8004912:	441c      	add	r4, r3
 8004914:	f04f 0900 	mov.w	r9, #0
 8004918:	7823      	ldrb	r3, [r4, #0]
 800491a:	2b2c      	cmp	r3, #44	; 0x2c
 800491c:	bf08      	it	eq
 800491e:	3401      	addeq	r4, #1
 8004920:	f894 8000 	ldrb.w	r8, [r4]
 8004924:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8004928:	d178      	bne.n	8004a1c <_tzset_unlocked_r+0x278>
 800492a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800492e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8004932:	ab09      	add	r3, sp, #36	; 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	4958      	ldr	r1, [pc, #352]	; (8004a98 <_tzset_unlocked_r+0x2f4>)
 8004938:	9603      	str	r6, [sp, #12]
 800493a:	4633      	mov	r3, r6
 800493c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8004940:	4620      	mov	r0, r4
 8004942:	f001 fed3 	bl	80066ec <siscanf>
 8004946:	2803      	cmp	r0, #3
 8004948:	f47f af46 	bne.w	80047d8 <_tzset_unlocked_r+0x34>
 800494c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8004950:	1e4b      	subs	r3, r1, #1
 8004952:	2b0b      	cmp	r3, #11
 8004954:	f63f af40 	bhi.w	80047d8 <_tzset_unlocked_r+0x34>
 8004958:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800495c:	1e53      	subs	r3, r2, #1
 800495e:	2b04      	cmp	r3, #4
 8004960:	f63f af3a 	bhi.w	80047d8 <_tzset_unlocked_r+0x34>
 8004964:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8004968:	2b06      	cmp	r3, #6
 800496a:	f63f af35 	bhi.w	80047d8 <_tzset_unlocked_r+0x34>
 800496e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8004972:	f887 8008 	strb.w	r8, [r7, #8]
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800497a:	eb04 0803 	add.w	r8, r4, r3
 800497e:	2302      	movs	r3, #2
 8004980:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004984:	2300      	movs	r3, #0
 8004986:	f8ad 301e 	strh.w	r3, [sp, #30]
 800498a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800498e:	930a      	str	r3, [sp, #40]	; 0x28
 8004990:	f898 3000 	ldrb.w	r3, [r8]
 8004994:	2b2f      	cmp	r3, #47	; 0x2f
 8004996:	d109      	bne.n	80049ac <_tzset_unlocked_r+0x208>
 8004998:	e9cd a602 	strd	sl, r6, [sp, #8]
 800499c:	e9cd b600 	strd	fp, r6, [sp]
 80049a0:	493e      	ldr	r1, [pc, #248]	; (8004a9c <_tzset_unlocked_r+0x2f8>)
 80049a2:	4633      	mov	r3, r6
 80049a4:	aa07      	add	r2, sp, #28
 80049a6:	4640      	mov	r0, r8
 80049a8:	f001 fea0 	bl	80066ec <siscanf>
 80049ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80049b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80049b4:	213c      	movs	r1, #60	; 0x3c
 80049b6:	fb01 3302 	mla	r3, r1, r2, r3
 80049ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80049be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80049c2:	fb01 3302 	mla	r3, r1, r2, r3
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80049ca:	3728      	adds	r7, #40	; 0x28
 80049cc:	4444      	add	r4, r8
 80049ce:	f1b9 0f00 	cmp.w	r9, #0
 80049d2:	d020      	beq.n	8004a16 <_tzset_unlocked_r+0x272>
 80049d4:	6868      	ldr	r0, [r5, #4]
 80049d6:	f7ff fe29 	bl	800462c <__tzcalc_limits>
 80049da:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <_tzset_unlocked_r+0x2d8>)
 80049dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	4a27      	ldr	r2, [pc, #156]	; (8004a84 <_tzset_unlocked_r+0x2e0>)
 80049e6:	bf18      	it	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e6f4      	b.n	80047d8 <_tzset_unlocked_r+0x34>
 80049ee:	2b2b      	cmp	r3, #43	; 0x2b
 80049f0:	bf08      	it	eq
 80049f2:	3401      	addeq	r4, #1
 80049f4:	2701      	movs	r7, #1
 80049f6:	e772      	b.n	80048de <_tzset_unlocked_r+0x13a>
 80049f8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80049fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004a00:	213c      	movs	r1, #60	; 0x3c
 8004a02:	fb01 3302 	mla	r3, r1, r2, r3
 8004a06:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004a0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004a0e:	fb01 3302 	mla	r3, r1, r2, r3
 8004a12:	437b      	muls	r3, r7
 8004a14:	e77a      	b.n	800490c <_tzset_unlocked_r+0x168>
 8004a16:	f04f 0901 	mov.w	r9, #1
 8004a1a:	e77d      	b.n	8004918 <_tzset_unlocked_r+0x174>
 8004a1c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8004a20:	bf06      	itte	eq
 8004a22:	3401      	addeq	r4, #1
 8004a24:	4643      	moveq	r3, r8
 8004a26:	2344      	movne	r3, #68	; 0x44
 8004a28:	220a      	movs	r2, #10
 8004a2a:	a90b      	add	r1, sp, #44	; 0x2c
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	9305      	str	r3, [sp, #20]
 8004a30:	f001 ff5e 	bl	80068f0 <strtoul>
 8004a34:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8004a38:	9b05      	ldr	r3, [sp, #20]
 8004a3a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8004a3e:	45a0      	cmp	r8, r4
 8004a40:	d114      	bne.n	8004a6c <_tzset_unlocked_r+0x2c8>
 8004a42:	234d      	movs	r3, #77	; 0x4d
 8004a44:	f1b9 0f00 	cmp.w	r9, #0
 8004a48:	d107      	bne.n	8004a5a <_tzset_unlocked_r+0x2b6>
 8004a4a:	722b      	strb	r3, [r5, #8]
 8004a4c:	2103      	movs	r1, #3
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8004a54:	f8c5 9014 	str.w	r9, [r5, #20]
 8004a58:	e791      	b.n	800497e <_tzset_unlocked_r+0x1da>
 8004a5a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8004a5e:	220b      	movs	r2, #11
 8004a60:	2301      	movs	r3, #1
 8004a62:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8004a66:	2300      	movs	r3, #0
 8004a68:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004a6a:	e788      	b.n	800497e <_tzset_unlocked_r+0x1da>
 8004a6c:	b280      	uxth	r0, r0
 8004a6e:	723b      	strb	r3, [r7, #8]
 8004a70:	6178      	str	r0, [r7, #20]
 8004a72:	e784      	b.n	800497e <_tzset_unlocked_r+0x1da>
 8004a74:	08007bea 	.word	0x08007bea
 8004a78:	200003a4 	.word	0x200003a4
 8004a7c:	200003ac 	.word	0x200003ac
 8004a80:	08007bed 	.word	0x08007bed
 8004a84:	200003a8 	.word	0x200003a8
 8004a88:	20000078 	.word	0x20000078
 8004a8c:	20000397 	.word	0x20000397
 8004a90:	08007bf1 	.word	0x08007bf1
 8004a94:	08007c14 	.word	0x08007c14
 8004a98:	08007c00 	.word	0x08007c00
 8004a9c:	08007c13 	.word	0x08007c13
 8004aa0:	2000038c 	.word	0x2000038c

08004aa4 <__assert_func>:
 8004aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004aa6:	4614      	mov	r4, r2
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <__assert_func+0x2c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4605      	mov	r5, r0
 8004ab0:	68d8      	ldr	r0, [r3, #12]
 8004ab2:	b14c      	cbz	r4, 8004ac8 <__assert_func+0x24>
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <__assert_func+0x30>)
 8004ab6:	9100      	str	r1, [sp, #0]
 8004ab8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004abc:	4906      	ldr	r1, [pc, #24]	; (8004ad8 <__assert_func+0x34>)
 8004abe:	462b      	mov	r3, r5
 8004ac0:	f000 fe88 	bl	80057d4 <fiprintf>
 8004ac4:	f001 fff0 	bl	8006aa8 <abort>
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <__assert_func+0x38>)
 8004aca:	461c      	mov	r4, r3
 8004acc:	e7f3      	b.n	8004ab6 <__assert_func+0x12>
 8004ace:	bf00      	nop
 8004ad0:	20000014 	.word	0x20000014
 8004ad4:	08007c26 	.word	0x08007c26
 8004ad8:	08007c33 	.word	0x08007c33
 8004adc:	08007c61 	.word	0x08007c61

08004ae0 <quorem>:
 8004ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	6903      	ldr	r3, [r0, #16]
 8004ae6:	690c      	ldr	r4, [r1, #16]
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	4607      	mov	r7, r0
 8004aec:	f2c0 8081 	blt.w	8004bf2 <quorem+0x112>
 8004af0:	3c01      	subs	r4, #1
 8004af2:	f101 0814 	add.w	r8, r1, #20
 8004af6:	f100 0514 	add.w	r5, r0, #20
 8004afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b14:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b18:	d331      	bcc.n	8004b7e <quorem+0x9e>
 8004b1a:	f04f 0e00 	mov.w	lr, #0
 8004b1e:	4640      	mov	r0, r8
 8004b20:	46ac      	mov	ip, r5
 8004b22:	46f2      	mov	sl, lr
 8004b24:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b28:	b293      	uxth	r3, r2
 8004b2a:	fb06 e303 	mla	r3, r6, r3, lr
 8004b2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	ebaa 0303 	sub.w	r3, sl, r3
 8004b38:	f8dc a000 	ldr.w	sl, [ip]
 8004b3c:	0c12      	lsrs	r2, r2, #16
 8004b3e:	fa13 f38a 	uxtah	r3, r3, sl
 8004b42:	fb06 e202 	mla	r2, r6, r2, lr
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	9b00      	ldr	r3, [sp, #0]
 8004b4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b4e:	b292      	uxth	r2, r2
 8004b50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b58:	f8bd 3000 	ldrh.w	r3, [sp]
 8004b5c:	4581      	cmp	r9, r0
 8004b5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b62:	f84c 3b04 	str.w	r3, [ip], #4
 8004b66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b6a:	d2db      	bcs.n	8004b24 <quorem+0x44>
 8004b6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b70:	b92b      	cbnz	r3, 8004b7e <quorem+0x9e>
 8004b72:	9b01      	ldr	r3, [sp, #4]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	429d      	cmp	r5, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	d32e      	bcc.n	8004bda <quorem+0xfa>
 8004b7c:	613c      	str	r4, [r7, #16]
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f001 f9e6 	bl	8005f50 <__mcmp>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	db24      	blt.n	8004bd2 <quorem+0xf2>
 8004b88:	3601      	adds	r6, #1
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f04f 0c00 	mov.w	ip, #0
 8004b90:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b94:	f8d0 e000 	ldr.w	lr, [r0]
 8004b98:	b293      	uxth	r3, r2
 8004b9a:	ebac 0303 	sub.w	r3, ip, r3
 8004b9e:	0c12      	lsrs	r2, r2, #16
 8004ba0:	fa13 f38e 	uxtah	r3, r3, lr
 8004ba4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ba8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bb2:	45c1      	cmp	r9, r8
 8004bb4:	f840 3b04 	str.w	r3, [r0], #4
 8004bb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bbc:	d2e8      	bcs.n	8004b90 <quorem+0xb0>
 8004bbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bc6:	b922      	cbnz	r2, 8004bd2 <quorem+0xf2>
 8004bc8:	3b04      	subs	r3, #4
 8004bca:	429d      	cmp	r5, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	d30a      	bcc.n	8004be6 <quorem+0x106>
 8004bd0:	613c      	str	r4, [r7, #16]
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	b003      	add	sp, #12
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	3b04      	subs	r3, #4
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d1cc      	bne.n	8004b7c <quorem+0x9c>
 8004be2:	3c01      	subs	r4, #1
 8004be4:	e7c7      	b.n	8004b76 <quorem+0x96>
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	3b04      	subs	r3, #4
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	d1f0      	bne.n	8004bd0 <quorem+0xf0>
 8004bee:	3c01      	subs	r4, #1
 8004bf0:	e7eb      	b.n	8004bca <quorem+0xea>
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e7ee      	b.n	8004bd4 <quorem+0xf4>
	...

08004bf8 <_dtoa_r>:
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	ed2d 8b04 	vpush	{d8-d9}
 8004c00:	ec57 6b10 	vmov	r6, r7, d0
 8004c04:	b093      	sub	sp, #76	; 0x4c
 8004c06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c0c:	9106      	str	r1, [sp, #24]
 8004c0e:	ee10 aa10 	vmov	sl, s0
 8004c12:	4604      	mov	r4, r0
 8004c14:	9209      	str	r2, [sp, #36]	; 0x24
 8004c16:	930c      	str	r3, [sp, #48]	; 0x30
 8004c18:	46bb      	mov	fp, r7
 8004c1a:	b975      	cbnz	r5, 8004c3a <_dtoa_r+0x42>
 8004c1c:	2010      	movs	r0, #16
 8004c1e:	f7fe ff49 	bl	8003ab4 <malloc>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6260      	str	r0, [r4, #36]	; 0x24
 8004c26:	b920      	cbnz	r0, 8004c32 <_dtoa_r+0x3a>
 8004c28:	4ba7      	ldr	r3, [pc, #668]	; (8004ec8 <_dtoa_r+0x2d0>)
 8004c2a:	21ea      	movs	r1, #234	; 0xea
 8004c2c:	48a7      	ldr	r0, [pc, #668]	; (8004ecc <_dtoa_r+0x2d4>)
 8004c2e:	f7ff ff39 	bl	8004aa4 <__assert_func>
 8004c32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c36:	6005      	str	r5, [r0, #0]
 8004c38:	60c5      	str	r5, [r0, #12]
 8004c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	b151      	cbz	r1, 8004c56 <_dtoa_r+0x5e>
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	604a      	str	r2, [r1, #4]
 8004c44:	2301      	movs	r3, #1
 8004c46:	4093      	lsls	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f000 ff3e 	bl	8005acc <_Bfree>
 8004c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	1e3b      	subs	r3, r7, #0
 8004c58:	bfaa      	itet	ge
 8004c5a:	2300      	movge	r3, #0
 8004c5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004c60:	f8c8 3000 	strge.w	r3, [r8]
 8004c64:	4b9a      	ldr	r3, [pc, #616]	; (8004ed0 <_dtoa_r+0x2d8>)
 8004c66:	bfbc      	itt	lt
 8004c68:	2201      	movlt	r2, #1
 8004c6a:	f8c8 2000 	strlt.w	r2, [r8]
 8004c6e:	ea33 030b 	bics.w	r3, r3, fp
 8004c72:	d11b      	bne.n	8004cac <_dtoa_r+0xb4>
 8004c74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c76:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c80:	4333      	orrs	r3, r6
 8004c82:	f000 8592 	beq.w	80057aa <_dtoa_r+0xbb2>
 8004c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c88:	b963      	cbnz	r3, 8004ca4 <_dtoa_r+0xac>
 8004c8a:	4b92      	ldr	r3, [pc, #584]	; (8004ed4 <_dtoa_r+0x2dc>)
 8004c8c:	e022      	b.n	8004cd4 <_dtoa_r+0xdc>
 8004c8e:	4b92      	ldr	r3, [pc, #584]	; (8004ed8 <_dtoa_r+0x2e0>)
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	3308      	adds	r3, #8
 8004c94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	9801      	ldr	r0, [sp, #4]
 8004c9a:	b013      	add	sp, #76	; 0x4c
 8004c9c:	ecbd 8b04 	vpop	{d8-d9}
 8004ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca4:	4b8b      	ldr	r3, [pc, #556]	; (8004ed4 <_dtoa_r+0x2dc>)
 8004ca6:	9301      	str	r3, [sp, #4]
 8004ca8:	3303      	adds	r3, #3
 8004caa:	e7f3      	b.n	8004c94 <_dtoa_r+0x9c>
 8004cac:	2200      	movs	r2, #0
 8004cae:	2300      	movs	r3, #0
 8004cb0:	4650      	mov	r0, sl
 8004cb2:	4659      	mov	r1, fp
 8004cb4:	f7fb ff20 	bl	8000af8 <__aeabi_dcmpeq>
 8004cb8:	ec4b ab19 	vmov	d9, sl, fp
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	b158      	cbz	r0, 8004cd8 <_dtoa_r+0xe0>
 8004cc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 856b 	beq.w	80057a4 <_dtoa_r+0xbac>
 8004cce:	4883      	ldr	r0, [pc, #524]	; (8004edc <_dtoa_r+0x2e4>)
 8004cd0:	6018      	str	r0, [r3, #0]
 8004cd2:	1e43      	subs	r3, r0, #1
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	e7df      	b.n	8004c98 <_dtoa_r+0xa0>
 8004cd8:	ec4b ab10 	vmov	d0, sl, fp
 8004cdc:	aa10      	add	r2, sp, #64	; 0x40
 8004cde:	a911      	add	r1, sp, #68	; 0x44
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f001 f9db 	bl	800609c <__d2b>
 8004ce6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004cea:	ee08 0a10 	vmov	s16, r0
 8004cee:	2d00      	cmp	r5, #0
 8004cf0:	f000 8084 	beq.w	8004dfc <_dtoa_r+0x204>
 8004cf4:	ee19 3a90 	vmov	r3, s19
 8004cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d00:	4656      	mov	r6, sl
 8004d02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004d0e:	4b74      	ldr	r3, [pc, #464]	; (8004ee0 <_dtoa_r+0x2e8>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	4630      	mov	r0, r6
 8004d14:	4639      	mov	r1, r7
 8004d16:	f7fb facf 	bl	80002b8 <__aeabi_dsub>
 8004d1a:	a365      	add	r3, pc, #404	; (adr r3, 8004eb0 <_dtoa_r+0x2b8>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fc82 	bl	8000628 <__aeabi_dmul>
 8004d24:	a364      	add	r3, pc, #400	; (adr r3, 8004eb8 <_dtoa_r+0x2c0>)
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f7fb fac7 	bl	80002bc <__adddf3>
 8004d2e:	4606      	mov	r6, r0
 8004d30:	4628      	mov	r0, r5
 8004d32:	460f      	mov	r7, r1
 8004d34:	f7fb fc0e 	bl	8000554 <__aeabi_i2d>
 8004d38:	a361      	add	r3, pc, #388	; (adr r3, 8004ec0 <_dtoa_r+0x2c8>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fc73 	bl	8000628 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4630      	mov	r0, r6
 8004d48:	4639      	mov	r1, r7
 8004d4a:	f7fb fab7 	bl	80002bc <__adddf3>
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460f      	mov	r7, r1
 8004d52:	f7fb ff19 	bl	8000b88 <__aeabi_d2iz>
 8004d56:	2200      	movs	r2, #0
 8004d58:	9000      	str	r0, [sp, #0]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	4639      	mov	r1, r7
 8004d60:	f7fb fed4 	bl	8000b0c <__aeabi_dcmplt>
 8004d64:	b150      	cbz	r0, 8004d7c <_dtoa_r+0x184>
 8004d66:	9800      	ldr	r0, [sp, #0]
 8004d68:	f7fb fbf4 	bl	8000554 <__aeabi_i2d>
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	463b      	mov	r3, r7
 8004d70:	f7fb fec2 	bl	8000af8 <__aeabi_dcmpeq>
 8004d74:	b910      	cbnz	r0, 8004d7c <_dtoa_r+0x184>
 8004d76:	9b00      	ldr	r3, [sp, #0]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	9b00      	ldr	r3, [sp, #0]
 8004d7e:	2b16      	cmp	r3, #22
 8004d80:	d85a      	bhi.n	8004e38 <_dtoa_r+0x240>
 8004d82:	9a00      	ldr	r2, [sp, #0]
 8004d84:	4b57      	ldr	r3, [pc, #348]	; (8004ee4 <_dtoa_r+0x2ec>)
 8004d86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	ec51 0b19 	vmov	r0, r1, d9
 8004d92:	f7fb febb 	bl	8000b0c <__aeabi_dcmplt>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d050      	beq.n	8004e3c <_dtoa_r+0x244>
 8004d9a:	9b00      	ldr	r3, [sp, #0]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2300      	movs	r3, #0
 8004da2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004da6:	1b5d      	subs	r5, r3, r5
 8004da8:	1e6b      	subs	r3, r5, #1
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	bf45      	ittet	mi
 8004dae:	f1c5 0301 	rsbmi	r3, r5, #1
 8004db2:	9304      	strmi	r3, [sp, #16]
 8004db4:	2300      	movpl	r3, #0
 8004db6:	2300      	movmi	r3, #0
 8004db8:	bf4c      	ite	mi
 8004dba:	9305      	strmi	r3, [sp, #20]
 8004dbc:	9304      	strpl	r3, [sp, #16]
 8004dbe:	9b00      	ldr	r3, [sp, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	db3d      	blt.n	8004e40 <_dtoa_r+0x248>
 8004dc4:	9b05      	ldr	r3, [sp, #20]
 8004dc6:	9a00      	ldr	r2, [sp, #0]
 8004dc8:	920a      	str	r2, [sp, #40]	; 0x28
 8004dca:	4413      	add	r3, r2
 8004dcc:	9305      	str	r3, [sp, #20]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9307      	str	r3, [sp, #28]
 8004dd2:	9b06      	ldr	r3, [sp, #24]
 8004dd4:	2b09      	cmp	r3, #9
 8004dd6:	f200 8089 	bhi.w	8004eec <_dtoa_r+0x2f4>
 8004dda:	2b05      	cmp	r3, #5
 8004ddc:	bfc4      	itt	gt
 8004dde:	3b04      	subgt	r3, #4
 8004de0:	9306      	strgt	r3, [sp, #24]
 8004de2:	9b06      	ldr	r3, [sp, #24]
 8004de4:	f1a3 0302 	sub.w	r3, r3, #2
 8004de8:	bfcc      	ite	gt
 8004dea:	2500      	movgt	r5, #0
 8004dec:	2501      	movle	r5, #1
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	f200 8087 	bhi.w	8004f02 <_dtoa_r+0x30a>
 8004df4:	e8df f003 	tbb	[pc, r3]
 8004df8:	59383a2d 	.word	0x59383a2d
 8004dfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004e00:	441d      	add	r5, r3
 8004e02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	bfc1      	itttt	gt
 8004e0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e12:	fa0b f303 	lslgt.w	r3, fp, r3
 8004e16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e1a:	bfda      	itte	le
 8004e1c:	f1c3 0320 	rsble	r3, r3, #32
 8004e20:	fa06 f003 	lslle.w	r0, r6, r3
 8004e24:	4318      	orrgt	r0, r3
 8004e26:	f7fb fb85 	bl	8000534 <__aeabi_ui2d>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e32:	3d01      	subs	r5, #1
 8004e34:	930e      	str	r3, [sp, #56]	; 0x38
 8004e36:	e76a      	b.n	8004d0e <_dtoa_r+0x116>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e7b2      	b.n	8004da2 <_dtoa_r+0x1aa>
 8004e3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e3e:	e7b1      	b.n	8004da4 <_dtoa_r+0x1ac>
 8004e40:	9b04      	ldr	r3, [sp, #16]
 8004e42:	9a00      	ldr	r2, [sp, #0]
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	9304      	str	r3, [sp, #16]
 8004e48:	4253      	negs	r3, r2
 8004e4a:	9307      	str	r3, [sp, #28]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e50:	e7bf      	b.n	8004dd2 <_dtoa_r+0x1da>
 8004e52:	2300      	movs	r3, #0
 8004e54:	9308      	str	r3, [sp, #32]
 8004e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dc55      	bgt.n	8004f08 <_dtoa_r+0x310>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e62:	461a      	mov	r2, r3
 8004e64:	9209      	str	r2, [sp, #36]	; 0x24
 8004e66:	e00c      	b.n	8004e82 <_dtoa_r+0x28a>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e7f3      	b.n	8004e54 <_dtoa_r+0x25c>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e70:	9308      	str	r3, [sp, #32]
 8004e72:	9b00      	ldr	r3, [sp, #0]
 8004e74:	4413      	add	r3, r2
 8004e76:	9302      	str	r3, [sp, #8]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	bfb8      	it	lt
 8004e80:	2301      	movlt	r3, #1
 8004e82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e84:	2200      	movs	r2, #0
 8004e86:	6042      	str	r2, [r0, #4]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	f102 0614 	add.w	r6, r2, #20
 8004e8e:	429e      	cmp	r6, r3
 8004e90:	6841      	ldr	r1, [r0, #4]
 8004e92:	d93d      	bls.n	8004f10 <_dtoa_r+0x318>
 8004e94:	4620      	mov	r0, r4
 8004e96:	f000 fdd9 	bl	8005a4c <_Balloc>
 8004e9a:	9001      	str	r0, [sp, #4]
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d13b      	bne.n	8004f18 <_dtoa_r+0x320>
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <_dtoa_r+0x2f0>)
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ea8:	e6c0      	b.n	8004c2c <_dtoa_r+0x34>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e7df      	b.n	8004e6e <_dtoa_r+0x276>
 8004eae:	bf00      	nop
 8004eb0:	636f4361 	.word	0x636f4361
 8004eb4:	3fd287a7 	.word	0x3fd287a7
 8004eb8:	8b60c8b3 	.word	0x8b60c8b3
 8004ebc:	3fc68a28 	.word	0x3fc68a28
 8004ec0:	509f79fb 	.word	0x509f79fb
 8004ec4:	3fd34413 	.word	0x3fd34413
 8004ec8:	08007ae4 	.word	0x08007ae4
 8004ecc:	08007c6f 	.word	0x08007c6f
 8004ed0:	7ff00000 	.word	0x7ff00000
 8004ed4:	08007c6b 	.word	0x08007c6b
 8004ed8:	08007c62 	.word	0x08007c62
 8004edc:	08007fb7 	.word	0x08007fb7
 8004ee0:	3ff80000 	.word	0x3ff80000
 8004ee4:	08007d60 	.word	0x08007d60
 8004ee8:	08007cca 	.word	0x08007cca
 8004eec:	2501      	movs	r5, #1
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9306      	str	r3, [sp, #24]
 8004ef2:	9508      	str	r5, [sp, #32]
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2312      	movs	r3, #18
 8004f00:	e7b0      	b.n	8004e64 <_dtoa_r+0x26c>
 8004f02:	2301      	movs	r3, #1
 8004f04:	9308      	str	r3, [sp, #32]
 8004f06:	e7f5      	b.n	8004ef4 <_dtoa_r+0x2fc>
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f0e:	e7b8      	b.n	8004e82 <_dtoa_r+0x28a>
 8004f10:	3101      	adds	r1, #1
 8004f12:	6041      	str	r1, [r0, #4]
 8004f14:	0052      	lsls	r2, r2, #1
 8004f16:	e7b8      	b.n	8004e8a <_dtoa_r+0x292>
 8004f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f1a:	9a01      	ldr	r2, [sp, #4]
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	2b0e      	cmp	r3, #14
 8004f22:	f200 809d 	bhi.w	8005060 <_dtoa_r+0x468>
 8004f26:	2d00      	cmp	r5, #0
 8004f28:	f000 809a 	beq.w	8005060 <_dtoa_r+0x468>
 8004f2c:	9b00      	ldr	r3, [sp, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	dd32      	ble.n	8004f98 <_dtoa_r+0x3a0>
 8004f32:	4ab7      	ldr	r2, [pc, #732]	; (8005210 <_dtoa_r+0x618>)
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f40:	9b00      	ldr	r3, [sp, #0]
 8004f42:	05d8      	lsls	r0, r3, #23
 8004f44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004f48:	d516      	bpl.n	8004f78 <_dtoa_r+0x380>
 8004f4a:	4bb2      	ldr	r3, [pc, #712]	; (8005214 <_dtoa_r+0x61c>)
 8004f4c:	ec51 0b19 	vmov	r0, r1, d9
 8004f50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f54:	f7fb fc92 	bl	800087c <__aeabi_ddiv>
 8004f58:	f007 070f 	and.w	r7, r7, #15
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	468b      	mov	fp, r1
 8004f60:	2503      	movs	r5, #3
 8004f62:	4eac      	ldr	r6, [pc, #688]	; (8005214 <_dtoa_r+0x61c>)
 8004f64:	b957      	cbnz	r7, 8004f7c <_dtoa_r+0x384>
 8004f66:	4642      	mov	r2, r8
 8004f68:	464b      	mov	r3, r9
 8004f6a:	4650      	mov	r0, sl
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	f7fb fc85 	bl	800087c <__aeabi_ddiv>
 8004f72:	4682      	mov	sl, r0
 8004f74:	468b      	mov	fp, r1
 8004f76:	e028      	b.n	8004fca <_dtoa_r+0x3d2>
 8004f78:	2502      	movs	r5, #2
 8004f7a:	e7f2      	b.n	8004f62 <_dtoa_r+0x36a>
 8004f7c:	07f9      	lsls	r1, r7, #31
 8004f7e:	d508      	bpl.n	8004f92 <_dtoa_r+0x39a>
 8004f80:	4640      	mov	r0, r8
 8004f82:	4649      	mov	r1, r9
 8004f84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f88:	f7fb fb4e 	bl	8000628 <__aeabi_dmul>
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	4680      	mov	r8, r0
 8004f90:	4689      	mov	r9, r1
 8004f92:	107f      	asrs	r7, r7, #1
 8004f94:	3608      	adds	r6, #8
 8004f96:	e7e5      	b.n	8004f64 <_dtoa_r+0x36c>
 8004f98:	f000 809b 	beq.w	80050d2 <_dtoa_r+0x4da>
 8004f9c:	9b00      	ldr	r3, [sp, #0]
 8004f9e:	4f9d      	ldr	r7, [pc, #628]	; (8005214 <_dtoa_r+0x61c>)
 8004fa0:	425e      	negs	r6, r3
 8004fa2:	4b9b      	ldr	r3, [pc, #620]	; (8005210 <_dtoa_r+0x618>)
 8004fa4:	f006 020f 	and.w	r2, r6, #15
 8004fa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	ec51 0b19 	vmov	r0, r1, d9
 8004fb4:	f7fb fb38 	bl	8000628 <__aeabi_dmul>
 8004fb8:	1136      	asrs	r6, r6, #4
 8004fba:	4682      	mov	sl, r0
 8004fbc:	468b      	mov	fp, r1
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2502      	movs	r5, #2
 8004fc2:	2e00      	cmp	r6, #0
 8004fc4:	d17a      	bne.n	80050bc <_dtoa_r+0x4c4>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1d3      	bne.n	8004f72 <_dtoa_r+0x37a>
 8004fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8082 	beq.w	80050d6 <_dtoa_r+0x4de>
 8004fd2:	4b91      	ldr	r3, [pc, #580]	; (8005218 <_dtoa_r+0x620>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	4650      	mov	r0, sl
 8004fd8:	4659      	mov	r1, fp
 8004fda:	f7fb fd97 	bl	8000b0c <__aeabi_dcmplt>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d079      	beq.n	80050d6 <_dtoa_r+0x4de>
 8004fe2:	9b03      	ldr	r3, [sp, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d076      	beq.n	80050d6 <_dtoa_r+0x4de>
 8004fe8:	9b02      	ldr	r3, [sp, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dd36      	ble.n	800505c <_dtoa_r+0x464>
 8004fee:	9b00      	ldr	r3, [sp, #0]
 8004ff0:	4650      	mov	r0, sl
 8004ff2:	4659      	mov	r1, fp
 8004ff4:	1e5f      	subs	r7, r3, #1
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	4b88      	ldr	r3, [pc, #544]	; (800521c <_dtoa_r+0x624>)
 8004ffa:	f7fb fb15 	bl	8000628 <__aeabi_dmul>
 8004ffe:	9e02      	ldr	r6, [sp, #8]
 8005000:	4682      	mov	sl, r0
 8005002:	468b      	mov	fp, r1
 8005004:	3501      	adds	r5, #1
 8005006:	4628      	mov	r0, r5
 8005008:	f7fb faa4 	bl	8000554 <__aeabi_i2d>
 800500c:	4652      	mov	r2, sl
 800500e:	465b      	mov	r3, fp
 8005010:	f7fb fb0a 	bl	8000628 <__aeabi_dmul>
 8005014:	4b82      	ldr	r3, [pc, #520]	; (8005220 <_dtoa_r+0x628>)
 8005016:	2200      	movs	r2, #0
 8005018:	f7fb f950 	bl	80002bc <__adddf3>
 800501c:	46d0      	mov	r8, sl
 800501e:	46d9      	mov	r9, fp
 8005020:	4682      	mov	sl, r0
 8005022:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005026:	2e00      	cmp	r6, #0
 8005028:	d158      	bne.n	80050dc <_dtoa_r+0x4e4>
 800502a:	4b7e      	ldr	r3, [pc, #504]	; (8005224 <_dtoa_r+0x62c>)
 800502c:	2200      	movs	r2, #0
 800502e:	4640      	mov	r0, r8
 8005030:	4649      	mov	r1, r9
 8005032:	f7fb f941 	bl	80002b8 <__aeabi_dsub>
 8005036:	4652      	mov	r2, sl
 8005038:	465b      	mov	r3, fp
 800503a:	4680      	mov	r8, r0
 800503c:	4689      	mov	r9, r1
 800503e:	f7fb fd83 	bl	8000b48 <__aeabi_dcmpgt>
 8005042:	2800      	cmp	r0, #0
 8005044:	f040 8295 	bne.w	8005572 <_dtoa_r+0x97a>
 8005048:	4652      	mov	r2, sl
 800504a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800504e:	4640      	mov	r0, r8
 8005050:	4649      	mov	r1, r9
 8005052:	f7fb fd5b 	bl	8000b0c <__aeabi_dcmplt>
 8005056:	2800      	cmp	r0, #0
 8005058:	f040 8289 	bne.w	800556e <_dtoa_r+0x976>
 800505c:	ec5b ab19 	vmov	sl, fp, d9
 8005060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005062:	2b00      	cmp	r3, #0
 8005064:	f2c0 8148 	blt.w	80052f8 <_dtoa_r+0x700>
 8005068:	9a00      	ldr	r2, [sp, #0]
 800506a:	2a0e      	cmp	r2, #14
 800506c:	f300 8144 	bgt.w	80052f8 <_dtoa_r+0x700>
 8005070:	4b67      	ldr	r3, [pc, #412]	; (8005210 <_dtoa_r+0x618>)
 8005072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005076:	e9d3 8900 	ldrd	r8, r9, [r3]
 800507a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	f280 80d5 	bge.w	800522c <_dtoa_r+0x634>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f300 80d1 	bgt.w	800522c <_dtoa_r+0x634>
 800508a:	f040 826f 	bne.w	800556c <_dtoa_r+0x974>
 800508e:	4b65      	ldr	r3, [pc, #404]	; (8005224 <_dtoa_r+0x62c>)
 8005090:	2200      	movs	r2, #0
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb fac7 	bl	8000628 <__aeabi_dmul>
 800509a:	4652      	mov	r2, sl
 800509c:	465b      	mov	r3, fp
 800509e:	f7fb fd49 	bl	8000b34 <__aeabi_dcmpge>
 80050a2:	9e03      	ldr	r6, [sp, #12]
 80050a4:	4637      	mov	r7, r6
 80050a6:	2800      	cmp	r0, #0
 80050a8:	f040 8245 	bne.w	8005536 <_dtoa_r+0x93e>
 80050ac:	9d01      	ldr	r5, [sp, #4]
 80050ae:	2331      	movs	r3, #49	; 0x31
 80050b0:	f805 3b01 	strb.w	r3, [r5], #1
 80050b4:	9b00      	ldr	r3, [sp, #0]
 80050b6:	3301      	adds	r3, #1
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	e240      	b.n	800553e <_dtoa_r+0x946>
 80050bc:	07f2      	lsls	r2, r6, #31
 80050be:	d505      	bpl.n	80050cc <_dtoa_r+0x4d4>
 80050c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050c4:	f7fb fab0 	bl	8000628 <__aeabi_dmul>
 80050c8:	3501      	adds	r5, #1
 80050ca:	2301      	movs	r3, #1
 80050cc:	1076      	asrs	r6, r6, #1
 80050ce:	3708      	adds	r7, #8
 80050d0:	e777      	b.n	8004fc2 <_dtoa_r+0x3ca>
 80050d2:	2502      	movs	r5, #2
 80050d4:	e779      	b.n	8004fca <_dtoa_r+0x3d2>
 80050d6:	9f00      	ldr	r7, [sp, #0]
 80050d8:	9e03      	ldr	r6, [sp, #12]
 80050da:	e794      	b.n	8005006 <_dtoa_r+0x40e>
 80050dc:	9901      	ldr	r1, [sp, #4]
 80050de:	4b4c      	ldr	r3, [pc, #304]	; (8005210 <_dtoa_r+0x618>)
 80050e0:	4431      	add	r1, r6
 80050e2:	910d      	str	r1, [sp, #52]	; 0x34
 80050e4:	9908      	ldr	r1, [sp, #32]
 80050e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80050ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d043      	beq.n	800517a <_dtoa_r+0x582>
 80050f2:	494d      	ldr	r1, [pc, #308]	; (8005228 <_dtoa_r+0x630>)
 80050f4:	2000      	movs	r0, #0
 80050f6:	f7fb fbc1 	bl	800087c <__aeabi_ddiv>
 80050fa:	4652      	mov	r2, sl
 80050fc:	465b      	mov	r3, fp
 80050fe:	f7fb f8db 	bl	80002b8 <__aeabi_dsub>
 8005102:	9d01      	ldr	r5, [sp, #4]
 8005104:	4682      	mov	sl, r0
 8005106:	468b      	mov	fp, r1
 8005108:	4649      	mov	r1, r9
 800510a:	4640      	mov	r0, r8
 800510c:	f7fb fd3c 	bl	8000b88 <__aeabi_d2iz>
 8005110:	4606      	mov	r6, r0
 8005112:	f7fb fa1f 	bl	8000554 <__aeabi_i2d>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4640      	mov	r0, r8
 800511c:	4649      	mov	r1, r9
 800511e:	f7fb f8cb 	bl	80002b8 <__aeabi_dsub>
 8005122:	3630      	adds	r6, #48	; 0x30
 8005124:	f805 6b01 	strb.w	r6, [r5], #1
 8005128:	4652      	mov	r2, sl
 800512a:	465b      	mov	r3, fp
 800512c:	4680      	mov	r8, r0
 800512e:	4689      	mov	r9, r1
 8005130:	f7fb fcec 	bl	8000b0c <__aeabi_dcmplt>
 8005134:	2800      	cmp	r0, #0
 8005136:	d163      	bne.n	8005200 <_dtoa_r+0x608>
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	4936      	ldr	r1, [pc, #216]	; (8005218 <_dtoa_r+0x620>)
 800513e:	2000      	movs	r0, #0
 8005140:	f7fb f8ba 	bl	80002b8 <__aeabi_dsub>
 8005144:	4652      	mov	r2, sl
 8005146:	465b      	mov	r3, fp
 8005148:	f7fb fce0 	bl	8000b0c <__aeabi_dcmplt>
 800514c:	2800      	cmp	r0, #0
 800514e:	f040 80b5 	bne.w	80052bc <_dtoa_r+0x6c4>
 8005152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005154:	429d      	cmp	r5, r3
 8005156:	d081      	beq.n	800505c <_dtoa_r+0x464>
 8005158:	4b30      	ldr	r3, [pc, #192]	; (800521c <_dtoa_r+0x624>)
 800515a:	2200      	movs	r2, #0
 800515c:	4650      	mov	r0, sl
 800515e:	4659      	mov	r1, fp
 8005160:	f7fb fa62 	bl	8000628 <__aeabi_dmul>
 8005164:	4b2d      	ldr	r3, [pc, #180]	; (800521c <_dtoa_r+0x624>)
 8005166:	4682      	mov	sl, r0
 8005168:	468b      	mov	fp, r1
 800516a:	4640      	mov	r0, r8
 800516c:	4649      	mov	r1, r9
 800516e:	2200      	movs	r2, #0
 8005170:	f7fb fa5a 	bl	8000628 <__aeabi_dmul>
 8005174:	4680      	mov	r8, r0
 8005176:	4689      	mov	r9, r1
 8005178:	e7c6      	b.n	8005108 <_dtoa_r+0x510>
 800517a:	4650      	mov	r0, sl
 800517c:	4659      	mov	r1, fp
 800517e:	f7fb fa53 	bl	8000628 <__aeabi_dmul>
 8005182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005184:	9d01      	ldr	r5, [sp, #4]
 8005186:	930f      	str	r3, [sp, #60]	; 0x3c
 8005188:	4682      	mov	sl, r0
 800518a:	468b      	mov	fp, r1
 800518c:	4649      	mov	r1, r9
 800518e:	4640      	mov	r0, r8
 8005190:	f7fb fcfa 	bl	8000b88 <__aeabi_d2iz>
 8005194:	4606      	mov	r6, r0
 8005196:	f7fb f9dd 	bl	8000554 <__aeabi_i2d>
 800519a:	3630      	adds	r6, #48	; 0x30
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4640      	mov	r0, r8
 80051a2:	4649      	mov	r1, r9
 80051a4:	f7fb f888 	bl	80002b8 <__aeabi_dsub>
 80051a8:	f805 6b01 	strb.w	r6, [r5], #1
 80051ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051ae:	429d      	cmp	r5, r3
 80051b0:	4680      	mov	r8, r0
 80051b2:	4689      	mov	r9, r1
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	d124      	bne.n	8005204 <_dtoa_r+0x60c>
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <_dtoa_r+0x630>)
 80051bc:	4650      	mov	r0, sl
 80051be:	4659      	mov	r1, fp
 80051c0:	f7fb f87c 	bl	80002bc <__adddf3>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4640      	mov	r0, r8
 80051ca:	4649      	mov	r1, r9
 80051cc:	f7fb fcbc 	bl	8000b48 <__aeabi_dcmpgt>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d173      	bne.n	80052bc <_dtoa_r+0x6c4>
 80051d4:	4652      	mov	r2, sl
 80051d6:	465b      	mov	r3, fp
 80051d8:	4913      	ldr	r1, [pc, #76]	; (8005228 <_dtoa_r+0x630>)
 80051da:	2000      	movs	r0, #0
 80051dc:	f7fb f86c 	bl	80002b8 <__aeabi_dsub>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4640      	mov	r0, r8
 80051e6:	4649      	mov	r1, r9
 80051e8:	f7fb fc90 	bl	8000b0c <__aeabi_dcmplt>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	f43f af35 	beq.w	800505c <_dtoa_r+0x464>
 80051f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80051f4:	1e6b      	subs	r3, r5, #1
 80051f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80051f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051fc:	2b30      	cmp	r3, #48	; 0x30
 80051fe:	d0f8      	beq.n	80051f2 <_dtoa_r+0x5fa>
 8005200:	9700      	str	r7, [sp, #0]
 8005202:	e049      	b.n	8005298 <_dtoa_r+0x6a0>
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <_dtoa_r+0x624>)
 8005206:	f7fb fa0f 	bl	8000628 <__aeabi_dmul>
 800520a:	4680      	mov	r8, r0
 800520c:	4689      	mov	r9, r1
 800520e:	e7bd      	b.n	800518c <_dtoa_r+0x594>
 8005210:	08007d60 	.word	0x08007d60
 8005214:	08007d38 	.word	0x08007d38
 8005218:	3ff00000 	.word	0x3ff00000
 800521c:	40240000 	.word	0x40240000
 8005220:	401c0000 	.word	0x401c0000
 8005224:	40140000 	.word	0x40140000
 8005228:	3fe00000 	.word	0x3fe00000
 800522c:	9d01      	ldr	r5, [sp, #4]
 800522e:	4656      	mov	r6, sl
 8005230:	465f      	mov	r7, fp
 8005232:	4642      	mov	r2, r8
 8005234:	464b      	mov	r3, r9
 8005236:	4630      	mov	r0, r6
 8005238:	4639      	mov	r1, r7
 800523a:	f7fb fb1f 	bl	800087c <__aeabi_ddiv>
 800523e:	f7fb fca3 	bl	8000b88 <__aeabi_d2iz>
 8005242:	4682      	mov	sl, r0
 8005244:	f7fb f986 	bl	8000554 <__aeabi_i2d>
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	f7fb f9ec 	bl	8000628 <__aeabi_dmul>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4630      	mov	r0, r6
 8005256:	4639      	mov	r1, r7
 8005258:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800525c:	f7fb f82c 	bl	80002b8 <__aeabi_dsub>
 8005260:	f805 6b01 	strb.w	r6, [r5], #1
 8005264:	9e01      	ldr	r6, [sp, #4]
 8005266:	9f03      	ldr	r7, [sp, #12]
 8005268:	1bae      	subs	r6, r5, r6
 800526a:	42b7      	cmp	r7, r6
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	d135      	bne.n	80052de <_dtoa_r+0x6e6>
 8005272:	f7fb f823 	bl	80002bc <__adddf3>
 8005276:	4642      	mov	r2, r8
 8005278:	464b      	mov	r3, r9
 800527a:	4606      	mov	r6, r0
 800527c:	460f      	mov	r7, r1
 800527e:	f7fb fc63 	bl	8000b48 <__aeabi_dcmpgt>
 8005282:	b9d0      	cbnz	r0, 80052ba <_dtoa_r+0x6c2>
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	f7fb fc34 	bl	8000af8 <__aeabi_dcmpeq>
 8005290:	b110      	cbz	r0, 8005298 <_dtoa_r+0x6a0>
 8005292:	f01a 0f01 	tst.w	sl, #1
 8005296:	d110      	bne.n	80052ba <_dtoa_r+0x6c2>
 8005298:	4620      	mov	r0, r4
 800529a:	ee18 1a10 	vmov	r1, s16
 800529e:	f000 fc15 	bl	8005acc <_Bfree>
 80052a2:	2300      	movs	r3, #0
 80052a4:	9800      	ldr	r0, [sp, #0]
 80052a6:	702b      	strb	r3, [r5, #0]
 80052a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052aa:	3001      	adds	r0, #1
 80052ac:	6018      	str	r0, [r3, #0]
 80052ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f43f acf1 	beq.w	8004c98 <_dtoa_r+0xa0>
 80052b6:	601d      	str	r5, [r3, #0]
 80052b8:	e4ee      	b.n	8004c98 <_dtoa_r+0xa0>
 80052ba:	9f00      	ldr	r7, [sp, #0]
 80052bc:	462b      	mov	r3, r5
 80052be:	461d      	mov	r5, r3
 80052c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052c4:	2a39      	cmp	r2, #57	; 0x39
 80052c6:	d106      	bne.n	80052d6 <_dtoa_r+0x6de>
 80052c8:	9a01      	ldr	r2, [sp, #4]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d1f7      	bne.n	80052be <_dtoa_r+0x6c6>
 80052ce:	9901      	ldr	r1, [sp, #4]
 80052d0:	2230      	movs	r2, #48	; 0x30
 80052d2:	3701      	adds	r7, #1
 80052d4:	700a      	strb	r2, [r1, #0]
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	3201      	adds	r2, #1
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	e790      	b.n	8005200 <_dtoa_r+0x608>
 80052de:	4ba6      	ldr	r3, [pc, #664]	; (8005578 <_dtoa_r+0x980>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	f7fb f9a1 	bl	8000628 <__aeabi_dmul>
 80052e6:	2200      	movs	r2, #0
 80052e8:	2300      	movs	r3, #0
 80052ea:	4606      	mov	r6, r0
 80052ec:	460f      	mov	r7, r1
 80052ee:	f7fb fc03 	bl	8000af8 <__aeabi_dcmpeq>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d09d      	beq.n	8005232 <_dtoa_r+0x63a>
 80052f6:	e7cf      	b.n	8005298 <_dtoa_r+0x6a0>
 80052f8:	9a08      	ldr	r2, [sp, #32]
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	f000 80d7 	beq.w	80054ae <_dtoa_r+0x8b6>
 8005300:	9a06      	ldr	r2, [sp, #24]
 8005302:	2a01      	cmp	r2, #1
 8005304:	f300 80ba 	bgt.w	800547c <_dtoa_r+0x884>
 8005308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800530a:	2a00      	cmp	r2, #0
 800530c:	f000 80b2 	beq.w	8005474 <_dtoa_r+0x87c>
 8005310:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005314:	9e07      	ldr	r6, [sp, #28]
 8005316:	9d04      	ldr	r5, [sp, #16]
 8005318:	9a04      	ldr	r2, [sp, #16]
 800531a:	441a      	add	r2, r3
 800531c:	9204      	str	r2, [sp, #16]
 800531e:	9a05      	ldr	r2, [sp, #20]
 8005320:	2101      	movs	r1, #1
 8005322:	441a      	add	r2, r3
 8005324:	4620      	mov	r0, r4
 8005326:	9205      	str	r2, [sp, #20]
 8005328:	f000 fc88 	bl	8005c3c <__i2b>
 800532c:	4607      	mov	r7, r0
 800532e:	2d00      	cmp	r5, #0
 8005330:	dd0c      	ble.n	800534c <_dtoa_r+0x754>
 8005332:	9b05      	ldr	r3, [sp, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	dd09      	ble.n	800534c <_dtoa_r+0x754>
 8005338:	42ab      	cmp	r3, r5
 800533a:	9a04      	ldr	r2, [sp, #16]
 800533c:	bfa8      	it	ge
 800533e:	462b      	movge	r3, r5
 8005340:	1ad2      	subs	r2, r2, r3
 8005342:	9204      	str	r2, [sp, #16]
 8005344:	9a05      	ldr	r2, [sp, #20]
 8005346:	1aed      	subs	r5, r5, r3
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	9b07      	ldr	r3, [sp, #28]
 800534e:	b31b      	cbz	r3, 8005398 <_dtoa_r+0x7a0>
 8005350:	9b08      	ldr	r3, [sp, #32]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 80af 	beq.w	80054b6 <_dtoa_r+0x8be>
 8005358:	2e00      	cmp	r6, #0
 800535a:	dd13      	ble.n	8005384 <_dtoa_r+0x78c>
 800535c:	4639      	mov	r1, r7
 800535e:	4632      	mov	r2, r6
 8005360:	4620      	mov	r0, r4
 8005362:	f000 fd2b 	bl	8005dbc <__pow5mult>
 8005366:	ee18 2a10 	vmov	r2, s16
 800536a:	4601      	mov	r1, r0
 800536c:	4607      	mov	r7, r0
 800536e:	4620      	mov	r0, r4
 8005370:	f000 fc7a 	bl	8005c68 <__multiply>
 8005374:	ee18 1a10 	vmov	r1, s16
 8005378:	4680      	mov	r8, r0
 800537a:	4620      	mov	r0, r4
 800537c:	f000 fba6 	bl	8005acc <_Bfree>
 8005380:	ee08 8a10 	vmov	s16, r8
 8005384:	9b07      	ldr	r3, [sp, #28]
 8005386:	1b9a      	subs	r2, r3, r6
 8005388:	d006      	beq.n	8005398 <_dtoa_r+0x7a0>
 800538a:	ee18 1a10 	vmov	r1, s16
 800538e:	4620      	mov	r0, r4
 8005390:	f000 fd14 	bl	8005dbc <__pow5mult>
 8005394:	ee08 0a10 	vmov	s16, r0
 8005398:	2101      	movs	r1, #1
 800539a:	4620      	mov	r0, r4
 800539c:	f000 fc4e 	bl	8005c3c <__i2b>
 80053a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	4606      	mov	r6, r0
 80053a6:	f340 8088 	ble.w	80054ba <_dtoa_r+0x8c2>
 80053aa:	461a      	mov	r2, r3
 80053ac:	4601      	mov	r1, r0
 80053ae:	4620      	mov	r0, r4
 80053b0:	f000 fd04 	bl	8005dbc <__pow5mult>
 80053b4:	9b06      	ldr	r3, [sp, #24]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	4606      	mov	r6, r0
 80053ba:	f340 8081 	ble.w	80054c0 <_dtoa_r+0x8c8>
 80053be:	f04f 0800 	mov.w	r8, #0
 80053c2:	6933      	ldr	r3, [r6, #16]
 80053c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053c8:	6918      	ldr	r0, [r3, #16]
 80053ca:	f000 fbe7 	bl	8005b9c <__hi0bits>
 80053ce:	f1c0 0020 	rsb	r0, r0, #32
 80053d2:	9b05      	ldr	r3, [sp, #20]
 80053d4:	4418      	add	r0, r3
 80053d6:	f010 001f 	ands.w	r0, r0, #31
 80053da:	f000 8092 	beq.w	8005502 <_dtoa_r+0x90a>
 80053de:	f1c0 0320 	rsb	r3, r0, #32
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	f340 808a 	ble.w	80054fc <_dtoa_r+0x904>
 80053e8:	f1c0 001c 	rsb	r0, r0, #28
 80053ec:	9b04      	ldr	r3, [sp, #16]
 80053ee:	4403      	add	r3, r0
 80053f0:	9304      	str	r3, [sp, #16]
 80053f2:	9b05      	ldr	r3, [sp, #20]
 80053f4:	4403      	add	r3, r0
 80053f6:	4405      	add	r5, r0
 80053f8:	9305      	str	r3, [sp, #20]
 80053fa:	9b04      	ldr	r3, [sp, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dd07      	ble.n	8005410 <_dtoa_r+0x818>
 8005400:	ee18 1a10 	vmov	r1, s16
 8005404:	461a      	mov	r2, r3
 8005406:	4620      	mov	r0, r4
 8005408:	f000 fd32 	bl	8005e70 <__lshift>
 800540c:	ee08 0a10 	vmov	s16, r0
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	dd05      	ble.n	8005422 <_dtoa_r+0x82a>
 8005416:	4631      	mov	r1, r6
 8005418:	461a      	mov	r2, r3
 800541a:	4620      	mov	r0, r4
 800541c:	f000 fd28 	bl	8005e70 <__lshift>
 8005420:	4606      	mov	r6, r0
 8005422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d06e      	beq.n	8005506 <_dtoa_r+0x90e>
 8005428:	ee18 0a10 	vmov	r0, s16
 800542c:	4631      	mov	r1, r6
 800542e:	f000 fd8f 	bl	8005f50 <__mcmp>
 8005432:	2800      	cmp	r0, #0
 8005434:	da67      	bge.n	8005506 <_dtoa_r+0x90e>
 8005436:	9b00      	ldr	r3, [sp, #0]
 8005438:	3b01      	subs	r3, #1
 800543a:	ee18 1a10 	vmov	r1, s16
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	220a      	movs	r2, #10
 8005442:	2300      	movs	r3, #0
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fb63 	bl	8005b10 <__multadd>
 800544a:	9b08      	ldr	r3, [sp, #32]
 800544c:	ee08 0a10 	vmov	s16, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 81b1 	beq.w	80057b8 <_dtoa_r+0xbc0>
 8005456:	2300      	movs	r3, #0
 8005458:	4639      	mov	r1, r7
 800545a:	220a      	movs	r2, #10
 800545c:	4620      	mov	r0, r4
 800545e:	f000 fb57 	bl	8005b10 <__multadd>
 8005462:	9b02      	ldr	r3, [sp, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	4607      	mov	r7, r0
 8005468:	f300 808e 	bgt.w	8005588 <_dtoa_r+0x990>
 800546c:	9b06      	ldr	r3, [sp, #24]
 800546e:	2b02      	cmp	r3, #2
 8005470:	dc51      	bgt.n	8005516 <_dtoa_r+0x91e>
 8005472:	e089      	b.n	8005588 <_dtoa_r+0x990>
 8005474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800547a:	e74b      	b.n	8005314 <_dtoa_r+0x71c>
 800547c:	9b03      	ldr	r3, [sp, #12]
 800547e:	1e5e      	subs	r6, r3, #1
 8005480:	9b07      	ldr	r3, [sp, #28]
 8005482:	42b3      	cmp	r3, r6
 8005484:	bfbf      	itttt	lt
 8005486:	9b07      	ldrlt	r3, [sp, #28]
 8005488:	9607      	strlt	r6, [sp, #28]
 800548a:	1af2      	sublt	r2, r6, r3
 800548c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800548e:	bfb6      	itet	lt
 8005490:	189b      	addlt	r3, r3, r2
 8005492:	1b9e      	subge	r6, r3, r6
 8005494:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005496:	9b03      	ldr	r3, [sp, #12]
 8005498:	bfb8      	it	lt
 800549a:	2600      	movlt	r6, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	bfb7      	itett	lt
 80054a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80054a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80054a8:	1a9d      	sublt	r5, r3, r2
 80054aa:	2300      	movlt	r3, #0
 80054ac:	e734      	b.n	8005318 <_dtoa_r+0x720>
 80054ae:	9e07      	ldr	r6, [sp, #28]
 80054b0:	9d04      	ldr	r5, [sp, #16]
 80054b2:	9f08      	ldr	r7, [sp, #32]
 80054b4:	e73b      	b.n	800532e <_dtoa_r+0x736>
 80054b6:	9a07      	ldr	r2, [sp, #28]
 80054b8:	e767      	b.n	800538a <_dtoa_r+0x792>
 80054ba:	9b06      	ldr	r3, [sp, #24]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	dc18      	bgt.n	80054f2 <_dtoa_r+0x8fa>
 80054c0:	f1ba 0f00 	cmp.w	sl, #0
 80054c4:	d115      	bne.n	80054f2 <_dtoa_r+0x8fa>
 80054c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054ca:	b993      	cbnz	r3, 80054f2 <_dtoa_r+0x8fa>
 80054cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054d0:	0d1b      	lsrs	r3, r3, #20
 80054d2:	051b      	lsls	r3, r3, #20
 80054d4:	b183      	cbz	r3, 80054f8 <_dtoa_r+0x900>
 80054d6:	9b04      	ldr	r3, [sp, #16]
 80054d8:	3301      	adds	r3, #1
 80054da:	9304      	str	r3, [sp, #16]
 80054dc:	9b05      	ldr	r3, [sp, #20]
 80054de:	3301      	adds	r3, #1
 80054e0:	9305      	str	r3, [sp, #20]
 80054e2:	f04f 0801 	mov.w	r8, #1
 80054e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f47f af6a 	bne.w	80053c2 <_dtoa_r+0x7ca>
 80054ee:	2001      	movs	r0, #1
 80054f0:	e76f      	b.n	80053d2 <_dtoa_r+0x7da>
 80054f2:	f04f 0800 	mov.w	r8, #0
 80054f6:	e7f6      	b.n	80054e6 <_dtoa_r+0x8ee>
 80054f8:	4698      	mov	r8, r3
 80054fa:	e7f4      	b.n	80054e6 <_dtoa_r+0x8ee>
 80054fc:	f43f af7d 	beq.w	80053fa <_dtoa_r+0x802>
 8005500:	4618      	mov	r0, r3
 8005502:	301c      	adds	r0, #28
 8005504:	e772      	b.n	80053ec <_dtoa_r+0x7f4>
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	dc37      	bgt.n	800557c <_dtoa_r+0x984>
 800550c:	9b06      	ldr	r3, [sp, #24]
 800550e:	2b02      	cmp	r3, #2
 8005510:	dd34      	ble.n	800557c <_dtoa_r+0x984>
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	9302      	str	r3, [sp, #8]
 8005516:	9b02      	ldr	r3, [sp, #8]
 8005518:	b96b      	cbnz	r3, 8005536 <_dtoa_r+0x93e>
 800551a:	4631      	mov	r1, r6
 800551c:	2205      	movs	r2, #5
 800551e:	4620      	mov	r0, r4
 8005520:	f000 faf6 	bl	8005b10 <__multadd>
 8005524:	4601      	mov	r1, r0
 8005526:	4606      	mov	r6, r0
 8005528:	ee18 0a10 	vmov	r0, s16
 800552c:	f000 fd10 	bl	8005f50 <__mcmp>
 8005530:	2800      	cmp	r0, #0
 8005532:	f73f adbb 	bgt.w	80050ac <_dtoa_r+0x4b4>
 8005536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005538:	9d01      	ldr	r5, [sp, #4]
 800553a:	43db      	mvns	r3, r3
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	f04f 0800 	mov.w	r8, #0
 8005542:	4631      	mov	r1, r6
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fac1 	bl	8005acc <_Bfree>
 800554a:	2f00      	cmp	r7, #0
 800554c:	f43f aea4 	beq.w	8005298 <_dtoa_r+0x6a0>
 8005550:	f1b8 0f00 	cmp.w	r8, #0
 8005554:	d005      	beq.n	8005562 <_dtoa_r+0x96a>
 8005556:	45b8      	cmp	r8, r7
 8005558:	d003      	beq.n	8005562 <_dtoa_r+0x96a>
 800555a:	4641      	mov	r1, r8
 800555c:	4620      	mov	r0, r4
 800555e:	f000 fab5 	bl	8005acc <_Bfree>
 8005562:	4639      	mov	r1, r7
 8005564:	4620      	mov	r0, r4
 8005566:	f000 fab1 	bl	8005acc <_Bfree>
 800556a:	e695      	b.n	8005298 <_dtoa_r+0x6a0>
 800556c:	2600      	movs	r6, #0
 800556e:	4637      	mov	r7, r6
 8005570:	e7e1      	b.n	8005536 <_dtoa_r+0x93e>
 8005572:	9700      	str	r7, [sp, #0]
 8005574:	4637      	mov	r7, r6
 8005576:	e599      	b.n	80050ac <_dtoa_r+0x4b4>
 8005578:	40240000 	.word	0x40240000
 800557c:	9b08      	ldr	r3, [sp, #32]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 80ca 	beq.w	8005718 <_dtoa_r+0xb20>
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	9302      	str	r3, [sp, #8]
 8005588:	2d00      	cmp	r5, #0
 800558a:	dd05      	ble.n	8005598 <_dtoa_r+0x9a0>
 800558c:	4639      	mov	r1, r7
 800558e:	462a      	mov	r2, r5
 8005590:	4620      	mov	r0, r4
 8005592:	f000 fc6d 	bl	8005e70 <__lshift>
 8005596:	4607      	mov	r7, r0
 8005598:	f1b8 0f00 	cmp.w	r8, #0
 800559c:	d05b      	beq.n	8005656 <_dtoa_r+0xa5e>
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4620      	mov	r0, r4
 80055a2:	f000 fa53 	bl	8005a4c <_Balloc>
 80055a6:	4605      	mov	r5, r0
 80055a8:	b928      	cbnz	r0, 80055b6 <_dtoa_r+0x9be>
 80055aa:	4b87      	ldr	r3, [pc, #540]	; (80057c8 <_dtoa_r+0xbd0>)
 80055ac:	4602      	mov	r2, r0
 80055ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80055b2:	f7ff bb3b 	b.w	8004c2c <_dtoa_r+0x34>
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	3202      	adds	r2, #2
 80055ba:	0092      	lsls	r2, r2, #2
 80055bc:	f107 010c 	add.w	r1, r7, #12
 80055c0:	300c      	adds	r0, #12
 80055c2:	f000 fa28 	bl	8005a16 <memcpy>
 80055c6:	2201      	movs	r2, #1
 80055c8:	4629      	mov	r1, r5
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 fc50 	bl	8005e70 <__lshift>
 80055d0:	9b01      	ldr	r3, [sp, #4]
 80055d2:	f103 0901 	add.w	r9, r3, #1
 80055d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80055da:	4413      	add	r3, r2
 80055dc:	9305      	str	r3, [sp, #20]
 80055de:	f00a 0301 	and.w	r3, sl, #1
 80055e2:	46b8      	mov	r8, r7
 80055e4:	9304      	str	r3, [sp, #16]
 80055e6:	4607      	mov	r7, r0
 80055e8:	4631      	mov	r1, r6
 80055ea:	ee18 0a10 	vmov	r0, s16
 80055ee:	f7ff fa77 	bl	8004ae0 <quorem>
 80055f2:	4641      	mov	r1, r8
 80055f4:	9002      	str	r0, [sp, #8]
 80055f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80055fa:	ee18 0a10 	vmov	r0, s16
 80055fe:	f000 fca7 	bl	8005f50 <__mcmp>
 8005602:	463a      	mov	r2, r7
 8005604:	9003      	str	r0, [sp, #12]
 8005606:	4631      	mov	r1, r6
 8005608:	4620      	mov	r0, r4
 800560a:	f000 fcbd 	bl	8005f88 <__mdiff>
 800560e:	68c2      	ldr	r2, [r0, #12]
 8005610:	f109 3bff 	add.w	fp, r9, #4294967295
 8005614:	4605      	mov	r5, r0
 8005616:	bb02      	cbnz	r2, 800565a <_dtoa_r+0xa62>
 8005618:	4601      	mov	r1, r0
 800561a:	ee18 0a10 	vmov	r0, s16
 800561e:	f000 fc97 	bl	8005f50 <__mcmp>
 8005622:	4602      	mov	r2, r0
 8005624:	4629      	mov	r1, r5
 8005626:	4620      	mov	r0, r4
 8005628:	9207      	str	r2, [sp, #28]
 800562a:	f000 fa4f 	bl	8005acc <_Bfree>
 800562e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005632:	ea43 0102 	orr.w	r1, r3, r2
 8005636:	9b04      	ldr	r3, [sp, #16]
 8005638:	430b      	orrs	r3, r1
 800563a:	464d      	mov	r5, r9
 800563c:	d10f      	bne.n	800565e <_dtoa_r+0xa66>
 800563e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005642:	d02a      	beq.n	800569a <_dtoa_r+0xaa2>
 8005644:	9b03      	ldr	r3, [sp, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	dd02      	ble.n	8005650 <_dtoa_r+0xa58>
 800564a:	9b02      	ldr	r3, [sp, #8]
 800564c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005650:	f88b a000 	strb.w	sl, [fp]
 8005654:	e775      	b.n	8005542 <_dtoa_r+0x94a>
 8005656:	4638      	mov	r0, r7
 8005658:	e7ba      	b.n	80055d0 <_dtoa_r+0x9d8>
 800565a:	2201      	movs	r2, #1
 800565c:	e7e2      	b.n	8005624 <_dtoa_r+0xa2c>
 800565e:	9b03      	ldr	r3, [sp, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	db04      	blt.n	800566e <_dtoa_r+0xa76>
 8005664:	9906      	ldr	r1, [sp, #24]
 8005666:	430b      	orrs	r3, r1
 8005668:	9904      	ldr	r1, [sp, #16]
 800566a:	430b      	orrs	r3, r1
 800566c:	d122      	bne.n	80056b4 <_dtoa_r+0xabc>
 800566e:	2a00      	cmp	r2, #0
 8005670:	ddee      	ble.n	8005650 <_dtoa_r+0xa58>
 8005672:	ee18 1a10 	vmov	r1, s16
 8005676:	2201      	movs	r2, #1
 8005678:	4620      	mov	r0, r4
 800567a:	f000 fbf9 	bl	8005e70 <__lshift>
 800567e:	4631      	mov	r1, r6
 8005680:	ee08 0a10 	vmov	s16, r0
 8005684:	f000 fc64 	bl	8005f50 <__mcmp>
 8005688:	2800      	cmp	r0, #0
 800568a:	dc03      	bgt.n	8005694 <_dtoa_r+0xa9c>
 800568c:	d1e0      	bne.n	8005650 <_dtoa_r+0xa58>
 800568e:	f01a 0f01 	tst.w	sl, #1
 8005692:	d0dd      	beq.n	8005650 <_dtoa_r+0xa58>
 8005694:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005698:	d1d7      	bne.n	800564a <_dtoa_r+0xa52>
 800569a:	2339      	movs	r3, #57	; 0x39
 800569c:	f88b 3000 	strb.w	r3, [fp]
 80056a0:	462b      	mov	r3, r5
 80056a2:	461d      	mov	r5, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80056aa:	2a39      	cmp	r2, #57	; 0x39
 80056ac:	d071      	beq.n	8005792 <_dtoa_r+0xb9a>
 80056ae:	3201      	adds	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e746      	b.n	8005542 <_dtoa_r+0x94a>
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	dd07      	ble.n	80056c8 <_dtoa_r+0xad0>
 80056b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056bc:	d0ed      	beq.n	800569a <_dtoa_r+0xaa2>
 80056be:	f10a 0301 	add.w	r3, sl, #1
 80056c2:	f88b 3000 	strb.w	r3, [fp]
 80056c6:	e73c      	b.n	8005542 <_dtoa_r+0x94a>
 80056c8:	9b05      	ldr	r3, [sp, #20]
 80056ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80056ce:	4599      	cmp	r9, r3
 80056d0:	d047      	beq.n	8005762 <_dtoa_r+0xb6a>
 80056d2:	ee18 1a10 	vmov	r1, s16
 80056d6:	2300      	movs	r3, #0
 80056d8:	220a      	movs	r2, #10
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 fa18 	bl	8005b10 <__multadd>
 80056e0:	45b8      	cmp	r8, r7
 80056e2:	ee08 0a10 	vmov	s16, r0
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	f04f 020a 	mov.w	r2, #10
 80056ee:	4641      	mov	r1, r8
 80056f0:	4620      	mov	r0, r4
 80056f2:	d106      	bne.n	8005702 <_dtoa_r+0xb0a>
 80056f4:	f000 fa0c 	bl	8005b10 <__multadd>
 80056f8:	4680      	mov	r8, r0
 80056fa:	4607      	mov	r7, r0
 80056fc:	f109 0901 	add.w	r9, r9, #1
 8005700:	e772      	b.n	80055e8 <_dtoa_r+0x9f0>
 8005702:	f000 fa05 	bl	8005b10 <__multadd>
 8005706:	4639      	mov	r1, r7
 8005708:	4680      	mov	r8, r0
 800570a:	2300      	movs	r3, #0
 800570c:	220a      	movs	r2, #10
 800570e:	4620      	mov	r0, r4
 8005710:	f000 f9fe 	bl	8005b10 <__multadd>
 8005714:	4607      	mov	r7, r0
 8005716:	e7f1      	b.n	80056fc <_dtoa_r+0xb04>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	9302      	str	r3, [sp, #8]
 800571c:	9d01      	ldr	r5, [sp, #4]
 800571e:	ee18 0a10 	vmov	r0, s16
 8005722:	4631      	mov	r1, r6
 8005724:	f7ff f9dc 	bl	8004ae0 <quorem>
 8005728:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800572c:	9b01      	ldr	r3, [sp, #4]
 800572e:	f805 ab01 	strb.w	sl, [r5], #1
 8005732:	1aea      	subs	r2, r5, r3
 8005734:	9b02      	ldr	r3, [sp, #8]
 8005736:	4293      	cmp	r3, r2
 8005738:	dd09      	ble.n	800574e <_dtoa_r+0xb56>
 800573a:	ee18 1a10 	vmov	r1, s16
 800573e:	2300      	movs	r3, #0
 8005740:	220a      	movs	r2, #10
 8005742:	4620      	mov	r0, r4
 8005744:	f000 f9e4 	bl	8005b10 <__multadd>
 8005748:	ee08 0a10 	vmov	s16, r0
 800574c:	e7e7      	b.n	800571e <_dtoa_r+0xb26>
 800574e:	9b02      	ldr	r3, [sp, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	bfc8      	it	gt
 8005754:	461d      	movgt	r5, r3
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	bfd8      	it	le
 800575a:	2501      	movle	r5, #1
 800575c:	441d      	add	r5, r3
 800575e:	f04f 0800 	mov.w	r8, #0
 8005762:	ee18 1a10 	vmov	r1, s16
 8005766:	2201      	movs	r2, #1
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fb81 	bl	8005e70 <__lshift>
 800576e:	4631      	mov	r1, r6
 8005770:	ee08 0a10 	vmov	s16, r0
 8005774:	f000 fbec 	bl	8005f50 <__mcmp>
 8005778:	2800      	cmp	r0, #0
 800577a:	dc91      	bgt.n	80056a0 <_dtoa_r+0xaa8>
 800577c:	d102      	bne.n	8005784 <_dtoa_r+0xb8c>
 800577e:	f01a 0f01 	tst.w	sl, #1
 8005782:	d18d      	bne.n	80056a0 <_dtoa_r+0xaa8>
 8005784:	462b      	mov	r3, r5
 8005786:	461d      	mov	r5, r3
 8005788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800578c:	2a30      	cmp	r2, #48	; 0x30
 800578e:	d0fa      	beq.n	8005786 <_dtoa_r+0xb8e>
 8005790:	e6d7      	b.n	8005542 <_dtoa_r+0x94a>
 8005792:	9a01      	ldr	r2, [sp, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d184      	bne.n	80056a2 <_dtoa_r+0xaaa>
 8005798:	9b00      	ldr	r3, [sp, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	2331      	movs	r3, #49	; 0x31
 80057a0:	7013      	strb	r3, [r2, #0]
 80057a2:	e6ce      	b.n	8005542 <_dtoa_r+0x94a>
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <_dtoa_r+0xbd4>)
 80057a6:	f7ff ba95 	b.w	8004cd4 <_dtoa_r+0xdc>
 80057aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f47f aa6e 	bne.w	8004c8e <_dtoa_r+0x96>
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <_dtoa_r+0xbd8>)
 80057b4:	f7ff ba8e 	b.w	8004cd4 <_dtoa_r+0xdc>
 80057b8:	9b02      	ldr	r3, [sp, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dcae      	bgt.n	800571c <_dtoa_r+0xb24>
 80057be:	9b06      	ldr	r3, [sp, #24]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	f73f aea8 	bgt.w	8005516 <_dtoa_r+0x91e>
 80057c6:	e7a9      	b.n	800571c <_dtoa_r+0xb24>
 80057c8:	08007cca 	.word	0x08007cca
 80057cc:	08007fb6 	.word	0x08007fb6
 80057d0:	08007c62 	.word	0x08007c62

080057d4 <fiprintf>:
 80057d4:	b40e      	push	{r1, r2, r3}
 80057d6:	b503      	push	{r0, r1, lr}
 80057d8:	4601      	mov	r1, r0
 80057da:	ab03      	add	r3, sp, #12
 80057dc:	4805      	ldr	r0, [pc, #20]	; (80057f4 <fiprintf+0x20>)
 80057de:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e2:	6800      	ldr	r0, [r0, #0]
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	f000 fe51 	bl	800648c <_vfiprintf_r>
 80057ea:	b002      	add	sp, #8
 80057ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f0:	b003      	add	sp, #12
 80057f2:	4770      	bx	lr
 80057f4:	20000014 	.word	0x20000014

080057f8 <_findenv_r>:
 80057f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800586c <_findenv_r+0x74>
 8005800:	4607      	mov	r7, r0
 8005802:	4689      	mov	r9, r1
 8005804:	4616      	mov	r6, r2
 8005806:	f001 f967 	bl	8006ad8 <__env_lock>
 800580a:	f8da 4000 	ldr.w	r4, [sl]
 800580e:	b134      	cbz	r4, 800581e <_findenv_r+0x26>
 8005810:	464b      	mov	r3, r9
 8005812:	4698      	mov	r8, r3
 8005814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005818:	b13a      	cbz	r2, 800582a <_findenv_r+0x32>
 800581a:	2a3d      	cmp	r2, #61	; 0x3d
 800581c:	d1f9      	bne.n	8005812 <_findenv_r+0x1a>
 800581e:	4638      	mov	r0, r7
 8005820:	f001 f960 	bl	8006ae4 <__env_unlock>
 8005824:	2000      	movs	r0, #0
 8005826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582a:	eba8 0809 	sub.w	r8, r8, r9
 800582e:	46a3      	mov	fp, r4
 8005830:	f854 0b04 	ldr.w	r0, [r4], #4
 8005834:	2800      	cmp	r0, #0
 8005836:	d0f2      	beq.n	800581e <_findenv_r+0x26>
 8005838:	4642      	mov	r2, r8
 800583a:	4649      	mov	r1, r9
 800583c:	f000 ffcf 	bl	80067de <strncmp>
 8005840:	2800      	cmp	r0, #0
 8005842:	d1f4      	bne.n	800582e <_findenv_r+0x36>
 8005844:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005848:	eb03 0508 	add.w	r5, r3, r8
 800584c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8005850:	2b3d      	cmp	r3, #61	; 0x3d
 8005852:	d1ec      	bne.n	800582e <_findenv_r+0x36>
 8005854:	f8da 3000 	ldr.w	r3, [sl]
 8005858:	ebab 0303 	sub.w	r3, fp, r3
 800585c:	109b      	asrs	r3, r3, #2
 800585e:	4638      	mov	r0, r7
 8005860:	6033      	str	r3, [r6, #0]
 8005862:	f001 f93f 	bl	8006ae4 <__env_unlock>
 8005866:	1c68      	adds	r0, r5, #1
 8005868:	e7dd      	b.n	8005826 <_findenv_r+0x2e>
 800586a:	bf00      	nop
 800586c:	20000004 	.word	0x20000004

08005870 <_getenv_r>:
 8005870:	b507      	push	{r0, r1, r2, lr}
 8005872:	aa01      	add	r2, sp, #4
 8005874:	f7ff ffc0 	bl	80057f8 <_findenv_r>
 8005878:	b003      	add	sp, #12
 800587a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005880 <_gettimeofday_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d07      	ldr	r5, [pc, #28]	; (80058a0 <_gettimeofday_r+0x20>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	f002 f863 	bl	8007958 <_gettimeofday>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	d102      	bne.n	800589c <_gettimeofday_r+0x1c>
 8005896:	682b      	ldr	r3, [r5, #0]
 8005898:	b103      	cbz	r3, 800589c <_gettimeofday_r+0x1c>
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	bd38      	pop	{r3, r4, r5, pc}
 800589e:	bf00      	nop
 80058a0:	200003b8 	.word	0x200003b8

080058a4 <__gettzinfo>:
 80058a4:	4800      	ldr	r0, [pc, #0]	; (80058a8 <__gettzinfo+0x4>)
 80058a6:	4770      	bx	lr
 80058a8:	20000080 	.word	0x20000080

080058ac <gmtime_r>:
 80058ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80058b4:	460c      	mov	r4, r1
 80058b6:	4a4f      	ldr	r2, [pc, #316]	; (80059f4 <gmtime_r+0x148>)
 80058b8:	2300      	movs	r3, #0
 80058ba:	4630      	mov	r0, r6
 80058bc:	4639      	mov	r1, r7
 80058be:	f7fb f9db 	bl	8000c78 <__aeabi_ldivmod>
 80058c2:	4639      	mov	r1, r7
 80058c4:	4605      	mov	r5, r0
 80058c6:	4a4b      	ldr	r2, [pc, #300]	; (80059f4 <gmtime_r+0x148>)
 80058c8:	4630      	mov	r0, r6
 80058ca:	2300      	movs	r3, #0
 80058cc:	f7fb f9d4 	bl	8000c78 <__aeabi_ldivmod>
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80058d6:	bfb7      	itett	lt
 80058d8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80058dc:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80058e0:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 80058e4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80058e8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80058ec:	fbb2 f1f0 	udiv	r1, r2, r0
 80058f0:	fb00 2211 	mls	r2, r0, r1, r2
 80058f4:	203c      	movs	r0, #60	; 0x3c
 80058f6:	60a1      	str	r1, [r4, #8]
 80058f8:	fbb2 f1f0 	udiv	r1, r2, r0
 80058fc:	fb00 2211 	mls	r2, r0, r1, r2
 8005900:	6061      	str	r1, [r4, #4]
 8005902:	6022      	str	r2, [r4, #0]
 8005904:	2107      	movs	r1, #7
 8005906:	1cda      	adds	r2, r3, #3
 8005908:	fb92 f1f1 	sdiv	r1, r2, r1
 800590c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005910:	1a52      	subs	r2, r2, r1
 8005912:	bf48      	it	mi
 8005914:	3207      	addmi	r2, #7
 8005916:	4d38      	ldr	r5, [pc, #224]	; (80059f8 <gmtime_r+0x14c>)
 8005918:	4838      	ldr	r0, [pc, #224]	; (80059fc <gmtime_r+0x150>)
 800591a:	61a2      	str	r2, [r4, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	bfb7      	itett	lt
 8005920:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8005924:	fb93 f5f5 	sdivge	r5, r3, r5
 8005928:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800592c:	fb92 f5f5 	sdivlt	r5, r2, r5
 8005930:	fb00 3005 	mla	r0, r0, r5, r3
 8005934:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8005938:	fbb0 f2f2 	udiv	r2, r0, r2
 800593c:	4402      	add	r2, r0
 800593e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8005942:	fbb0 f1f3 	udiv	r1, r0, r3
 8005946:	1a52      	subs	r2, r2, r1
 8005948:	f240 1c6d 	movw	ip, #365	; 0x16d
 800594c:	492c      	ldr	r1, [pc, #176]	; (8005a00 <gmtime_r+0x154>)
 800594e:	fbb0 f1f1 	udiv	r1, r0, r1
 8005952:	2764      	movs	r7, #100	; 0x64
 8005954:	1a52      	subs	r2, r2, r1
 8005956:	fbb2 f1fc 	udiv	r1, r2, ip
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005962:	1af3      	subs	r3, r6, r3
 8005964:	4403      	add	r3, r0
 8005966:	fb0c 3311 	mls	r3, ip, r1, r3
 800596a:	2299      	movs	r2, #153	; 0x99
 800596c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8005970:	f10e 0e02 	add.w	lr, lr, #2
 8005974:	f103 0c01 	add.w	ip, r3, #1
 8005978:	fbbe f0f2 	udiv	r0, lr, r2
 800597c:	4342      	muls	r2, r0
 800597e:	3202      	adds	r2, #2
 8005980:	f04f 0805 	mov.w	r8, #5
 8005984:	fbb2 f2f8 	udiv	r2, r2, r8
 8005988:	ebac 0c02 	sub.w	ip, ip, r2
 800598c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8005990:	4596      	cmp	lr, r2
 8005992:	bf94      	ite	ls
 8005994:	2202      	movls	r2, #2
 8005996:	f06f 0209 	mvnhi.w	r2, #9
 800599a:	4410      	add	r0, r2
 800599c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059a0:	fb02 1505 	mla	r5, r2, r5, r1
 80059a4:	2801      	cmp	r0, #1
 80059a6:	bf98      	it	ls
 80059a8:	3501      	addls	r5, #1
 80059aa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80059ae:	d30d      	bcc.n	80059cc <gmtime_r+0x120>
 80059b0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80059b4:	61e3      	str	r3, [r4, #28]
 80059b6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80059ba:	2300      	movs	r3, #0
 80059bc:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80059c0:	f8c4 c00c 	str.w	ip, [r4, #12]
 80059c4:	6223      	str	r3, [r4, #32]
 80059c6:	4620      	mov	r0, r4
 80059c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059cc:	078a      	lsls	r2, r1, #30
 80059ce:	d102      	bne.n	80059d6 <gmtime_r+0x12a>
 80059d0:	fb07 1616 	mls	r6, r7, r6, r1
 80059d4:	b95e      	cbnz	r6, 80059ee <gmtime_r+0x142>
 80059d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059da:	fbb1 f6f2 	udiv	r6, r1, r2
 80059de:	fb02 1216 	mls	r2, r2, r6, r1
 80059e2:	fab2 f282 	clz	r2, r2
 80059e6:	0952      	lsrs	r2, r2, #5
 80059e8:	333b      	adds	r3, #59	; 0x3b
 80059ea:	4413      	add	r3, r2
 80059ec:	e7e2      	b.n	80059b4 <gmtime_r+0x108>
 80059ee:	2201      	movs	r2, #1
 80059f0:	e7fa      	b.n	80059e8 <gmtime_r+0x13c>
 80059f2:	bf00      	nop
 80059f4:	00015180 	.word	0x00015180
 80059f8:	00023ab1 	.word	0x00023ab1
 80059fc:	fffdc54f 	.word	0xfffdc54f
 8005a00:	00023ab0 	.word	0x00023ab0

08005a04 <_localeconv_r>:
 8005a04:	4800      	ldr	r0, [pc, #0]	; (8005a08 <_localeconv_r+0x4>)
 8005a06:	4770      	bx	lr
 8005a08:	200001c8 	.word	0x200001c8

08005a0c <__retarget_lock_init_recursive>:
 8005a0c:	4770      	bx	lr

08005a0e <__retarget_lock_acquire>:
 8005a0e:	4770      	bx	lr

08005a10 <__retarget_lock_acquire_recursive>:
 8005a10:	4770      	bx	lr

08005a12 <__retarget_lock_release>:
 8005a12:	4770      	bx	lr

08005a14 <__retarget_lock_release_recursive>:
 8005a14:	4770      	bx	lr

08005a16 <memcpy>:
 8005a16:	440a      	add	r2, r1
 8005a18:	4291      	cmp	r1, r2
 8005a1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a1e:	d100      	bne.n	8005a22 <memcpy+0xc>
 8005a20:	4770      	bx	lr
 8005a22:	b510      	push	{r4, lr}
 8005a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2c:	4291      	cmp	r1, r2
 8005a2e:	d1f9      	bne.n	8005a24 <memcpy+0xe>
 8005a30:	bd10      	pop	{r4, pc}
	...

08005a34 <__malloc_lock>:
 8005a34:	4801      	ldr	r0, [pc, #4]	; (8005a3c <__malloc_lock+0x8>)
 8005a36:	f7ff bfeb 	b.w	8005a10 <__retarget_lock_acquire_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	200003b1 	.word	0x200003b1

08005a40 <__malloc_unlock>:
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <__malloc_unlock+0x8>)
 8005a42:	f7ff bfe7 	b.w	8005a14 <__retarget_lock_release_recursive>
 8005a46:	bf00      	nop
 8005a48:	200003b1 	.word	0x200003b1

08005a4c <_Balloc>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a50:	4604      	mov	r4, r0
 8005a52:	460d      	mov	r5, r1
 8005a54:	b976      	cbnz	r6, 8005a74 <_Balloc+0x28>
 8005a56:	2010      	movs	r0, #16
 8005a58:	f7fe f82c 	bl	8003ab4 <malloc>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6260      	str	r0, [r4, #36]	; 0x24
 8005a60:	b920      	cbnz	r0, 8005a6c <_Balloc+0x20>
 8005a62:	4b18      	ldr	r3, [pc, #96]	; (8005ac4 <_Balloc+0x78>)
 8005a64:	4818      	ldr	r0, [pc, #96]	; (8005ac8 <_Balloc+0x7c>)
 8005a66:	2166      	movs	r1, #102	; 0x66
 8005a68:	f7ff f81c 	bl	8004aa4 <__assert_func>
 8005a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a70:	6006      	str	r6, [r0, #0]
 8005a72:	60c6      	str	r6, [r0, #12]
 8005a74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a76:	68f3      	ldr	r3, [r6, #12]
 8005a78:	b183      	cbz	r3, 8005a9c <_Balloc+0x50>
 8005a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a82:	b9b8      	cbnz	r0, 8005ab4 <_Balloc+0x68>
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f605 	lsl.w	r6, r1, r5
 8005a8a:	1d72      	adds	r2, r6, #5
 8005a8c:	0092      	lsls	r2, r2, #2
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 fb60 	bl	8006154 <_calloc_r>
 8005a94:	b160      	cbz	r0, 8005ab0 <_Balloc+0x64>
 8005a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a9a:	e00e      	b.n	8005aba <_Balloc+0x6e>
 8005a9c:	2221      	movs	r2, #33	; 0x21
 8005a9e:	2104      	movs	r1, #4
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 fb57 	bl	8006154 <_calloc_r>
 8005aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa8:	60f0      	str	r0, [r6, #12]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e4      	bne.n	8005a7a <_Balloc+0x2e>
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	6802      	ldr	r2, [r0, #0]
 8005ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aba:	2300      	movs	r3, #0
 8005abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ac0:	e7f7      	b.n	8005ab2 <_Balloc+0x66>
 8005ac2:	bf00      	nop
 8005ac4:	08007ae4 	.word	0x08007ae4
 8005ac8:	08007cdb 	.word	0x08007cdb

08005acc <_Bfree>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b976      	cbnz	r6, 8005af4 <_Bfree+0x28>
 8005ad6:	2010      	movs	r0, #16
 8005ad8:	f7fd ffec 	bl	8003ab4 <malloc>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6268      	str	r0, [r5, #36]	; 0x24
 8005ae0:	b920      	cbnz	r0, 8005aec <_Bfree+0x20>
 8005ae2:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <_Bfree+0x3c>)
 8005ae4:	4809      	ldr	r0, [pc, #36]	; (8005b0c <_Bfree+0x40>)
 8005ae6:	218a      	movs	r1, #138	; 0x8a
 8005ae8:	f7fe ffdc 	bl	8004aa4 <__assert_func>
 8005aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005af0:	6006      	str	r6, [r0, #0]
 8005af2:	60c6      	str	r6, [r0, #12]
 8005af4:	b13c      	cbz	r4, 8005b06 <_Bfree+0x3a>
 8005af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005af8:	6862      	ldr	r2, [r4, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b00:	6021      	str	r1, [r4, #0]
 8005b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	08007ae4 	.word	0x08007ae4
 8005b0c:	08007cdb 	.word	0x08007cdb

08005b10 <__multadd>:
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b14:	690d      	ldr	r5, [r1, #16]
 8005b16:	4607      	mov	r7, r0
 8005b18:	460c      	mov	r4, r1
 8005b1a:	461e      	mov	r6, r3
 8005b1c:	f101 0c14 	add.w	ip, r1, #20
 8005b20:	2000      	movs	r0, #0
 8005b22:	f8dc 3000 	ldr.w	r3, [ip]
 8005b26:	b299      	uxth	r1, r3
 8005b28:	fb02 6101 	mla	r1, r2, r1, r6
 8005b2c:	0c1e      	lsrs	r6, r3, #16
 8005b2e:	0c0b      	lsrs	r3, r1, #16
 8005b30:	fb02 3306 	mla	r3, r2, r6, r3
 8005b34:	b289      	uxth	r1, r1
 8005b36:	3001      	adds	r0, #1
 8005b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b3c:	4285      	cmp	r5, r0
 8005b3e:	f84c 1b04 	str.w	r1, [ip], #4
 8005b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b46:	dcec      	bgt.n	8005b22 <__multadd+0x12>
 8005b48:	b30e      	cbz	r6, 8005b8e <__multadd+0x7e>
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	42ab      	cmp	r3, r5
 8005b4e:	dc19      	bgt.n	8005b84 <__multadd+0x74>
 8005b50:	6861      	ldr	r1, [r4, #4]
 8005b52:	4638      	mov	r0, r7
 8005b54:	3101      	adds	r1, #1
 8005b56:	f7ff ff79 	bl	8005a4c <_Balloc>
 8005b5a:	4680      	mov	r8, r0
 8005b5c:	b928      	cbnz	r0, 8005b6a <__multadd+0x5a>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <__multadd+0x84>)
 8005b62:	480d      	ldr	r0, [pc, #52]	; (8005b98 <__multadd+0x88>)
 8005b64:	21b5      	movs	r1, #181	; 0xb5
 8005b66:	f7fe ff9d 	bl	8004aa4 <__assert_func>
 8005b6a:	6922      	ldr	r2, [r4, #16]
 8005b6c:	3202      	adds	r2, #2
 8005b6e:	f104 010c 	add.w	r1, r4, #12
 8005b72:	0092      	lsls	r2, r2, #2
 8005b74:	300c      	adds	r0, #12
 8005b76:	f7ff ff4e 	bl	8005a16 <memcpy>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7ff ffa5 	bl	8005acc <_Bfree>
 8005b82:	4644      	mov	r4, r8
 8005b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b88:	3501      	adds	r5, #1
 8005b8a:	615e      	str	r6, [r3, #20]
 8005b8c:	6125      	str	r5, [r4, #16]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b94:	08007cca 	.word	0x08007cca
 8005b98:	08007cdb 	.word	0x08007cdb

08005b9c <__hi0bits>:
 8005b9c:	0c03      	lsrs	r3, r0, #16
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	b9d3      	cbnz	r3, 8005bd8 <__hi0bits+0x3c>
 8005ba2:	0400      	lsls	r0, r0, #16
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005baa:	bf04      	itt	eq
 8005bac:	0200      	lsleq	r0, r0, #8
 8005bae:	3308      	addeq	r3, #8
 8005bb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bb4:	bf04      	itt	eq
 8005bb6:	0100      	lsleq	r0, r0, #4
 8005bb8:	3304      	addeq	r3, #4
 8005bba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005bbe:	bf04      	itt	eq
 8005bc0:	0080      	lsleq	r0, r0, #2
 8005bc2:	3302      	addeq	r3, #2
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	db05      	blt.n	8005bd4 <__hi0bits+0x38>
 8005bc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005bcc:	f103 0301 	add.w	r3, r3, #1
 8005bd0:	bf08      	it	eq
 8005bd2:	2320      	moveq	r3, #32
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	4770      	bx	lr
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e7e4      	b.n	8005ba6 <__hi0bits+0xa>

08005bdc <__lo0bits>:
 8005bdc:	6803      	ldr	r3, [r0, #0]
 8005bde:	f013 0207 	ands.w	r2, r3, #7
 8005be2:	4601      	mov	r1, r0
 8005be4:	d00b      	beq.n	8005bfe <__lo0bits+0x22>
 8005be6:	07da      	lsls	r2, r3, #31
 8005be8:	d423      	bmi.n	8005c32 <__lo0bits+0x56>
 8005bea:	0798      	lsls	r0, r3, #30
 8005bec:	bf49      	itett	mi
 8005bee:	085b      	lsrmi	r3, r3, #1
 8005bf0:	089b      	lsrpl	r3, r3, #2
 8005bf2:	2001      	movmi	r0, #1
 8005bf4:	600b      	strmi	r3, [r1, #0]
 8005bf6:	bf5c      	itt	pl
 8005bf8:	600b      	strpl	r3, [r1, #0]
 8005bfa:	2002      	movpl	r0, #2
 8005bfc:	4770      	bx	lr
 8005bfe:	b298      	uxth	r0, r3
 8005c00:	b9a8      	cbnz	r0, 8005c2e <__lo0bits+0x52>
 8005c02:	0c1b      	lsrs	r3, r3, #16
 8005c04:	2010      	movs	r0, #16
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	b90a      	cbnz	r2, 8005c0e <__lo0bits+0x32>
 8005c0a:	3008      	adds	r0, #8
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	071a      	lsls	r2, r3, #28
 8005c10:	bf04      	itt	eq
 8005c12:	091b      	lsreq	r3, r3, #4
 8005c14:	3004      	addeq	r0, #4
 8005c16:	079a      	lsls	r2, r3, #30
 8005c18:	bf04      	itt	eq
 8005c1a:	089b      	lsreq	r3, r3, #2
 8005c1c:	3002      	addeq	r0, #2
 8005c1e:	07da      	lsls	r2, r3, #31
 8005c20:	d403      	bmi.n	8005c2a <__lo0bits+0x4e>
 8005c22:	085b      	lsrs	r3, r3, #1
 8005c24:	f100 0001 	add.w	r0, r0, #1
 8005c28:	d005      	beq.n	8005c36 <__lo0bits+0x5a>
 8005c2a:	600b      	str	r3, [r1, #0]
 8005c2c:	4770      	bx	lr
 8005c2e:	4610      	mov	r0, r2
 8005c30:	e7e9      	b.n	8005c06 <__lo0bits+0x2a>
 8005c32:	2000      	movs	r0, #0
 8005c34:	4770      	bx	lr
 8005c36:	2020      	movs	r0, #32
 8005c38:	4770      	bx	lr
	...

08005c3c <__i2b>:
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	460c      	mov	r4, r1
 8005c40:	2101      	movs	r1, #1
 8005c42:	f7ff ff03 	bl	8005a4c <_Balloc>
 8005c46:	4602      	mov	r2, r0
 8005c48:	b928      	cbnz	r0, 8005c56 <__i2b+0x1a>
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <__i2b+0x24>)
 8005c4c:	4805      	ldr	r0, [pc, #20]	; (8005c64 <__i2b+0x28>)
 8005c4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c52:	f7fe ff27 	bl	8004aa4 <__assert_func>
 8005c56:	2301      	movs	r3, #1
 8005c58:	6144      	str	r4, [r0, #20]
 8005c5a:	6103      	str	r3, [r0, #16]
 8005c5c:	bd10      	pop	{r4, pc}
 8005c5e:	bf00      	nop
 8005c60:	08007cca 	.word	0x08007cca
 8005c64:	08007cdb 	.word	0x08007cdb

08005c68 <__multiply>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	4691      	mov	r9, r2
 8005c6e:	690a      	ldr	r2, [r1, #16]
 8005c70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	bfb8      	it	lt
 8005c78:	460b      	movlt	r3, r1
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	bfbc      	itt	lt
 8005c7e:	464c      	movlt	r4, r9
 8005c80:	4699      	movlt	r9, r3
 8005c82:	6927      	ldr	r7, [r4, #16]
 8005c84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c88:	68a3      	ldr	r3, [r4, #8]
 8005c8a:	6861      	ldr	r1, [r4, #4]
 8005c8c:	eb07 060a 	add.w	r6, r7, sl
 8005c90:	42b3      	cmp	r3, r6
 8005c92:	b085      	sub	sp, #20
 8005c94:	bfb8      	it	lt
 8005c96:	3101      	addlt	r1, #1
 8005c98:	f7ff fed8 	bl	8005a4c <_Balloc>
 8005c9c:	b930      	cbnz	r0, 8005cac <__multiply+0x44>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	4b44      	ldr	r3, [pc, #272]	; (8005db4 <__multiply+0x14c>)
 8005ca2:	4845      	ldr	r0, [pc, #276]	; (8005db8 <__multiply+0x150>)
 8005ca4:	f240 115d 	movw	r1, #349	; 0x15d
 8005ca8:	f7fe fefc 	bl	8004aa4 <__assert_func>
 8005cac:	f100 0514 	add.w	r5, r0, #20
 8005cb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4543      	cmp	r3, r8
 8005cba:	d321      	bcc.n	8005d00 <__multiply+0x98>
 8005cbc:	f104 0314 	add.w	r3, r4, #20
 8005cc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005cc4:	f109 0314 	add.w	r3, r9, #20
 8005cc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ccc:	9202      	str	r2, [sp, #8]
 8005cce:	1b3a      	subs	r2, r7, r4
 8005cd0:	3a15      	subs	r2, #21
 8005cd2:	f022 0203 	bic.w	r2, r2, #3
 8005cd6:	3204      	adds	r2, #4
 8005cd8:	f104 0115 	add.w	r1, r4, #21
 8005cdc:	428f      	cmp	r7, r1
 8005cde:	bf38      	it	cc
 8005ce0:	2204      	movcc	r2, #4
 8005ce2:	9201      	str	r2, [sp, #4]
 8005ce4:	9a02      	ldr	r2, [sp, #8]
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d80c      	bhi.n	8005d06 <__multiply+0x9e>
 8005cec:	2e00      	cmp	r6, #0
 8005cee:	dd03      	ble.n	8005cf8 <__multiply+0x90>
 8005cf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05a      	beq.n	8005dae <__multiply+0x146>
 8005cf8:	6106      	str	r6, [r0, #16]
 8005cfa:	b005      	add	sp, #20
 8005cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d00:	f843 2b04 	str.w	r2, [r3], #4
 8005d04:	e7d8      	b.n	8005cb8 <__multiply+0x50>
 8005d06:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d0a:	f1ba 0f00 	cmp.w	sl, #0
 8005d0e:	d024      	beq.n	8005d5a <__multiply+0xf2>
 8005d10:	f104 0e14 	add.w	lr, r4, #20
 8005d14:	46a9      	mov	r9, r5
 8005d16:	f04f 0c00 	mov.w	ip, #0
 8005d1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d1e:	f8d9 1000 	ldr.w	r1, [r9]
 8005d22:	fa1f fb82 	uxth.w	fp, r2
 8005d26:	b289      	uxth	r1, r1
 8005d28:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d30:	f8d9 2000 	ldr.w	r2, [r9]
 8005d34:	4461      	add	r1, ip
 8005d36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d42:	b289      	uxth	r1, r1
 8005d44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d48:	4577      	cmp	r7, lr
 8005d4a:	f849 1b04 	str.w	r1, [r9], #4
 8005d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d52:	d8e2      	bhi.n	8005d1a <__multiply+0xb2>
 8005d54:	9a01      	ldr	r2, [sp, #4]
 8005d56:	f845 c002 	str.w	ip, [r5, r2]
 8005d5a:	9a03      	ldr	r2, [sp, #12]
 8005d5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d60:	3304      	adds	r3, #4
 8005d62:	f1b9 0f00 	cmp.w	r9, #0
 8005d66:	d020      	beq.n	8005daa <__multiply+0x142>
 8005d68:	6829      	ldr	r1, [r5, #0]
 8005d6a:	f104 0c14 	add.w	ip, r4, #20
 8005d6e:	46ae      	mov	lr, r5
 8005d70:	f04f 0a00 	mov.w	sl, #0
 8005d74:	f8bc b000 	ldrh.w	fp, [ip]
 8005d78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d7c:	fb09 220b 	mla	r2, r9, fp, r2
 8005d80:	4492      	add	sl, r2
 8005d82:	b289      	uxth	r1, r1
 8005d84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005d88:	f84e 1b04 	str.w	r1, [lr], #4
 8005d8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d90:	f8be 1000 	ldrh.w	r1, [lr]
 8005d94:	0c12      	lsrs	r2, r2, #16
 8005d96:	fb09 1102 	mla	r1, r9, r2, r1
 8005d9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d9e:	4567      	cmp	r7, ip
 8005da0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005da4:	d8e6      	bhi.n	8005d74 <__multiply+0x10c>
 8005da6:	9a01      	ldr	r2, [sp, #4]
 8005da8:	50a9      	str	r1, [r5, r2]
 8005daa:	3504      	adds	r5, #4
 8005dac:	e79a      	b.n	8005ce4 <__multiply+0x7c>
 8005dae:	3e01      	subs	r6, #1
 8005db0:	e79c      	b.n	8005cec <__multiply+0x84>
 8005db2:	bf00      	nop
 8005db4:	08007cca 	.word	0x08007cca
 8005db8:	08007cdb 	.word	0x08007cdb

08005dbc <__pow5mult>:
 8005dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc0:	4615      	mov	r5, r2
 8005dc2:	f012 0203 	ands.w	r2, r2, #3
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	460f      	mov	r7, r1
 8005dca:	d007      	beq.n	8005ddc <__pow5mult+0x20>
 8005dcc:	4c25      	ldr	r4, [pc, #148]	; (8005e64 <__pow5mult+0xa8>)
 8005dce:	3a01      	subs	r2, #1
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dd6:	f7ff fe9b 	bl	8005b10 <__multadd>
 8005dda:	4607      	mov	r7, r0
 8005ddc:	10ad      	asrs	r5, r5, #2
 8005dde:	d03d      	beq.n	8005e5c <__pow5mult+0xa0>
 8005de0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005de2:	b97c      	cbnz	r4, 8005e04 <__pow5mult+0x48>
 8005de4:	2010      	movs	r0, #16
 8005de6:	f7fd fe65 	bl	8003ab4 <malloc>
 8005dea:	4602      	mov	r2, r0
 8005dec:	6270      	str	r0, [r6, #36]	; 0x24
 8005dee:	b928      	cbnz	r0, 8005dfc <__pow5mult+0x40>
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <__pow5mult+0xac>)
 8005df2:	481e      	ldr	r0, [pc, #120]	; (8005e6c <__pow5mult+0xb0>)
 8005df4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005df8:	f7fe fe54 	bl	8004aa4 <__assert_func>
 8005dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e00:	6004      	str	r4, [r0, #0]
 8005e02:	60c4      	str	r4, [r0, #12]
 8005e04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e0c:	b94c      	cbnz	r4, 8005e22 <__pow5mult+0x66>
 8005e0e:	f240 2171 	movw	r1, #625	; 0x271
 8005e12:	4630      	mov	r0, r6
 8005e14:	f7ff ff12 	bl	8005c3c <__i2b>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e1e:	4604      	mov	r4, r0
 8005e20:	6003      	str	r3, [r0, #0]
 8005e22:	f04f 0900 	mov.w	r9, #0
 8005e26:	07eb      	lsls	r3, r5, #31
 8005e28:	d50a      	bpl.n	8005e40 <__pow5mult+0x84>
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7ff ff1a 	bl	8005c68 <__multiply>
 8005e34:	4639      	mov	r1, r7
 8005e36:	4680      	mov	r8, r0
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff fe47 	bl	8005acc <_Bfree>
 8005e3e:	4647      	mov	r7, r8
 8005e40:	106d      	asrs	r5, r5, #1
 8005e42:	d00b      	beq.n	8005e5c <__pow5mult+0xa0>
 8005e44:	6820      	ldr	r0, [r4, #0]
 8005e46:	b938      	cbnz	r0, 8005e58 <__pow5mult+0x9c>
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7ff ff0b 	bl	8005c68 <__multiply>
 8005e52:	6020      	str	r0, [r4, #0]
 8005e54:	f8c0 9000 	str.w	r9, [r0]
 8005e58:	4604      	mov	r4, r0
 8005e5a:	e7e4      	b.n	8005e26 <__pow5mult+0x6a>
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e62:	bf00      	nop
 8005e64:	08007e28 	.word	0x08007e28
 8005e68:	08007ae4 	.word	0x08007ae4
 8005e6c:	08007cdb 	.word	0x08007cdb

08005e70 <__lshift>:
 8005e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e74:	460c      	mov	r4, r1
 8005e76:	6849      	ldr	r1, [r1, #4]
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e7e:	68a3      	ldr	r3, [r4, #8]
 8005e80:	4607      	mov	r7, r0
 8005e82:	4691      	mov	r9, r2
 8005e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e88:	f108 0601 	add.w	r6, r8, #1
 8005e8c:	42b3      	cmp	r3, r6
 8005e8e:	db0b      	blt.n	8005ea8 <__lshift+0x38>
 8005e90:	4638      	mov	r0, r7
 8005e92:	f7ff fddb 	bl	8005a4c <_Balloc>
 8005e96:	4605      	mov	r5, r0
 8005e98:	b948      	cbnz	r0, 8005eae <__lshift+0x3e>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	4b2a      	ldr	r3, [pc, #168]	; (8005f48 <__lshift+0xd8>)
 8005e9e:	482b      	ldr	r0, [pc, #172]	; (8005f4c <__lshift+0xdc>)
 8005ea0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ea4:	f7fe fdfe 	bl	8004aa4 <__assert_func>
 8005ea8:	3101      	adds	r1, #1
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	e7ee      	b.n	8005e8c <__lshift+0x1c>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f100 0114 	add.w	r1, r0, #20
 8005eb4:	f100 0210 	add.w	r2, r0, #16
 8005eb8:	4618      	mov	r0, r3
 8005eba:	4553      	cmp	r3, sl
 8005ebc:	db37      	blt.n	8005f2e <__lshift+0xbe>
 8005ebe:	6920      	ldr	r0, [r4, #16]
 8005ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ec4:	f104 0314 	add.w	r3, r4, #20
 8005ec8:	f019 091f 	ands.w	r9, r9, #31
 8005ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ed0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ed4:	d02f      	beq.n	8005f36 <__lshift+0xc6>
 8005ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8005eda:	468a      	mov	sl, r1
 8005edc:	f04f 0c00 	mov.w	ip, #0
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	fa02 f209 	lsl.w	r2, r2, r9
 8005ee6:	ea42 020c 	orr.w	r2, r2, ip
 8005eea:	f84a 2b04 	str.w	r2, [sl], #4
 8005eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef2:	4298      	cmp	r0, r3
 8005ef4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ef8:	d8f2      	bhi.n	8005ee0 <__lshift+0x70>
 8005efa:	1b03      	subs	r3, r0, r4
 8005efc:	3b15      	subs	r3, #21
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	3304      	adds	r3, #4
 8005f04:	f104 0215 	add.w	r2, r4, #21
 8005f08:	4290      	cmp	r0, r2
 8005f0a:	bf38      	it	cc
 8005f0c:	2304      	movcc	r3, #4
 8005f0e:	f841 c003 	str.w	ip, [r1, r3]
 8005f12:	f1bc 0f00 	cmp.w	ip, #0
 8005f16:	d001      	beq.n	8005f1c <__lshift+0xac>
 8005f18:	f108 0602 	add.w	r6, r8, #2
 8005f1c:	3e01      	subs	r6, #1
 8005f1e:	4638      	mov	r0, r7
 8005f20:	612e      	str	r6, [r5, #16]
 8005f22:	4621      	mov	r1, r4
 8005f24:	f7ff fdd2 	bl	8005acc <_Bfree>
 8005f28:	4628      	mov	r0, r5
 8005f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f32:	3301      	adds	r3, #1
 8005f34:	e7c1      	b.n	8005eba <__lshift+0x4a>
 8005f36:	3904      	subs	r1, #4
 8005f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f40:	4298      	cmp	r0, r3
 8005f42:	d8f9      	bhi.n	8005f38 <__lshift+0xc8>
 8005f44:	e7ea      	b.n	8005f1c <__lshift+0xac>
 8005f46:	bf00      	nop
 8005f48:	08007cca 	.word	0x08007cca
 8005f4c:	08007cdb 	.word	0x08007cdb

08005f50 <__mcmp>:
 8005f50:	b530      	push	{r4, r5, lr}
 8005f52:	6902      	ldr	r2, [r0, #16]
 8005f54:	690c      	ldr	r4, [r1, #16]
 8005f56:	1b12      	subs	r2, r2, r4
 8005f58:	d10e      	bne.n	8005f78 <__mcmp+0x28>
 8005f5a:	f100 0314 	add.w	r3, r0, #20
 8005f5e:	3114      	adds	r1, #20
 8005f60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f70:	42a5      	cmp	r5, r4
 8005f72:	d003      	beq.n	8005f7c <__mcmp+0x2c>
 8005f74:	d305      	bcc.n	8005f82 <__mcmp+0x32>
 8005f76:	2201      	movs	r2, #1
 8005f78:	4610      	mov	r0, r2
 8005f7a:	bd30      	pop	{r4, r5, pc}
 8005f7c:	4283      	cmp	r3, r0
 8005f7e:	d3f3      	bcc.n	8005f68 <__mcmp+0x18>
 8005f80:	e7fa      	b.n	8005f78 <__mcmp+0x28>
 8005f82:	f04f 32ff 	mov.w	r2, #4294967295
 8005f86:	e7f7      	b.n	8005f78 <__mcmp+0x28>

08005f88 <__mdiff>:
 8005f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	4606      	mov	r6, r0
 8005f90:	4611      	mov	r1, r2
 8005f92:	4620      	mov	r0, r4
 8005f94:	4690      	mov	r8, r2
 8005f96:	f7ff ffdb 	bl	8005f50 <__mcmp>
 8005f9a:	1e05      	subs	r5, r0, #0
 8005f9c:	d110      	bne.n	8005fc0 <__mdiff+0x38>
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f7ff fd53 	bl	8005a4c <_Balloc>
 8005fa6:	b930      	cbnz	r0, 8005fb6 <__mdiff+0x2e>
 8005fa8:	4b3a      	ldr	r3, [pc, #232]	; (8006094 <__mdiff+0x10c>)
 8005faa:	4602      	mov	r2, r0
 8005fac:	f240 2132 	movw	r1, #562	; 0x232
 8005fb0:	4839      	ldr	r0, [pc, #228]	; (8006098 <__mdiff+0x110>)
 8005fb2:	f7fe fd77 	bl	8004aa4 <__assert_func>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc0:	bfa4      	itt	ge
 8005fc2:	4643      	movge	r3, r8
 8005fc4:	46a0      	movge	r8, r4
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fcc:	bfa6      	itte	ge
 8005fce:	461c      	movge	r4, r3
 8005fd0:	2500      	movge	r5, #0
 8005fd2:	2501      	movlt	r5, #1
 8005fd4:	f7ff fd3a 	bl	8005a4c <_Balloc>
 8005fd8:	b920      	cbnz	r0, 8005fe4 <__mdiff+0x5c>
 8005fda:	4b2e      	ldr	r3, [pc, #184]	; (8006094 <__mdiff+0x10c>)
 8005fdc:	4602      	mov	r2, r0
 8005fde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fe2:	e7e5      	b.n	8005fb0 <__mdiff+0x28>
 8005fe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005fe8:	6926      	ldr	r6, [r4, #16]
 8005fea:	60c5      	str	r5, [r0, #12]
 8005fec:	f104 0914 	add.w	r9, r4, #20
 8005ff0:	f108 0514 	add.w	r5, r8, #20
 8005ff4:	f100 0e14 	add.w	lr, r0, #20
 8005ff8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005ffc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006000:	f108 0210 	add.w	r2, r8, #16
 8006004:	46f2      	mov	sl, lr
 8006006:	2100      	movs	r1, #0
 8006008:	f859 3b04 	ldr.w	r3, [r9], #4
 800600c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006010:	fa1f f883 	uxth.w	r8, r3
 8006014:	fa11 f18b 	uxtah	r1, r1, fp
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	eba1 0808 	sub.w	r8, r1, r8
 800601e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006022:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006026:	fa1f f888 	uxth.w	r8, r8
 800602a:	1419      	asrs	r1, r3, #16
 800602c:	454e      	cmp	r6, r9
 800602e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006032:	f84a 3b04 	str.w	r3, [sl], #4
 8006036:	d8e7      	bhi.n	8006008 <__mdiff+0x80>
 8006038:	1b33      	subs	r3, r6, r4
 800603a:	3b15      	subs	r3, #21
 800603c:	f023 0303 	bic.w	r3, r3, #3
 8006040:	3304      	adds	r3, #4
 8006042:	3415      	adds	r4, #21
 8006044:	42a6      	cmp	r6, r4
 8006046:	bf38      	it	cc
 8006048:	2304      	movcc	r3, #4
 800604a:	441d      	add	r5, r3
 800604c:	4473      	add	r3, lr
 800604e:	469e      	mov	lr, r3
 8006050:	462e      	mov	r6, r5
 8006052:	4566      	cmp	r6, ip
 8006054:	d30e      	bcc.n	8006074 <__mdiff+0xec>
 8006056:	f10c 0203 	add.w	r2, ip, #3
 800605a:	1b52      	subs	r2, r2, r5
 800605c:	f022 0203 	bic.w	r2, r2, #3
 8006060:	3d03      	subs	r5, #3
 8006062:	45ac      	cmp	ip, r5
 8006064:	bf38      	it	cc
 8006066:	2200      	movcc	r2, #0
 8006068:	441a      	add	r2, r3
 800606a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800606e:	b17b      	cbz	r3, 8006090 <__mdiff+0x108>
 8006070:	6107      	str	r7, [r0, #16]
 8006072:	e7a3      	b.n	8005fbc <__mdiff+0x34>
 8006074:	f856 8b04 	ldr.w	r8, [r6], #4
 8006078:	fa11 f288 	uxtah	r2, r1, r8
 800607c:	1414      	asrs	r4, r2, #16
 800607e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006082:	b292      	uxth	r2, r2
 8006084:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006088:	f84e 2b04 	str.w	r2, [lr], #4
 800608c:	1421      	asrs	r1, r4, #16
 800608e:	e7e0      	b.n	8006052 <__mdiff+0xca>
 8006090:	3f01      	subs	r7, #1
 8006092:	e7ea      	b.n	800606a <__mdiff+0xe2>
 8006094:	08007cca 	.word	0x08007cca
 8006098:	08007cdb 	.word	0x08007cdb

0800609c <__d2b>:
 800609c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060a0:	4689      	mov	r9, r1
 80060a2:	2101      	movs	r1, #1
 80060a4:	ec57 6b10 	vmov	r6, r7, d0
 80060a8:	4690      	mov	r8, r2
 80060aa:	f7ff fccf 	bl	8005a4c <_Balloc>
 80060ae:	4604      	mov	r4, r0
 80060b0:	b930      	cbnz	r0, 80060c0 <__d2b+0x24>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4b25      	ldr	r3, [pc, #148]	; (800614c <__d2b+0xb0>)
 80060b6:	4826      	ldr	r0, [pc, #152]	; (8006150 <__d2b+0xb4>)
 80060b8:	f240 310a 	movw	r1, #778	; 0x30a
 80060bc:	f7fe fcf2 	bl	8004aa4 <__assert_func>
 80060c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80060c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060c8:	bb35      	cbnz	r5, 8006118 <__d2b+0x7c>
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	d028      	beq.n	8006122 <__d2b+0x86>
 80060d0:	4668      	mov	r0, sp
 80060d2:	9600      	str	r6, [sp, #0]
 80060d4:	f7ff fd82 	bl	8005bdc <__lo0bits>
 80060d8:	9900      	ldr	r1, [sp, #0]
 80060da:	b300      	cbz	r0, 800611e <__d2b+0x82>
 80060dc:	9a01      	ldr	r2, [sp, #4]
 80060de:	f1c0 0320 	rsb	r3, r0, #32
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	430b      	orrs	r3, r1
 80060e8:	40c2      	lsrs	r2, r0
 80060ea:	6163      	str	r3, [r4, #20]
 80060ec:	9201      	str	r2, [sp, #4]
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	61a3      	str	r3, [r4, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	bf14      	ite	ne
 80060f6:	2202      	movne	r2, #2
 80060f8:	2201      	moveq	r2, #1
 80060fa:	6122      	str	r2, [r4, #16]
 80060fc:	b1d5      	cbz	r5, 8006134 <__d2b+0x98>
 80060fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006102:	4405      	add	r5, r0
 8006104:	f8c9 5000 	str.w	r5, [r9]
 8006108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800610c:	f8c8 0000 	str.w	r0, [r8]
 8006110:	4620      	mov	r0, r4
 8006112:	b003      	add	sp, #12
 8006114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800611c:	e7d5      	b.n	80060ca <__d2b+0x2e>
 800611e:	6161      	str	r1, [r4, #20]
 8006120:	e7e5      	b.n	80060ee <__d2b+0x52>
 8006122:	a801      	add	r0, sp, #4
 8006124:	f7ff fd5a 	bl	8005bdc <__lo0bits>
 8006128:	9b01      	ldr	r3, [sp, #4]
 800612a:	6163      	str	r3, [r4, #20]
 800612c:	2201      	movs	r2, #1
 800612e:	6122      	str	r2, [r4, #16]
 8006130:	3020      	adds	r0, #32
 8006132:	e7e3      	b.n	80060fc <__d2b+0x60>
 8006134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800613c:	f8c9 0000 	str.w	r0, [r9]
 8006140:	6918      	ldr	r0, [r3, #16]
 8006142:	f7ff fd2b 	bl	8005b9c <__hi0bits>
 8006146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800614a:	e7df      	b.n	800610c <__d2b+0x70>
 800614c:	08007cca 	.word	0x08007cca
 8006150:	08007cdb 	.word	0x08007cdb

08006154 <_calloc_r>:
 8006154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006156:	fba1 2402 	umull	r2, r4, r1, r2
 800615a:	b94c      	cbnz	r4, 8006170 <_calloc_r+0x1c>
 800615c:	4611      	mov	r1, r2
 800615e:	9201      	str	r2, [sp, #4]
 8006160:	f7fd fd2c 	bl	8003bbc <_malloc_r>
 8006164:	9a01      	ldr	r2, [sp, #4]
 8006166:	4605      	mov	r5, r0
 8006168:	b930      	cbnz	r0, 8006178 <_calloc_r+0x24>
 800616a:	4628      	mov	r0, r5
 800616c:	b003      	add	sp, #12
 800616e:	bd30      	pop	{r4, r5, pc}
 8006170:	220c      	movs	r2, #12
 8006172:	6002      	str	r2, [r0, #0]
 8006174:	2500      	movs	r5, #0
 8006176:	e7f8      	b.n	800616a <_calloc_r+0x16>
 8006178:	4621      	mov	r1, r4
 800617a:	f7fd fcab 	bl	8003ad4 <memset>
 800617e:	e7f4      	b.n	800616a <_calloc_r+0x16>

08006180 <__ssputs_r>:
 8006180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	688e      	ldr	r6, [r1, #8]
 8006186:	429e      	cmp	r6, r3
 8006188:	4682      	mov	sl, r0
 800618a:	460c      	mov	r4, r1
 800618c:	4690      	mov	r8, r2
 800618e:	461f      	mov	r7, r3
 8006190:	d838      	bhi.n	8006204 <__ssputs_r+0x84>
 8006192:	898a      	ldrh	r2, [r1, #12]
 8006194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006198:	d032      	beq.n	8006200 <__ssputs_r+0x80>
 800619a:	6825      	ldr	r5, [r4, #0]
 800619c:	6909      	ldr	r1, [r1, #16]
 800619e:	eba5 0901 	sub.w	r9, r5, r1
 80061a2:	6965      	ldr	r5, [r4, #20]
 80061a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061ac:	3301      	adds	r3, #1
 80061ae:	444b      	add	r3, r9
 80061b0:	106d      	asrs	r5, r5, #1
 80061b2:	429d      	cmp	r5, r3
 80061b4:	bf38      	it	cc
 80061b6:	461d      	movcc	r5, r3
 80061b8:	0553      	lsls	r3, r2, #21
 80061ba:	d531      	bpl.n	8006220 <__ssputs_r+0xa0>
 80061bc:	4629      	mov	r1, r5
 80061be:	f7fd fcfd 	bl	8003bbc <_malloc_r>
 80061c2:	4606      	mov	r6, r0
 80061c4:	b950      	cbnz	r0, 80061dc <__ssputs_r+0x5c>
 80061c6:	230c      	movs	r3, #12
 80061c8:	f8ca 3000 	str.w	r3, [sl]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061dc:	6921      	ldr	r1, [r4, #16]
 80061de:	464a      	mov	r2, r9
 80061e0:	f7ff fc19 	bl	8005a16 <memcpy>
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	6126      	str	r6, [r4, #16]
 80061f2:	6165      	str	r5, [r4, #20]
 80061f4:	444e      	add	r6, r9
 80061f6:	eba5 0509 	sub.w	r5, r5, r9
 80061fa:	6026      	str	r6, [r4, #0]
 80061fc:	60a5      	str	r5, [r4, #8]
 80061fe:	463e      	mov	r6, r7
 8006200:	42be      	cmp	r6, r7
 8006202:	d900      	bls.n	8006206 <__ssputs_r+0x86>
 8006204:	463e      	mov	r6, r7
 8006206:	6820      	ldr	r0, [r4, #0]
 8006208:	4632      	mov	r2, r6
 800620a:	4641      	mov	r1, r8
 800620c:	f000 feb2 	bl	8006f74 <memmove>
 8006210:	68a3      	ldr	r3, [r4, #8]
 8006212:	1b9b      	subs	r3, r3, r6
 8006214:	60a3      	str	r3, [r4, #8]
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	4433      	add	r3, r6
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	2000      	movs	r0, #0
 800621e:	e7db      	b.n	80061d8 <__ssputs_r+0x58>
 8006220:	462a      	mov	r2, r5
 8006222:	f000 fec1 	bl	8006fa8 <_realloc_r>
 8006226:	4606      	mov	r6, r0
 8006228:	2800      	cmp	r0, #0
 800622a:	d1e1      	bne.n	80061f0 <__ssputs_r+0x70>
 800622c:	6921      	ldr	r1, [r4, #16]
 800622e:	4650      	mov	r0, sl
 8006230:	f7fd fc58 	bl	8003ae4 <_free_r>
 8006234:	e7c7      	b.n	80061c6 <__ssputs_r+0x46>
	...

08006238 <_svfiprintf_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4698      	mov	r8, r3
 800623e:	898b      	ldrh	r3, [r1, #12]
 8006240:	061b      	lsls	r3, r3, #24
 8006242:	b09d      	sub	sp, #116	; 0x74
 8006244:	4607      	mov	r7, r0
 8006246:	460d      	mov	r5, r1
 8006248:	4614      	mov	r4, r2
 800624a:	d50e      	bpl.n	800626a <_svfiprintf_r+0x32>
 800624c:	690b      	ldr	r3, [r1, #16]
 800624e:	b963      	cbnz	r3, 800626a <_svfiprintf_r+0x32>
 8006250:	2140      	movs	r1, #64	; 0x40
 8006252:	f7fd fcb3 	bl	8003bbc <_malloc_r>
 8006256:	6028      	str	r0, [r5, #0]
 8006258:	6128      	str	r0, [r5, #16]
 800625a:	b920      	cbnz	r0, 8006266 <_svfiprintf_r+0x2e>
 800625c:	230c      	movs	r3, #12
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	e0d1      	b.n	800640a <_svfiprintf_r+0x1d2>
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	616b      	str	r3, [r5, #20]
 800626a:	2300      	movs	r3, #0
 800626c:	9309      	str	r3, [sp, #36]	; 0x24
 800626e:	2320      	movs	r3, #32
 8006270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006274:	f8cd 800c 	str.w	r8, [sp, #12]
 8006278:	2330      	movs	r3, #48	; 0x30
 800627a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006424 <_svfiprintf_r+0x1ec>
 800627e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006282:	f04f 0901 	mov.w	r9, #1
 8006286:	4623      	mov	r3, r4
 8006288:	469a      	mov	sl, r3
 800628a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800628e:	b10a      	cbz	r2, 8006294 <_svfiprintf_r+0x5c>
 8006290:	2a25      	cmp	r2, #37	; 0x25
 8006292:	d1f9      	bne.n	8006288 <_svfiprintf_r+0x50>
 8006294:	ebba 0b04 	subs.w	fp, sl, r4
 8006298:	d00b      	beq.n	80062b2 <_svfiprintf_r+0x7a>
 800629a:	465b      	mov	r3, fp
 800629c:	4622      	mov	r2, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ff6d 	bl	8006180 <__ssputs_r>
 80062a6:	3001      	adds	r0, #1
 80062a8:	f000 80aa 	beq.w	8006400 <_svfiprintf_r+0x1c8>
 80062ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ae:	445a      	add	r2, fp
 80062b0:	9209      	str	r2, [sp, #36]	; 0x24
 80062b2:	f89a 3000 	ldrb.w	r3, [sl]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80a2 	beq.w	8006400 <_svfiprintf_r+0x1c8>
 80062bc:	2300      	movs	r3, #0
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c6:	f10a 0a01 	add.w	sl, sl, #1
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	9307      	str	r3, [sp, #28]
 80062ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062d2:	931a      	str	r3, [sp, #104]	; 0x68
 80062d4:	4654      	mov	r4, sl
 80062d6:	2205      	movs	r2, #5
 80062d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062dc:	4851      	ldr	r0, [pc, #324]	; (8006424 <_svfiprintf_r+0x1ec>)
 80062de:	f7f9 ff97 	bl	8000210 <memchr>
 80062e2:	9a04      	ldr	r2, [sp, #16]
 80062e4:	b9d8      	cbnz	r0, 800631e <_svfiprintf_r+0xe6>
 80062e6:	06d0      	lsls	r0, r2, #27
 80062e8:	bf44      	itt	mi
 80062ea:	2320      	movmi	r3, #32
 80062ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f0:	0711      	lsls	r1, r2, #28
 80062f2:	bf44      	itt	mi
 80062f4:	232b      	movmi	r3, #43	; 0x2b
 80062f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062fa:	f89a 3000 	ldrb.w	r3, [sl]
 80062fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006300:	d015      	beq.n	800632e <_svfiprintf_r+0xf6>
 8006302:	9a07      	ldr	r2, [sp, #28]
 8006304:	4654      	mov	r4, sl
 8006306:	2000      	movs	r0, #0
 8006308:	f04f 0c0a 	mov.w	ip, #10
 800630c:	4621      	mov	r1, r4
 800630e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006312:	3b30      	subs	r3, #48	; 0x30
 8006314:	2b09      	cmp	r3, #9
 8006316:	d94e      	bls.n	80063b6 <_svfiprintf_r+0x17e>
 8006318:	b1b0      	cbz	r0, 8006348 <_svfiprintf_r+0x110>
 800631a:	9207      	str	r2, [sp, #28]
 800631c:	e014      	b.n	8006348 <_svfiprintf_r+0x110>
 800631e:	eba0 0308 	sub.w	r3, r0, r8
 8006322:	fa09 f303 	lsl.w	r3, r9, r3
 8006326:	4313      	orrs	r3, r2
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	46a2      	mov	sl, r4
 800632c:	e7d2      	b.n	80062d4 <_svfiprintf_r+0x9c>
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	1d19      	adds	r1, r3, #4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	9103      	str	r1, [sp, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	bfbb      	ittet	lt
 800633a:	425b      	neglt	r3, r3
 800633c:	f042 0202 	orrlt.w	r2, r2, #2
 8006340:	9307      	strge	r3, [sp, #28]
 8006342:	9307      	strlt	r3, [sp, #28]
 8006344:	bfb8      	it	lt
 8006346:	9204      	strlt	r2, [sp, #16]
 8006348:	7823      	ldrb	r3, [r4, #0]
 800634a:	2b2e      	cmp	r3, #46	; 0x2e
 800634c:	d10c      	bne.n	8006368 <_svfiprintf_r+0x130>
 800634e:	7863      	ldrb	r3, [r4, #1]
 8006350:	2b2a      	cmp	r3, #42	; 0x2a
 8006352:	d135      	bne.n	80063c0 <_svfiprintf_r+0x188>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	9203      	str	r2, [sp, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb8      	it	lt
 8006360:	f04f 33ff 	movlt.w	r3, #4294967295
 8006364:	3402      	adds	r4, #2
 8006366:	9305      	str	r3, [sp, #20]
 8006368:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006434 <_svfiprintf_r+0x1fc>
 800636c:	7821      	ldrb	r1, [r4, #0]
 800636e:	2203      	movs	r2, #3
 8006370:	4650      	mov	r0, sl
 8006372:	f7f9 ff4d 	bl	8000210 <memchr>
 8006376:	b140      	cbz	r0, 800638a <_svfiprintf_r+0x152>
 8006378:	2340      	movs	r3, #64	; 0x40
 800637a:	eba0 000a 	sub.w	r0, r0, sl
 800637e:	fa03 f000 	lsl.w	r0, r3, r0
 8006382:	9b04      	ldr	r3, [sp, #16]
 8006384:	4303      	orrs	r3, r0
 8006386:	3401      	adds	r4, #1
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638e:	4826      	ldr	r0, [pc, #152]	; (8006428 <_svfiprintf_r+0x1f0>)
 8006390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006394:	2206      	movs	r2, #6
 8006396:	f7f9 ff3b 	bl	8000210 <memchr>
 800639a:	2800      	cmp	r0, #0
 800639c:	d038      	beq.n	8006410 <_svfiprintf_r+0x1d8>
 800639e:	4b23      	ldr	r3, [pc, #140]	; (800642c <_svfiprintf_r+0x1f4>)
 80063a0:	bb1b      	cbnz	r3, 80063ea <_svfiprintf_r+0x1b2>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	3307      	adds	r3, #7
 80063a6:	f023 0307 	bic.w	r3, r3, #7
 80063aa:	3308      	adds	r3, #8
 80063ac:	9303      	str	r3, [sp, #12]
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	4433      	add	r3, r6
 80063b2:	9309      	str	r3, [sp, #36]	; 0x24
 80063b4:	e767      	b.n	8006286 <_svfiprintf_r+0x4e>
 80063b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ba:	460c      	mov	r4, r1
 80063bc:	2001      	movs	r0, #1
 80063be:	e7a5      	b.n	800630c <_svfiprintf_r+0xd4>
 80063c0:	2300      	movs	r3, #0
 80063c2:	3401      	adds	r4, #1
 80063c4:	9305      	str	r3, [sp, #20]
 80063c6:	4619      	mov	r1, r3
 80063c8:	f04f 0c0a 	mov.w	ip, #10
 80063cc:	4620      	mov	r0, r4
 80063ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d2:	3a30      	subs	r2, #48	; 0x30
 80063d4:	2a09      	cmp	r2, #9
 80063d6:	d903      	bls.n	80063e0 <_svfiprintf_r+0x1a8>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0c5      	beq.n	8006368 <_svfiprintf_r+0x130>
 80063dc:	9105      	str	r1, [sp, #20]
 80063de:	e7c3      	b.n	8006368 <_svfiprintf_r+0x130>
 80063e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e4:	4604      	mov	r4, r0
 80063e6:	2301      	movs	r3, #1
 80063e8:	e7f0      	b.n	80063cc <_svfiprintf_r+0x194>
 80063ea:	ab03      	add	r3, sp, #12
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	462a      	mov	r2, r5
 80063f0:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <_svfiprintf_r+0x1f8>)
 80063f2:	a904      	add	r1, sp, #16
 80063f4:	4638      	mov	r0, r7
 80063f6:	f7fd fcf5 	bl	8003de4 <_printf_float>
 80063fa:	1c42      	adds	r2, r0, #1
 80063fc:	4606      	mov	r6, r0
 80063fe:	d1d6      	bne.n	80063ae <_svfiprintf_r+0x176>
 8006400:	89ab      	ldrh	r3, [r5, #12]
 8006402:	065b      	lsls	r3, r3, #25
 8006404:	f53f af2c 	bmi.w	8006260 <_svfiprintf_r+0x28>
 8006408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800640a:	b01d      	add	sp, #116	; 0x74
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006410:	ab03      	add	r3, sp, #12
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	462a      	mov	r2, r5
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <_svfiprintf_r+0x1f8>)
 8006418:	a904      	add	r1, sp, #16
 800641a:	4638      	mov	r0, r7
 800641c:	f7fd ff86 	bl	800432c <_printf_i>
 8006420:	e7eb      	b.n	80063fa <_svfiprintf_r+0x1c2>
 8006422:	bf00      	nop
 8006424:	08007e34 	.word	0x08007e34
 8006428:	08007e3e 	.word	0x08007e3e
 800642c:	08003de5 	.word	0x08003de5
 8006430:	08006181 	.word	0x08006181
 8006434:	08007e3a 	.word	0x08007e3a

08006438 <__sfputc_r>:
 8006438:	6893      	ldr	r3, [r2, #8]
 800643a:	3b01      	subs	r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	b410      	push	{r4}
 8006440:	6093      	str	r3, [r2, #8]
 8006442:	da08      	bge.n	8006456 <__sfputc_r+0x1e>
 8006444:	6994      	ldr	r4, [r2, #24]
 8006446:	42a3      	cmp	r3, r4
 8006448:	db01      	blt.n	800644e <__sfputc_r+0x16>
 800644a:	290a      	cmp	r1, #10
 800644c:	d103      	bne.n	8006456 <__sfputc_r+0x1e>
 800644e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006452:	f000 ba57 	b.w	8006904 <__swbuf_r>
 8006456:	6813      	ldr	r3, [r2, #0]
 8006458:	1c58      	adds	r0, r3, #1
 800645a:	6010      	str	r0, [r2, #0]
 800645c:	7019      	strb	r1, [r3, #0]
 800645e:	4608      	mov	r0, r1
 8006460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006464:	4770      	bx	lr

08006466 <__sfputs_r>:
 8006466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006468:	4606      	mov	r6, r0
 800646a:	460f      	mov	r7, r1
 800646c:	4614      	mov	r4, r2
 800646e:	18d5      	adds	r5, r2, r3
 8006470:	42ac      	cmp	r4, r5
 8006472:	d101      	bne.n	8006478 <__sfputs_r+0x12>
 8006474:	2000      	movs	r0, #0
 8006476:	e007      	b.n	8006488 <__sfputs_r+0x22>
 8006478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647c:	463a      	mov	r2, r7
 800647e:	4630      	mov	r0, r6
 8006480:	f7ff ffda 	bl	8006438 <__sfputc_r>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d1f3      	bne.n	8006470 <__sfputs_r+0xa>
 8006488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800648c <_vfiprintf_r>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	460d      	mov	r5, r1
 8006492:	b09d      	sub	sp, #116	; 0x74
 8006494:	4614      	mov	r4, r2
 8006496:	4698      	mov	r8, r3
 8006498:	4606      	mov	r6, r0
 800649a:	b118      	cbz	r0, 80064a4 <_vfiprintf_r+0x18>
 800649c:	6983      	ldr	r3, [r0, #24]
 800649e:	b90b      	cbnz	r3, 80064a4 <_vfiprintf_r+0x18>
 80064a0:	f000 fc40 	bl	8006d24 <__sinit>
 80064a4:	4b89      	ldr	r3, [pc, #548]	; (80066cc <_vfiprintf_r+0x240>)
 80064a6:	429d      	cmp	r5, r3
 80064a8:	d11b      	bne.n	80064e2 <_vfiprintf_r+0x56>
 80064aa:	6875      	ldr	r5, [r6, #4]
 80064ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ae:	07d9      	lsls	r1, r3, #31
 80064b0:	d405      	bmi.n	80064be <_vfiprintf_r+0x32>
 80064b2:	89ab      	ldrh	r3, [r5, #12]
 80064b4:	059a      	lsls	r2, r3, #22
 80064b6:	d402      	bmi.n	80064be <_vfiprintf_r+0x32>
 80064b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064ba:	f7ff faa9 	bl	8005a10 <__retarget_lock_acquire_recursive>
 80064be:	89ab      	ldrh	r3, [r5, #12]
 80064c0:	071b      	lsls	r3, r3, #28
 80064c2:	d501      	bpl.n	80064c8 <_vfiprintf_r+0x3c>
 80064c4:	692b      	ldr	r3, [r5, #16]
 80064c6:	b9eb      	cbnz	r3, 8006504 <_vfiprintf_r+0x78>
 80064c8:	4629      	mov	r1, r5
 80064ca:	4630      	mov	r0, r6
 80064cc:	f000 fa7e 	bl	80069cc <__swsetup_r>
 80064d0:	b1c0      	cbz	r0, 8006504 <_vfiprintf_r+0x78>
 80064d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064d4:	07dc      	lsls	r4, r3, #31
 80064d6:	d50e      	bpl.n	80064f6 <_vfiprintf_r+0x6a>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	b01d      	add	sp, #116	; 0x74
 80064de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e2:	4b7b      	ldr	r3, [pc, #492]	; (80066d0 <_vfiprintf_r+0x244>)
 80064e4:	429d      	cmp	r5, r3
 80064e6:	d101      	bne.n	80064ec <_vfiprintf_r+0x60>
 80064e8:	68b5      	ldr	r5, [r6, #8]
 80064ea:	e7df      	b.n	80064ac <_vfiprintf_r+0x20>
 80064ec:	4b79      	ldr	r3, [pc, #484]	; (80066d4 <_vfiprintf_r+0x248>)
 80064ee:	429d      	cmp	r5, r3
 80064f0:	bf08      	it	eq
 80064f2:	68f5      	ldreq	r5, [r6, #12]
 80064f4:	e7da      	b.n	80064ac <_vfiprintf_r+0x20>
 80064f6:	89ab      	ldrh	r3, [r5, #12]
 80064f8:	0598      	lsls	r0, r3, #22
 80064fa:	d4ed      	bmi.n	80064d8 <_vfiprintf_r+0x4c>
 80064fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064fe:	f7ff fa89 	bl	8005a14 <__retarget_lock_release_recursive>
 8006502:	e7e9      	b.n	80064d8 <_vfiprintf_r+0x4c>
 8006504:	2300      	movs	r3, #0
 8006506:	9309      	str	r3, [sp, #36]	; 0x24
 8006508:	2320      	movs	r3, #32
 800650a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800650e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006512:	2330      	movs	r3, #48	; 0x30
 8006514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80066d8 <_vfiprintf_r+0x24c>
 8006518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800651c:	f04f 0901 	mov.w	r9, #1
 8006520:	4623      	mov	r3, r4
 8006522:	469a      	mov	sl, r3
 8006524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006528:	b10a      	cbz	r2, 800652e <_vfiprintf_r+0xa2>
 800652a:	2a25      	cmp	r2, #37	; 0x25
 800652c:	d1f9      	bne.n	8006522 <_vfiprintf_r+0x96>
 800652e:	ebba 0b04 	subs.w	fp, sl, r4
 8006532:	d00b      	beq.n	800654c <_vfiprintf_r+0xc0>
 8006534:	465b      	mov	r3, fp
 8006536:	4622      	mov	r2, r4
 8006538:	4629      	mov	r1, r5
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ff93 	bl	8006466 <__sfputs_r>
 8006540:	3001      	adds	r0, #1
 8006542:	f000 80aa 	beq.w	800669a <_vfiprintf_r+0x20e>
 8006546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006548:	445a      	add	r2, fp
 800654a:	9209      	str	r2, [sp, #36]	; 0x24
 800654c:	f89a 3000 	ldrb.w	r3, [sl]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80a2 	beq.w	800669a <_vfiprintf_r+0x20e>
 8006556:	2300      	movs	r3, #0
 8006558:	f04f 32ff 	mov.w	r2, #4294967295
 800655c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006560:	f10a 0a01 	add.w	sl, sl, #1
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	9307      	str	r3, [sp, #28]
 8006568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800656c:	931a      	str	r3, [sp, #104]	; 0x68
 800656e:	4654      	mov	r4, sl
 8006570:	2205      	movs	r2, #5
 8006572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006576:	4858      	ldr	r0, [pc, #352]	; (80066d8 <_vfiprintf_r+0x24c>)
 8006578:	f7f9 fe4a 	bl	8000210 <memchr>
 800657c:	9a04      	ldr	r2, [sp, #16]
 800657e:	b9d8      	cbnz	r0, 80065b8 <_vfiprintf_r+0x12c>
 8006580:	06d1      	lsls	r1, r2, #27
 8006582:	bf44      	itt	mi
 8006584:	2320      	movmi	r3, #32
 8006586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800658a:	0713      	lsls	r3, r2, #28
 800658c:	bf44      	itt	mi
 800658e:	232b      	movmi	r3, #43	; 0x2b
 8006590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006594:	f89a 3000 	ldrb.w	r3, [sl]
 8006598:	2b2a      	cmp	r3, #42	; 0x2a
 800659a:	d015      	beq.n	80065c8 <_vfiprintf_r+0x13c>
 800659c:	9a07      	ldr	r2, [sp, #28]
 800659e:	4654      	mov	r4, sl
 80065a0:	2000      	movs	r0, #0
 80065a2:	f04f 0c0a 	mov.w	ip, #10
 80065a6:	4621      	mov	r1, r4
 80065a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ac:	3b30      	subs	r3, #48	; 0x30
 80065ae:	2b09      	cmp	r3, #9
 80065b0:	d94e      	bls.n	8006650 <_vfiprintf_r+0x1c4>
 80065b2:	b1b0      	cbz	r0, 80065e2 <_vfiprintf_r+0x156>
 80065b4:	9207      	str	r2, [sp, #28]
 80065b6:	e014      	b.n	80065e2 <_vfiprintf_r+0x156>
 80065b8:	eba0 0308 	sub.w	r3, r0, r8
 80065bc:	fa09 f303 	lsl.w	r3, r9, r3
 80065c0:	4313      	orrs	r3, r2
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	46a2      	mov	sl, r4
 80065c6:	e7d2      	b.n	800656e <_vfiprintf_r+0xe2>
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	1d19      	adds	r1, r3, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	9103      	str	r1, [sp, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bfbb      	ittet	lt
 80065d4:	425b      	neglt	r3, r3
 80065d6:	f042 0202 	orrlt.w	r2, r2, #2
 80065da:	9307      	strge	r3, [sp, #28]
 80065dc:	9307      	strlt	r3, [sp, #28]
 80065de:	bfb8      	it	lt
 80065e0:	9204      	strlt	r2, [sp, #16]
 80065e2:	7823      	ldrb	r3, [r4, #0]
 80065e4:	2b2e      	cmp	r3, #46	; 0x2e
 80065e6:	d10c      	bne.n	8006602 <_vfiprintf_r+0x176>
 80065e8:	7863      	ldrb	r3, [r4, #1]
 80065ea:	2b2a      	cmp	r3, #42	; 0x2a
 80065ec:	d135      	bne.n	800665a <_vfiprintf_r+0x1ce>
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	1d1a      	adds	r2, r3, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	9203      	str	r2, [sp, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfb8      	it	lt
 80065fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80065fe:	3402      	adds	r4, #2
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80066e8 <_vfiprintf_r+0x25c>
 8006606:	7821      	ldrb	r1, [r4, #0]
 8006608:	2203      	movs	r2, #3
 800660a:	4650      	mov	r0, sl
 800660c:	f7f9 fe00 	bl	8000210 <memchr>
 8006610:	b140      	cbz	r0, 8006624 <_vfiprintf_r+0x198>
 8006612:	2340      	movs	r3, #64	; 0x40
 8006614:	eba0 000a 	sub.w	r0, r0, sl
 8006618:	fa03 f000 	lsl.w	r0, r3, r0
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	4303      	orrs	r3, r0
 8006620:	3401      	adds	r4, #1
 8006622:	9304      	str	r3, [sp, #16]
 8006624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006628:	482c      	ldr	r0, [pc, #176]	; (80066dc <_vfiprintf_r+0x250>)
 800662a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800662e:	2206      	movs	r2, #6
 8006630:	f7f9 fdee 	bl	8000210 <memchr>
 8006634:	2800      	cmp	r0, #0
 8006636:	d03f      	beq.n	80066b8 <_vfiprintf_r+0x22c>
 8006638:	4b29      	ldr	r3, [pc, #164]	; (80066e0 <_vfiprintf_r+0x254>)
 800663a:	bb1b      	cbnz	r3, 8006684 <_vfiprintf_r+0x1f8>
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	3307      	adds	r3, #7
 8006640:	f023 0307 	bic.w	r3, r3, #7
 8006644:	3308      	adds	r3, #8
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664a:	443b      	add	r3, r7
 800664c:	9309      	str	r3, [sp, #36]	; 0x24
 800664e:	e767      	b.n	8006520 <_vfiprintf_r+0x94>
 8006650:	fb0c 3202 	mla	r2, ip, r2, r3
 8006654:	460c      	mov	r4, r1
 8006656:	2001      	movs	r0, #1
 8006658:	e7a5      	b.n	80065a6 <_vfiprintf_r+0x11a>
 800665a:	2300      	movs	r3, #0
 800665c:	3401      	adds	r4, #1
 800665e:	9305      	str	r3, [sp, #20]
 8006660:	4619      	mov	r1, r3
 8006662:	f04f 0c0a 	mov.w	ip, #10
 8006666:	4620      	mov	r0, r4
 8006668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800666c:	3a30      	subs	r2, #48	; 0x30
 800666e:	2a09      	cmp	r2, #9
 8006670:	d903      	bls.n	800667a <_vfiprintf_r+0x1ee>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0c5      	beq.n	8006602 <_vfiprintf_r+0x176>
 8006676:	9105      	str	r1, [sp, #20]
 8006678:	e7c3      	b.n	8006602 <_vfiprintf_r+0x176>
 800667a:	fb0c 2101 	mla	r1, ip, r1, r2
 800667e:	4604      	mov	r4, r0
 8006680:	2301      	movs	r3, #1
 8006682:	e7f0      	b.n	8006666 <_vfiprintf_r+0x1da>
 8006684:	ab03      	add	r3, sp, #12
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	462a      	mov	r2, r5
 800668a:	4b16      	ldr	r3, [pc, #88]	; (80066e4 <_vfiprintf_r+0x258>)
 800668c:	a904      	add	r1, sp, #16
 800668e:	4630      	mov	r0, r6
 8006690:	f7fd fba8 	bl	8003de4 <_printf_float>
 8006694:	4607      	mov	r7, r0
 8006696:	1c78      	adds	r0, r7, #1
 8006698:	d1d6      	bne.n	8006648 <_vfiprintf_r+0x1bc>
 800669a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800669c:	07d9      	lsls	r1, r3, #31
 800669e:	d405      	bmi.n	80066ac <_vfiprintf_r+0x220>
 80066a0:	89ab      	ldrh	r3, [r5, #12]
 80066a2:	059a      	lsls	r2, r3, #22
 80066a4:	d402      	bmi.n	80066ac <_vfiprintf_r+0x220>
 80066a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066a8:	f7ff f9b4 	bl	8005a14 <__retarget_lock_release_recursive>
 80066ac:	89ab      	ldrh	r3, [r5, #12]
 80066ae:	065b      	lsls	r3, r3, #25
 80066b0:	f53f af12 	bmi.w	80064d8 <_vfiprintf_r+0x4c>
 80066b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066b6:	e711      	b.n	80064dc <_vfiprintf_r+0x50>
 80066b8:	ab03      	add	r3, sp, #12
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	462a      	mov	r2, r5
 80066be:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <_vfiprintf_r+0x258>)
 80066c0:	a904      	add	r1, sp, #16
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7fd fe32 	bl	800432c <_printf_i>
 80066c8:	e7e4      	b.n	8006694 <_vfiprintf_r+0x208>
 80066ca:	bf00      	nop
 80066cc:	08007f68 	.word	0x08007f68
 80066d0:	08007f88 	.word	0x08007f88
 80066d4:	08007f48 	.word	0x08007f48
 80066d8:	08007e34 	.word	0x08007e34
 80066dc:	08007e3e 	.word	0x08007e3e
 80066e0:	08003de5 	.word	0x08003de5
 80066e4:	08006467 	.word	0x08006467
 80066e8:	08007e3a 	.word	0x08007e3a

080066ec <siscanf>:
 80066ec:	b40e      	push	{r1, r2, r3}
 80066ee:	b510      	push	{r4, lr}
 80066f0:	b09f      	sub	sp, #124	; 0x7c
 80066f2:	ac21      	add	r4, sp, #132	; 0x84
 80066f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80066f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80066fc:	9201      	str	r2, [sp, #4]
 80066fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006702:	9004      	str	r0, [sp, #16]
 8006704:	9008      	str	r0, [sp, #32]
 8006706:	f7f9 fd75 	bl	80001f4 <strlen>
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <siscanf+0x50>)
 800670c:	9005      	str	r0, [sp, #20]
 800670e:	9009      	str	r0, [sp, #36]	; 0x24
 8006710:	930d      	str	r3, [sp, #52]	; 0x34
 8006712:	480b      	ldr	r0, [pc, #44]	; (8006740 <siscanf+0x54>)
 8006714:	9a01      	ldr	r2, [sp, #4]
 8006716:	6800      	ldr	r0, [r0, #0]
 8006718:	9403      	str	r4, [sp, #12]
 800671a:	2300      	movs	r3, #0
 800671c:	9311      	str	r3, [sp, #68]	; 0x44
 800671e:	9316      	str	r3, [sp, #88]	; 0x58
 8006720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006724:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006728:	a904      	add	r1, sp, #16
 800672a:	4623      	mov	r3, r4
 800672c:	f000 fcc6 	bl	80070bc <__ssvfiscanf_r>
 8006730:	b01f      	add	sp, #124	; 0x7c
 8006732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006736:	b003      	add	sp, #12
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	08006767 	.word	0x08006767
 8006740:	20000014 	.word	0x20000014

08006744 <__sread>:
 8006744:	b510      	push	{r4, lr}
 8006746:	460c      	mov	r4, r1
 8006748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674c:	f000 ff80 	bl	8007650 <_read_r>
 8006750:	2800      	cmp	r0, #0
 8006752:	bfab      	itete	ge
 8006754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006756:	89a3      	ldrhlt	r3, [r4, #12]
 8006758:	181b      	addge	r3, r3, r0
 800675a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800675e:	bfac      	ite	ge
 8006760:	6563      	strge	r3, [r4, #84]	; 0x54
 8006762:	81a3      	strhlt	r3, [r4, #12]
 8006764:	bd10      	pop	{r4, pc}

08006766 <__seofread>:
 8006766:	2000      	movs	r0, #0
 8006768:	4770      	bx	lr

0800676a <__swrite>:
 800676a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800676e:	461f      	mov	r7, r3
 8006770:	898b      	ldrh	r3, [r1, #12]
 8006772:	05db      	lsls	r3, r3, #23
 8006774:	4605      	mov	r5, r0
 8006776:	460c      	mov	r4, r1
 8006778:	4616      	mov	r6, r2
 800677a:	d505      	bpl.n	8006788 <__swrite+0x1e>
 800677c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006780:	2302      	movs	r3, #2
 8006782:	2200      	movs	r2, #0
 8006784:	f000 fb6c 	bl	8006e60 <_lseek_r>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800678e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006792:	81a3      	strh	r3, [r4, #12]
 8006794:	4632      	mov	r2, r6
 8006796:	463b      	mov	r3, r7
 8006798:	4628      	mov	r0, r5
 800679a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800679e:	f000 b903 	b.w	80069a8 <_write_r>

080067a2 <__sseek>:
 80067a2:	b510      	push	{r4, lr}
 80067a4:	460c      	mov	r4, r1
 80067a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067aa:	f000 fb59 	bl	8006e60 <_lseek_r>
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	bf15      	itete	ne
 80067b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067be:	81a3      	strheq	r3, [r4, #12]
 80067c0:	bf18      	it	ne
 80067c2:	81a3      	strhne	r3, [r4, #12]
 80067c4:	bd10      	pop	{r4, pc}

080067c6 <__sclose>:
 80067c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ca:	f000 b975 	b.w	8006ab8 <_close_r>

080067ce <strcpy>:
 80067ce:	4603      	mov	r3, r0
 80067d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067d4:	f803 2b01 	strb.w	r2, [r3], #1
 80067d8:	2a00      	cmp	r2, #0
 80067da:	d1f9      	bne.n	80067d0 <strcpy+0x2>
 80067dc:	4770      	bx	lr

080067de <strncmp>:
 80067de:	b510      	push	{r4, lr}
 80067e0:	b17a      	cbz	r2, 8006802 <strncmp+0x24>
 80067e2:	4603      	mov	r3, r0
 80067e4:	3901      	subs	r1, #1
 80067e6:	1884      	adds	r4, r0, r2
 80067e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80067ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80067f0:	4290      	cmp	r0, r2
 80067f2:	d101      	bne.n	80067f8 <strncmp+0x1a>
 80067f4:	42a3      	cmp	r3, r4
 80067f6:	d101      	bne.n	80067fc <strncmp+0x1e>
 80067f8:	1a80      	subs	r0, r0, r2
 80067fa:	bd10      	pop	{r4, pc}
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d1f3      	bne.n	80067e8 <strncmp+0xa>
 8006800:	e7fa      	b.n	80067f8 <strncmp+0x1a>
 8006802:	4610      	mov	r0, r2
 8006804:	e7f9      	b.n	80067fa <strncmp+0x1c>
	...

08006808 <_strtoul_l.constprop.0>:
 8006808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800680c:	4f36      	ldr	r7, [pc, #216]	; (80068e8 <_strtoul_l.constprop.0+0xe0>)
 800680e:	4686      	mov	lr, r0
 8006810:	460d      	mov	r5, r1
 8006812:	4628      	mov	r0, r5
 8006814:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006818:	5de6      	ldrb	r6, [r4, r7]
 800681a:	f016 0608 	ands.w	r6, r6, #8
 800681e:	d1f8      	bne.n	8006812 <_strtoul_l.constprop.0+0xa>
 8006820:	2c2d      	cmp	r4, #45	; 0x2d
 8006822:	d12f      	bne.n	8006884 <_strtoul_l.constprop.0+0x7c>
 8006824:	782c      	ldrb	r4, [r5, #0]
 8006826:	2601      	movs	r6, #1
 8006828:	1c85      	adds	r5, r0, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d057      	beq.n	80068de <_strtoul_l.constprop.0+0xd6>
 800682e:	2b10      	cmp	r3, #16
 8006830:	d109      	bne.n	8006846 <_strtoul_l.constprop.0+0x3e>
 8006832:	2c30      	cmp	r4, #48	; 0x30
 8006834:	d107      	bne.n	8006846 <_strtoul_l.constprop.0+0x3e>
 8006836:	7828      	ldrb	r0, [r5, #0]
 8006838:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800683c:	2858      	cmp	r0, #88	; 0x58
 800683e:	d149      	bne.n	80068d4 <_strtoul_l.constprop.0+0xcc>
 8006840:	786c      	ldrb	r4, [r5, #1]
 8006842:	2310      	movs	r3, #16
 8006844:	3502      	adds	r5, #2
 8006846:	f04f 38ff 	mov.w	r8, #4294967295
 800684a:	2700      	movs	r7, #0
 800684c:	fbb8 f8f3 	udiv	r8, r8, r3
 8006850:	fb03 f908 	mul.w	r9, r3, r8
 8006854:	ea6f 0909 	mvn.w	r9, r9
 8006858:	4638      	mov	r0, r7
 800685a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800685e:	f1bc 0f09 	cmp.w	ip, #9
 8006862:	d814      	bhi.n	800688e <_strtoul_l.constprop.0+0x86>
 8006864:	4664      	mov	r4, ip
 8006866:	42a3      	cmp	r3, r4
 8006868:	dd22      	ble.n	80068b0 <_strtoul_l.constprop.0+0xa8>
 800686a:	2f00      	cmp	r7, #0
 800686c:	db1d      	blt.n	80068aa <_strtoul_l.constprop.0+0xa2>
 800686e:	4580      	cmp	r8, r0
 8006870:	d31b      	bcc.n	80068aa <_strtoul_l.constprop.0+0xa2>
 8006872:	d101      	bne.n	8006878 <_strtoul_l.constprop.0+0x70>
 8006874:	45a1      	cmp	r9, r4
 8006876:	db18      	blt.n	80068aa <_strtoul_l.constprop.0+0xa2>
 8006878:	fb00 4003 	mla	r0, r0, r3, r4
 800687c:	2701      	movs	r7, #1
 800687e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006882:	e7ea      	b.n	800685a <_strtoul_l.constprop.0+0x52>
 8006884:	2c2b      	cmp	r4, #43	; 0x2b
 8006886:	bf04      	itt	eq
 8006888:	782c      	ldrbeq	r4, [r5, #0]
 800688a:	1c85      	addeq	r5, r0, #2
 800688c:	e7cd      	b.n	800682a <_strtoul_l.constprop.0+0x22>
 800688e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006892:	f1bc 0f19 	cmp.w	ip, #25
 8006896:	d801      	bhi.n	800689c <_strtoul_l.constprop.0+0x94>
 8006898:	3c37      	subs	r4, #55	; 0x37
 800689a:	e7e4      	b.n	8006866 <_strtoul_l.constprop.0+0x5e>
 800689c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80068a0:	f1bc 0f19 	cmp.w	ip, #25
 80068a4:	d804      	bhi.n	80068b0 <_strtoul_l.constprop.0+0xa8>
 80068a6:	3c57      	subs	r4, #87	; 0x57
 80068a8:	e7dd      	b.n	8006866 <_strtoul_l.constprop.0+0x5e>
 80068aa:	f04f 37ff 	mov.w	r7, #4294967295
 80068ae:	e7e6      	b.n	800687e <_strtoul_l.constprop.0+0x76>
 80068b0:	2f00      	cmp	r7, #0
 80068b2:	da07      	bge.n	80068c4 <_strtoul_l.constprop.0+0xbc>
 80068b4:	2322      	movs	r3, #34	; 0x22
 80068b6:	f8ce 3000 	str.w	r3, [lr]
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	b932      	cbnz	r2, 80068ce <_strtoul_l.constprop.0+0xc6>
 80068c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068c4:	b106      	cbz	r6, 80068c8 <_strtoul_l.constprop.0+0xc0>
 80068c6:	4240      	negs	r0, r0
 80068c8:	2a00      	cmp	r2, #0
 80068ca:	d0f9      	beq.n	80068c0 <_strtoul_l.constprop.0+0xb8>
 80068cc:	b107      	cbz	r7, 80068d0 <_strtoul_l.constprop.0+0xc8>
 80068ce:	1e69      	subs	r1, r5, #1
 80068d0:	6011      	str	r1, [r2, #0]
 80068d2:	e7f5      	b.n	80068c0 <_strtoul_l.constprop.0+0xb8>
 80068d4:	2430      	movs	r4, #48	; 0x30
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1b5      	bne.n	8006846 <_strtoul_l.constprop.0+0x3e>
 80068da:	2308      	movs	r3, #8
 80068dc:	e7b3      	b.n	8006846 <_strtoul_l.constprop.0+0x3e>
 80068de:	2c30      	cmp	r4, #48	; 0x30
 80068e0:	d0a9      	beq.n	8006836 <_strtoul_l.constprop.0+0x2e>
 80068e2:	230a      	movs	r3, #10
 80068e4:	e7af      	b.n	8006846 <_strtoul_l.constprop.0+0x3e>
 80068e6:	bf00      	nop
 80068e8:	08007e46 	.word	0x08007e46

080068ec <_strtoul_r>:
 80068ec:	f7ff bf8c 	b.w	8006808 <_strtoul_l.constprop.0>

080068f0 <strtoul>:
 80068f0:	4613      	mov	r3, r2
 80068f2:	460a      	mov	r2, r1
 80068f4:	4601      	mov	r1, r0
 80068f6:	4802      	ldr	r0, [pc, #8]	; (8006900 <strtoul+0x10>)
 80068f8:	6800      	ldr	r0, [r0, #0]
 80068fa:	f7ff bf85 	b.w	8006808 <_strtoul_l.constprop.0>
 80068fe:	bf00      	nop
 8006900:	20000014 	.word	0x20000014

08006904 <__swbuf_r>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	460e      	mov	r6, r1
 8006908:	4614      	mov	r4, r2
 800690a:	4605      	mov	r5, r0
 800690c:	b118      	cbz	r0, 8006916 <__swbuf_r+0x12>
 800690e:	6983      	ldr	r3, [r0, #24]
 8006910:	b90b      	cbnz	r3, 8006916 <__swbuf_r+0x12>
 8006912:	f000 fa07 	bl	8006d24 <__sinit>
 8006916:	4b21      	ldr	r3, [pc, #132]	; (800699c <__swbuf_r+0x98>)
 8006918:	429c      	cmp	r4, r3
 800691a:	d12b      	bne.n	8006974 <__swbuf_r+0x70>
 800691c:	686c      	ldr	r4, [r5, #4]
 800691e:	69a3      	ldr	r3, [r4, #24]
 8006920:	60a3      	str	r3, [r4, #8]
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	071a      	lsls	r2, r3, #28
 8006926:	d52f      	bpl.n	8006988 <__swbuf_r+0x84>
 8006928:	6923      	ldr	r3, [r4, #16]
 800692a:	b36b      	cbz	r3, 8006988 <__swbuf_r+0x84>
 800692c:	6923      	ldr	r3, [r4, #16]
 800692e:	6820      	ldr	r0, [r4, #0]
 8006930:	1ac0      	subs	r0, r0, r3
 8006932:	6963      	ldr	r3, [r4, #20]
 8006934:	b2f6      	uxtb	r6, r6
 8006936:	4283      	cmp	r3, r0
 8006938:	4637      	mov	r7, r6
 800693a:	dc04      	bgt.n	8006946 <__swbuf_r+0x42>
 800693c:	4621      	mov	r1, r4
 800693e:	4628      	mov	r0, r5
 8006940:	f000 f95c 	bl	8006bfc <_fflush_r>
 8006944:	bb30      	cbnz	r0, 8006994 <__swbuf_r+0x90>
 8006946:	68a3      	ldr	r3, [r4, #8]
 8006948:	3b01      	subs	r3, #1
 800694a:	60a3      	str	r3, [r4, #8]
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	6022      	str	r2, [r4, #0]
 8006952:	701e      	strb	r6, [r3, #0]
 8006954:	6963      	ldr	r3, [r4, #20]
 8006956:	3001      	adds	r0, #1
 8006958:	4283      	cmp	r3, r0
 800695a:	d004      	beq.n	8006966 <__swbuf_r+0x62>
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	07db      	lsls	r3, r3, #31
 8006960:	d506      	bpl.n	8006970 <__swbuf_r+0x6c>
 8006962:	2e0a      	cmp	r6, #10
 8006964:	d104      	bne.n	8006970 <__swbuf_r+0x6c>
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f000 f947 	bl	8006bfc <_fflush_r>
 800696e:	b988      	cbnz	r0, 8006994 <__swbuf_r+0x90>
 8006970:	4638      	mov	r0, r7
 8006972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <__swbuf_r+0x9c>)
 8006976:	429c      	cmp	r4, r3
 8006978:	d101      	bne.n	800697e <__swbuf_r+0x7a>
 800697a:	68ac      	ldr	r4, [r5, #8]
 800697c:	e7cf      	b.n	800691e <__swbuf_r+0x1a>
 800697e:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <__swbuf_r+0xa0>)
 8006980:	429c      	cmp	r4, r3
 8006982:	bf08      	it	eq
 8006984:	68ec      	ldreq	r4, [r5, #12]
 8006986:	e7ca      	b.n	800691e <__swbuf_r+0x1a>
 8006988:	4621      	mov	r1, r4
 800698a:	4628      	mov	r0, r5
 800698c:	f000 f81e 	bl	80069cc <__swsetup_r>
 8006990:	2800      	cmp	r0, #0
 8006992:	d0cb      	beq.n	800692c <__swbuf_r+0x28>
 8006994:	f04f 37ff 	mov.w	r7, #4294967295
 8006998:	e7ea      	b.n	8006970 <__swbuf_r+0x6c>
 800699a:	bf00      	nop
 800699c:	08007f68 	.word	0x08007f68
 80069a0:	08007f88 	.word	0x08007f88
 80069a4:	08007f48 	.word	0x08007f48

080069a8 <_write_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4d07      	ldr	r5, [pc, #28]	; (80069c8 <_write_r+0x20>)
 80069ac:	4604      	mov	r4, r0
 80069ae:	4608      	mov	r0, r1
 80069b0:	4611      	mov	r1, r2
 80069b2:	2200      	movs	r2, #0
 80069b4:	602a      	str	r2, [r5, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	f7fb fbdd 	bl	8002176 <_write>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d102      	bne.n	80069c6 <_write_r+0x1e>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	b103      	cbz	r3, 80069c6 <_write_r+0x1e>
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	200003b8 	.word	0x200003b8

080069cc <__swsetup_r>:
 80069cc:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <__swsetup_r+0xcc>)
 80069ce:	b570      	push	{r4, r5, r6, lr}
 80069d0:	681d      	ldr	r5, [r3, #0]
 80069d2:	4606      	mov	r6, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	b125      	cbz	r5, 80069e2 <__swsetup_r+0x16>
 80069d8:	69ab      	ldr	r3, [r5, #24]
 80069da:	b913      	cbnz	r3, 80069e2 <__swsetup_r+0x16>
 80069dc:	4628      	mov	r0, r5
 80069de:	f000 f9a1 	bl	8006d24 <__sinit>
 80069e2:	4b2e      	ldr	r3, [pc, #184]	; (8006a9c <__swsetup_r+0xd0>)
 80069e4:	429c      	cmp	r4, r3
 80069e6:	d10f      	bne.n	8006a08 <__swsetup_r+0x3c>
 80069e8:	686c      	ldr	r4, [r5, #4]
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069f0:	0719      	lsls	r1, r3, #28
 80069f2:	d42c      	bmi.n	8006a4e <__swsetup_r+0x82>
 80069f4:	06dd      	lsls	r5, r3, #27
 80069f6:	d411      	bmi.n	8006a1c <__swsetup_r+0x50>
 80069f8:	2309      	movs	r3, #9
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	f04f 30ff 	mov.w	r0, #4294967295
 8006a06:	e03e      	b.n	8006a86 <__swsetup_r+0xba>
 8006a08:	4b25      	ldr	r3, [pc, #148]	; (8006aa0 <__swsetup_r+0xd4>)
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	d101      	bne.n	8006a12 <__swsetup_r+0x46>
 8006a0e:	68ac      	ldr	r4, [r5, #8]
 8006a10:	e7eb      	b.n	80069ea <__swsetup_r+0x1e>
 8006a12:	4b24      	ldr	r3, [pc, #144]	; (8006aa4 <__swsetup_r+0xd8>)
 8006a14:	429c      	cmp	r4, r3
 8006a16:	bf08      	it	eq
 8006a18:	68ec      	ldreq	r4, [r5, #12]
 8006a1a:	e7e6      	b.n	80069ea <__swsetup_r+0x1e>
 8006a1c:	0758      	lsls	r0, r3, #29
 8006a1e:	d512      	bpl.n	8006a46 <__swsetup_r+0x7a>
 8006a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a22:	b141      	cbz	r1, 8006a36 <__swsetup_r+0x6a>
 8006a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a28:	4299      	cmp	r1, r3
 8006a2a:	d002      	beq.n	8006a32 <__swsetup_r+0x66>
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7fd f859 	bl	8003ae4 <_free_r>
 8006a32:	2300      	movs	r3, #0
 8006a34:	6363      	str	r3, [r4, #52]	; 0x34
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6063      	str	r3, [r4, #4]
 8006a42:	6923      	ldr	r3, [r4, #16]
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f043 0308 	orr.w	r3, r3, #8
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	b94b      	cbnz	r3, 8006a66 <__swsetup_r+0x9a>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a5c:	d003      	beq.n	8006a66 <__swsetup_r+0x9a>
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4630      	mov	r0, r6
 8006a62:	f000 fa35 	bl	8006ed0 <__smakebuf_r>
 8006a66:	89a0      	ldrh	r0, [r4, #12]
 8006a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a6c:	f010 0301 	ands.w	r3, r0, #1
 8006a70:	d00a      	beq.n	8006a88 <__swsetup_r+0xbc>
 8006a72:	2300      	movs	r3, #0
 8006a74:	60a3      	str	r3, [r4, #8]
 8006a76:	6963      	ldr	r3, [r4, #20]
 8006a78:	425b      	negs	r3, r3
 8006a7a:	61a3      	str	r3, [r4, #24]
 8006a7c:	6923      	ldr	r3, [r4, #16]
 8006a7e:	b943      	cbnz	r3, 8006a92 <__swsetup_r+0xc6>
 8006a80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a84:	d1ba      	bne.n	80069fc <__swsetup_r+0x30>
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	0781      	lsls	r1, r0, #30
 8006a8a:	bf58      	it	pl
 8006a8c:	6963      	ldrpl	r3, [r4, #20]
 8006a8e:	60a3      	str	r3, [r4, #8]
 8006a90:	e7f4      	b.n	8006a7c <__swsetup_r+0xb0>
 8006a92:	2000      	movs	r0, #0
 8006a94:	e7f7      	b.n	8006a86 <__swsetup_r+0xba>
 8006a96:	bf00      	nop
 8006a98:	20000014 	.word	0x20000014
 8006a9c:	08007f68 	.word	0x08007f68
 8006aa0:	08007f88 	.word	0x08007f88
 8006aa4:	08007f48 	.word	0x08007f48

08006aa8 <abort>:
 8006aa8:	b508      	push	{r3, lr}
 8006aaa:	2006      	movs	r0, #6
 8006aac:	f000 fe42 	bl	8007734 <raise>
 8006ab0:	2001      	movs	r0, #1
 8006ab2:	f7fb fb39 	bl	8002128 <_exit>
	...

08006ab8 <_close_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4d06      	ldr	r5, [pc, #24]	; (8006ad4 <_close_r+0x1c>)
 8006abc:	2300      	movs	r3, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fb fb73 	bl	80021ae <_close>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_close_r+0x1a>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_close_r+0x1a>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	200003b8 	.word	0x200003b8

08006ad8 <__env_lock>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__env_lock+0x8>)
 8006ada:	f7fe bf99 	b.w	8005a10 <__retarget_lock_acquire_recursive>
 8006ade:	bf00      	nop
 8006ae0:	200003b0 	.word	0x200003b0

08006ae4 <__env_unlock>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__env_unlock+0x8>)
 8006ae6:	f7fe bf95 	b.w	8005a14 <__retarget_lock_release_recursive>
 8006aea:	bf00      	nop
 8006aec:	200003b0 	.word	0x200003b0

08006af0 <__sflush_r>:
 8006af0:	898a      	ldrh	r2, [r1, #12]
 8006af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af6:	4605      	mov	r5, r0
 8006af8:	0710      	lsls	r0, r2, #28
 8006afa:	460c      	mov	r4, r1
 8006afc:	d458      	bmi.n	8006bb0 <__sflush_r+0xc0>
 8006afe:	684b      	ldr	r3, [r1, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc05      	bgt.n	8006b10 <__sflush_r+0x20>
 8006b04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dc02      	bgt.n	8006b10 <__sflush_r+0x20>
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d0f9      	beq.n	8006b0a <__sflush_r+0x1a>
 8006b16:	2300      	movs	r3, #0
 8006b18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b1c:	682f      	ldr	r7, [r5, #0]
 8006b1e:	602b      	str	r3, [r5, #0]
 8006b20:	d032      	beq.n	8006b88 <__sflush_r+0x98>
 8006b22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	075a      	lsls	r2, r3, #29
 8006b28:	d505      	bpl.n	8006b36 <__sflush_r+0x46>
 8006b2a:	6863      	ldr	r3, [r4, #4]
 8006b2c:	1ac0      	subs	r0, r0, r3
 8006b2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b30:	b10b      	cbz	r3, 8006b36 <__sflush_r+0x46>
 8006b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b34:	1ac0      	subs	r0, r0, r3
 8006b36:	2300      	movs	r3, #0
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b3c:	6a21      	ldr	r1, [r4, #32]
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b0      	blx	r6
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	d106      	bne.n	8006b56 <__sflush_r+0x66>
 8006b48:	6829      	ldr	r1, [r5, #0]
 8006b4a:	291d      	cmp	r1, #29
 8006b4c:	d82c      	bhi.n	8006ba8 <__sflush_r+0xb8>
 8006b4e:	4a2a      	ldr	r2, [pc, #168]	; (8006bf8 <__sflush_r+0x108>)
 8006b50:	40ca      	lsrs	r2, r1
 8006b52:	07d6      	lsls	r6, r2, #31
 8006b54:	d528      	bpl.n	8006ba8 <__sflush_r+0xb8>
 8006b56:	2200      	movs	r2, #0
 8006b58:	6062      	str	r2, [r4, #4]
 8006b5a:	04d9      	lsls	r1, r3, #19
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	6022      	str	r2, [r4, #0]
 8006b60:	d504      	bpl.n	8006b6c <__sflush_r+0x7c>
 8006b62:	1c42      	adds	r2, r0, #1
 8006b64:	d101      	bne.n	8006b6a <__sflush_r+0x7a>
 8006b66:	682b      	ldr	r3, [r5, #0]
 8006b68:	b903      	cbnz	r3, 8006b6c <__sflush_r+0x7c>
 8006b6a:	6560      	str	r0, [r4, #84]	; 0x54
 8006b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b6e:	602f      	str	r7, [r5, #0]
 8006b70:	2900      	cmp	r1, #0
 8006b72:	d0ca      	beq.n	8006b0a <__sflush_r+0x1a>
 8006b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b78:	4299      	cmp	r1, r3
 8006b7a:	d002      	beq.n	8006b82 <__sflush_r+0x92>
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f7fc ffb1 	bl	8003ae4 <_free_r>
 8006b82:	2000      	movs	r0, #0
 8006b84:	6360      	str	r0, [r4, #52]	; 0x34
 8006b86:	e7c1      	b.n	8006b0c <__sflush_r+0x1c>
 8006b88:	6a21      	ldr	r1, [r4, #32]
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	47b0      	blx	r6
 8006b90:	1c41      	adds	r1, r0, #1
 8006b92:	d1c7      	bne.n	8006b24 <__sflush_r+0x34>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0c4      	beq.n	8006b24 <__sflush_r+0x34>
 8006b9a:	2b1d      	cmp	r3, #29
 8006b9c:	d001      	beq.n	8006ba2 <__sflush_r+0xb2>
 8006b9e:	2b16      	cmp	r3, #22
 8006ba0:	d101      	bne.n	8006ba6 <__sflush_r+0xb6>
 8006ba2:	602f      	str	r7, [r5, #0]
 8006ba4:	e7b1      	b.n	8006b0a <__sflush_r+0x1a>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	e7ad      	b.n	8006b0c <__sflush_r+0x1c>
 8006bb0:	690f      	ldr	r7, [r1, #16]
 8006bb2:	2f00      	cmp	r7, #0
 8006bb4:	d0a9      	beq.n	8006b0a <__sflush_r+0x1a>
 8006bb6:	0793      	lsls	r3, r2, #30
 8006bb8:	680e      	ldr	r6, [r1, #0]
 8006bba:	bf08      	it	eq
 8006bbc:	694b      	ldreq	r3, [r1, #20]
 8006bbe:	600f      	str	r7, [r1, #0]
 8006bc0:	bf18      	it	ne
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	eba6 0807 	sub.w	r8, r6, r7
 8006bc8:	608b      	str	r3, [r1, #8]
 8006bca:	f1b8 0f00 	cmp.w	r8, #0
 8006bce:	dd9c      	ble.n	8006b0a <__sflush_r+0x1a>
 8006bd0:	6a21      	ldr	r1, [r4, #32]
 8006bd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bd4:	4643      	mov	r3, r8
 8006bd6:	463a      	mov	r2, r7
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b0      	blx	r6
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	dc06      	bgt.n	8006bee <__sflush_r+0xfe>
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	e78e      	b.n	8006b0c <__sflush_r+0x1c>
 8006bee:	4407      	add	r7, r0
 8006bf0:	eba8 0800 	sub.w	r8, r8, r0
 8006bf4:	e7e9      	b.n	8006bca <__sflush_r+0xda>
 8006bf6:	bf00      	nop
 8006bf8:	20400001 	.word	0x20400001

08006bfc <_fflush_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	4605      	mov	r5, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	b913      	cbnz	r3, 8006c0c <_fflush_r+0x10>
 8006c06:	2500      	movs	r5, #0
 8006c08:	4628      	mov	r0, r5
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	b118      	cbz	r0, 8006c16 <_fflush_r+0x1a>
 8006c0e:	6983      	ldr	r3, [r0, #24]
 8006c10:	b90b      	cbnz	r3, 8006c16 <_fflush_r+0x1a>
 8006c12:	f000 f887 	bl	8006d24 <__sinit>
 8006c16:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <_fflush_r+0x6c>)
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	d11b      	bne.n	8006c54 <_fflush_r+0x58>
 8006c1c:	686c      	ldr	r4, [r5, #4]
 8006c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0ef      	beq.n	8006c06 <_fflush_r+0xa>
 8006c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c28:	07d0      	lsls	r0, r2, #31
 8006c2a:	d404      	bmi.n	8006c36 <_fflush_r+0x3a>
 8006c2c:	0599      	lsls	r1, r3, #22
 8006c2e:	d402      	bmi.n	8006c36 <_fflush_r+0x3a>
 8006c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c32:	f7fe feed 	bl	8005a10 <__retarget_lock_acquire_recursive>
 8006c36:	4628      	mov	r0, r5
 8006c38:	4621      	mov	r1, r4
 8006c3a:	f7ff ff59 	bl	8006af0 <__sflush_r>
 8006c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c40:	07da      	lsls	r2, r3, #31
 8006c42:	4605      	mov	r5, r0
 8006c44:	d4e0      	bmi.n	8006c08 <_fflush_r+0xc>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	059b      	lsls	r3, r3, #22
 8006c4a:	d4dd      	bmi.n	8006c08 <_fflush_r+0xc>
 8006c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c4e:	f7fe fee1 	bl	8005a14 <__retarget_lock_release_recursive>
 8006c52:	e7d9      	b.n	8006c08 <_fflush_r+0xc>
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <_fflush_r+0x70>)
 8006c56:	429c      	cmp	r4, r3
 8006c58:	d101      	bne.n	8006c5e <_fflush_r+0x62>
 8006c5a:	68ac      	ldr	r4, [r5, #8]
 8006c5c:	e7df      	b.n	8006c1e <_fflush_r+0x22>
 8006c5e:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <_fflush_r+0x74>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	bf08      	it	eq
 8006c64:	68ec      	ldreq	r4, [r5, #12]
 8006c66:	e7da      	b.n	8006c1e <_fflush_r+0x22>
 8006c68:	08007f68 	.word	0x08007f68
 8006c6c:	08007f88 	.word	0x08007f88
 8006c70:	08007f48 	.word	0x08007f48

08006c74 <std>:
 8006c74:	2300      	movs	r3, #0
 8006c76:	b510      	push	{r4, lr}
 8006c78:	4604      	mov	r4, r0
 8006c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c82:	6083      	str	r3, [r0, #8]
 8006c84:	8181      	strh	r1, [r0, #12]
 8006c86:	6643      	str	r3, [r0, #100]	; 0x64
 8006c88:	81c2      	strh	r2, [r0, #14]
 8006c8a:	6183      	str	r3, [r0, #24]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	2208      	movs	r2, #8
 8006c90:	305c      	adds	r0, #92	; 0x5c
 8006c92:	f7fc ff1f 	bl	8003ad4 <memset>
 8006c96:	4b05      	ldr	r3, [pc, #20]	; (8006cac <std+0x38>)
 8006c98:	6263      	str	r3, [r4, #36]	; 0x24
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <std+0x3c>)
 8006c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <std+0x40>)
 8006ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <std+0x44>)
 8006ca4:	6224      	str	r4, [r4, #32]
 8006ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ca8:	bd10      	pop	{r4, pc}
 8006caa:	bf00      	nop
 8006cac:	08006745 	.word	0x08006745
 8006cb0:	0800676b 	.word	0x0800676b
 8006cb4:	080067a3 	.word	0x080067a3
 8006cb8:	080067c7 	.word	0x080067c7

08006cbc <_cleanup_r>:
 8006cbc:	4901      	ldr	r1, [pc, #4]	; (8006cc4 <_cleanup_r+0x8>)
 8006cbe:	f000 b8af 	b.w	8006e20 <_fwalk_reent>
 8006cc2:	bf00      	nop
 8006cc4:	08006bfd 	.word	0x08006bfd

08006cc8 <__sfmoreglue>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	2268      	movs	r2, #104	; 0x68
 8006ccc:	1e4d      	subs	r5, r1, #1
 8006cce:	4355      	muls	r5, r2
 8006cd0:	460e      	mov	r6, r1
 8006cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cd6:	f7fc ff71 	bl	8003bbc <_malloc_r>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	b140      	cbz	r0, 8006cf0 <__sfmoreglue+0x28>
 8006cde:	2100      	movs	r1, #0
 8006ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ce4:	300c      	adds	r0, #12
 8006ce6:	60a0      	str	r0, [r4, #8]
 8006ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cec:	f7fc fef2 	bl	8003ad4 <memset>
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}

08006cf4 <__sfp_lock_acquire>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__sfp_lock_acquire+0x8>)
 8006cf6:	f7fe be8b 	b.w	8005a10 <__retarget_lock_acquire_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	200003b2 	.word	0x200003b2

08006d00 <__sfp_lock_release>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__sfp_lock_release+0x8>)
 8006d02:	f7fe be87 	b.w	8005a14 <__retarget_lock_release_recursive>
 8006d06:	bf00      	nop
 8006d08:	200003b2 	.word	0x200003b2

08006d0c <__sinit_lock_acquire>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <__sinit_lock_acquire+0x8>)
 8006d0e:	f7fe be7f 	b.w	8005a10 <__retarget_lock_acquire_recursive>
 8006d12:	bf00      	nop
 8006d14:	200003b3 	.word	0x200003b3

08006d18 <__sinit_lock_release>:
 8006d18:	4801      	ldr	r0, [pc, #4]	; (8006d20 <__sinit_lock_release+0x8>)
 8006d1a:	f7fe be7b 	b.w	8005a14 <__retarget_lock_release_recursive>
 8006d1e:	bf00      	nop
 8006d20:	200003b3 	.word	0x200003b3

08006d24 <__sinit>:
 8006d24:	b510      	push	{r4, lr}
 8006d26:	4604      	mov	r4, r0
 8006d28:	f7ff fff0 	bl	8006d0c <__sinit_lock_acquire>
 8006d2c:	69a3      	ldr	r3, [r4, #24]
 8006d2e:	b11b      	cbz	r3, 8006d38 <__sinit+0x14>
 8006d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d34:	f7ff bff0 	b.w	8006d18 <__sinit_lock_release>
 8006d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <__sinit+0x68>)
 8006d40:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <__sinit+0x6c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d46:	42a3      	cmp	r3, r4
 8006d48:	bf04      	itt	eq
 8006d4a:	2301      	moveq	r3, #1
 8006d4c:	61a3      	streq	r3, [r4, #24]
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 f820 	bl	8006d94 <__sfp>
 8006d54:	6060      	str	r0, [r4, #4]
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 f81c 	bl	8006d94 <__sfp>
 8006d5c:	60a0      	str	r0, [r4, #8]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 f818 	bl	8006d94 <__sfp>
 8006d64:	2200      	movs	r2, #0
 8006d66:	60e0      	str	r0, [r4, #12]
 8006d68:	2104      	movs	r1, #4
 8006d6a:	6860      	ldr	r0, [r4, #4]
 8006d6c:	f7ff ff82 	bl	8006c74 <std>
 8006d70:	68a0      	ldr	r0, [r4, #8]
 8006d72:	2201      	movs	r2, #1
 8006d74:	2109      	movs	r1, #9
 8006d76:	f7ff ff7d 	bl	8006c74 <std>
 8006d7a:	68e0      	ldr	r0, [r4, #12]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	2112      	movs	r1, #18
 8006d80:	f7ff ff78 	bl	8006c74 <std>
 8006d84:	2301      	movs	r3, #1
 8006d86:	61a3      	str	r3, [r4, #24]
 8006d88:	e7d2      	b.n	8006d30 <__sinit+0xc>
 8006d8a:	bf00      	nop
 8006d8c:	08007ae0 	.word	0x08007ae0
 8006d90:	08006cbd 	.word	0x08006cbd

08006d94 <__sfp>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	4607      	mov	r7, r0
 8006d98:	f7ff ffac 	bl	8006cf4 <__sfp_lock_acquire>
 8006d9c:	4b1e      	ldr	r3, [pc, #120]	; (8006e18 <__sfp+0x84>)
 8006d9e:	681e      	ldr	r6, [r3, #0]
 8006da0:	69b3      	ldr	r3, [r6, #24]
 8006da2:	b913      	cbnz	r3, 8006daa <__sfp+0x16>
 8006da4:	4630      	mov	r0, r6
 8006da6:	f7ff ffbd 	bl	8006d24 <__sinit>
 8006daa:	3648      	adds	r6, #72	; 0x48
 8006dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	d503      	bpl.n	8006dbc <__sfp+0x28>
 8006db4:	6833      	ldr	r3, [r6, #0]
 8006db6:	b30b      	cbz	r3, 8006dfc <__sfp+0x68>
 8006db8:	6836      	ldr	r6, [r6, #0]
 8006dba:	e7f7      	b.n	8006dac <__sfp+0x18>
 8006dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dc0:	b9d5      	cbnz	r5, 8006df8 <__sfp+0x64>
 8006dc2:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <__sfp+0x88>)
 8006dc4:	60e3      	str	r3, [r4, #12]
 8006dc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dca:	6665      	str	r5, [r4, #100]	; 0x64
 8006dcc:	f7fe fe1e 	bl	8005a0c <__retarget_lock_init_recursive>
 8006dd0:	f7ff ff96 	bl	8006d00 <__sfp_lock_release>
 8006dd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ddc:	6025      	str	r5, [r4, #0]
 8006dde:	61a5      	str	r5, [r4, #24]
 8006de0:	2208      	movs	r2, #8
 8006de2:	4629      	mov	r1, r5
 8006de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006de8:	f7fc fe74 	bl	8003ad4 <memset>
 8006dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006df4:	4620      	mov	r0, r4
 8006df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df8:	3468      	adds	r4, #104	; 0x68
 8006dfa:	e7d9      	b.n	8006db0 <__sfp+0x1c>
 8006dfc:	2104      	movs	r1, #4
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f7ff ff62 	bl	8006cc8 <__sfmoreglue>
 8006e04:	4604      	mov	r4, r0
 8006e06:	6030      	str	r0, [r6, #0]
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d1d5      	bne.n	8006db8 <__sfp+0x24>
 8006e0c:	f7ff ff78 	bl	8006d00 <__sfp_lock_release>
 8006e10:	230c      	movs	r3, #12
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	e7ee      	b.n	8006df4 <__sfp+0x60>
 8006e16:	bf00      	nop
 8006e18:	08007ae0 	.word	0x08007ae0
 8006e1c:	ffff0001 	.word	0xffff0001

08006e20 <_fwalk_reent>:
 8006e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e24:	4606      	mov	r6, r0
 8006e26:	4688      	mov	r8, r1
 8006e28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e2c:	2700      	movs	r7, #0
 8006e2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e32:	f1b9 0901 	subs.w	r9, r9, #1
 8006e36:	d505      	bpl.n	8006e44 <_fwalk_reent+0x24>
 8006e38:	6824      	ldr	r4, [r4, #0]
 8006e3a:	2c00      	cmp	r4, #0
 8006e3c:	d1f7      	bne.n	8006e2e <_fwalk_reent+0xe>
 8006e3e:	4638      	mov	r0, r7
 8006e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e44:	89ab      	ldrh	r3, [r5, #12]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d907      	bls.n	8006e5a <_fwalk_reent+0x3a>
 8006e4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	d003      	beq.n	8006e5a <_fwalk_reent+0x3a>
 8006e52:	4629      	mov	r1, r5
 8006e54:	4630      	mov	r0, r6
 8006e56:	47c0      	blx	r8
 8006e58:	4307      	orrs	r7, r0
 8006e5a:	3568      	adds	r5, #104	; 0x68
 8006e5c:	e7e9      	b.n	8006e32 <_fwalk_reent+0x12>
	...

08006e60 <_lseek_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4d07      	ldr	r5, [pc, #28]	; (8006e80 <_lseek_r+0x20>)
 8006e64:	4604      	mov	r4, r0
 8006e66:	4608      	mov	r0, r1
 8006e68:	4611      	mov	r1, r2
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	602a      	str	r2, [r5, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f7fb f9c4 	bl	80021fc <_lseek>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d102      	bne.n	8006e7e <_lseek_r+0x1e>
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b103      	cbz	r3, 8006e7e <_lseek_r+0x1e>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	200003b8 	.word	0x200003b8

08006e84 <__swhatbuf_r>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	460e      	mov	r6, r1
 8006e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	b096      	sub	sp, #88	; 0x58
 8006e90:	4614      	mov	r4, r2
 8006e92:	461d      	mov	r5, r3
 8006e94:	da08      	bge.n	8006ea8 <__swhatbuf_r+0x24>
 8006e96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	061a      	lsls	r2, r3, #24
 8006ea0:	d410      	bmi.n	8006ec4 <__swhatbuf_r+0x40>
 8006ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ea6:	e00e      	b.n	8006ec6 <__swhatbuf_r+0x42>
 8006ea8:	466a      	mov	r2, sp
 8006eaa:	f000 fd2b 	bl	8007904 <_fstat_r>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	dbf1      	blt.n	8006e96 <__swhatbuf_r+0x12>
 8006eb2:	9a01      	ldr	r2, [sp, #4]
 8006eb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006eb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ebc:	425a      	negs	r2, r3
 8006ebe:	415a      	adcs	r2, r3
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	e7ee      	b.n	8006ea2 <__swhatbuf_r+0x1e>
 8006ec4:	2340      	movs	r3, #64	; 0x40
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	b016      	add	sp, #88	; 0x58
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ed0 <__smakebuf_r>:
 8006ed0:	898b      	ldrh	r3, [r1, #12]
 8006ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ed4:	079d      	lsls	r5, r3, #30
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	460c      	mov	r4, r1
 8006eda:	d507      	bpl.n	8006eec <__smakebuf_r+0x1c>
 8006edc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	6123      	str	r3, [r4, #16]
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	6163      	str	r3, [r4, #20]
 8006ee8:	b002      	add	sp, #8
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	ab01      	add	r3, sp, #4
 8006eee:	466a      	mov	r2, sp
 8006ef0:	f7ff ffc8 	bl	8006e84 <__swhatbuf_r>
 8006ef4:	9900      	ldr	r1, [sp, #0]
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7fc fe5f 	bl	8003bbc <_malloc_r>
 8006efe:	b948      	cbnz	r0, 8006f14 <__smakebuf_r+0x44>
 8006f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f04:	059a      	lsls	r2, r3, #22
 8006f06:	d4ef      	bmi.n	8006ee8 <__smakebuf_r+0x18>
 8006f08:	f023 0303 	bic.w	r3, r3, #3
 8006f0c:	f043 0302 	orr.w	r3, r3, #2
 8006f10:	81a3      	strh	r3, [r4, #12]
 8006f12:	e7e3      	b.n	8006edc <__smakebuf_r+0xc>
 8006f14:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <__smakebuf_r+0x7c>)
 8006f16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	6020      	str	r0, [r4, #0]
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	9b00      	ldr	r3, [sp, #0]
 8006f24:	6163      	str	r3, [r4, #20]
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	6120      	str	r0, [r4, #16]
 8006f2a:	b15b      	cbz	r3, 8006f44 <__smakebuf_r+0x74>
 8006f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 fcf9 	bl	8007928 <_isatty_r>
 8006f36:	b128      	cbz	r0, 8006f44 <__smakebuf_r+0x74>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	89a0      	ldrh	r0, [r4, #12]
 8006f46:	4305      	orrs	r5, r0
 8006f48:	81a5      	strh	r5, [r4, #12]
 8006f4a:	e7cd      	b.n	8006ee8 <__smakebuf_r+0x18>
 8006f4c:	08006cbd 	.word	0x08006cbd

08006f50 <__ascii_mbtowc>:
 8006f50:	b082      	sub	sp, #8
 8006f52:	b901      	cbnz	r1, 8006f56 <__ascii_mbtowc+0x6>
 8006f54:	a901      	add	r1, sp, #4
 8006f56:	b142      	cbz	r2, 8006f6a <__ascii_mbtowc+0x1a>
 8006f58:	b14b      	cbz	r3, 8006f6e <__ascii_mbtowc+0x1e>
 8006f5a:	7813      	ldrb	r3, [r2, #0]
 8006f5c:	600b      	str	r3, [r1, #0]
 8006f5e:	7812      	ldrb	r2, [r2, #0]
 8006f60:	1e10      	subs	r0, r2, #0
 8006f62:	bf18      	it	ne
 8006f64:	2001      	movne	r0, #1
 8006f66:	b002      	add	sp, #8
 8006f68:	4770      	bx	lr
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	e7fb      	b.n	8006f66 <__ascii_mbtowc+0x16>
 8006f6e:	f06f 0001 	mvn.w	r0, #1
 8006f72:	e7f8      	b.n	8006f66 <__ascii_mbtowc+0x16>

08006f74 <memmove>:
 8006f74:	4288      	cmp	r0, r1
 8006f76:	b510      	push	{r4, lr}
 8006f78:	eb01 0402 	add.w	r4, r1, r2
 8006f7c:	d902      	bls.n	8006f84 <memmove+0x10>
 8006f7e:	4284      	cmp	r4, r0
 8006f80:	4623      	mov	r3, r4
 8006f82:	d807      	bhi.n	8006f94 <memmove+0x20>
 8006f84:	1e43      	subs	r3, r0, #1
 8006f86:	42a1      	cmp	r1, r4
 8006f88:	d008      	beq.n	8006f9c <memmove+0x28>
 8006f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f92:	e7f8      	b.n	8006f86 <memmove+0x12>
 8006f94:	4402      	add	r2, r0
 8006f96:	4601      	mov	r1, r0
 8006f98:	428a      	cmp	r2, r1
 8006f9a:	d100      	bne.n	8006f9e <memmove+0x2a>
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fa6:	e7f7      	b.n	8006f98 <memmove+0x24>

08006fa8 <_realloc_r>:
 8006fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fac:	4680      	mov	r8, r0
 8006fae:	4614      	mov	r4, r2
 8006fb0:	460e      	mov	r6, r1
 8006fb2:	b921      	cbnz	r1, 8006fbe <_realloc_r+0x16>
 8006fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb8:	4611      	mov	r1, r2
 8006fba:	f7fc bdff 	b.w	8003bbc <_malloc_r>
 8006fbe:	b92a      	cbnz	r2, 8006fcc <_realloc_r+0x24>
 8006fc0:	f7fc fd90 	bl	8003ae4 <_free_r>
 8006fc4:	4625      	mov	r5, r4
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fcc:	f000 fcbc 	bl	8007948 <_malloc_usable_size_r>
 8006fd0:	4284      	cmp	r4, r0
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	d802      	bhi.n	8006fdc <_realloc_r+0x34>
 8006fd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fda:	d812      	bhi.n	8007002 <_realloc_r+0x5a>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4640      	mov	r0, r8
 8006fe0:	f7fc fdec 	bl	8003bbc <_malloc_r>
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d0ed      	beq.n	8006fc6 <_realloc_r+0x1e>
 8006fea:	42bc      	cmp	r4, r7
 8006fec:	4622      	mov	r2, r4
 8006fee:	4631      	mov	r1, r6
 8006ff0:	bf28      	it	cs
 8006ff2:	463a      	movcs	r2, r7
 8006ff4:	f7fe fd0f 	bl	8005a16 <memcpy>
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	f7fc fd72 	bl	8003ae4 <_free_r>
 8007000:	e7e1      	b.n	8006fc6 <_realloc_r+0x1e>
 8007002:	4635      	mov	r5, r6
 8007004:	e7df      	b.n	8006fc6 <_realloc_r+0x1e>

08007006 <_sungetc_r>:
 8007006:	b538      	push	{r3, r4, r5, lr}
 8007008:	1c4b      	adds	r3, r1, #1
 800700a:	4614      	mov	r4, r2
 800700c:	d103      	bne.n	8007016 <_sungetc_r+0x10>
 800700e:	f04f 35ff 	mov.w	r5, #4294967295
 8007012:	4628      	mov	r0, r5
 8007014:	bd38      	pop	{r3, r4, r5, pc}
 8007016:	8993      	ldrh	r3, [r2, #12]
 8007018:	f023 0320 	bic.w	r3, r3, #32
 800701c:	8193      	strh	r3, [r2, #12]
 800701e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007020:	6852      	ldr	r2, [r2, #4]
 8007022:	b2cd      	uxtb	r5, r1
 8007024:	b18b      	cbz	r3, 800704a <_sungetc_r+0x44>
 8007026:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007028:	4293      	cmp	r3, r2
 800702a:	dd08      	ble.n	800703e <_sungetc_r+0x38>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	1e5a      	subs	r2, r3, #1
 8007030:	6022      	str	r2, [r4, #0]
 8007032:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007036:	6863      	ldr	r3, [r4, #4]
 8007038:	3301      	adds	r3, #1
 800703a:	6063      	str	r3, [r4, #4]
 800703c:	e7e9      	b.n	8007012 <_sungetc_r+0xc>
 800703e:	4621      	mov	r1, r4
 8007040:	f000 fc18 	bl	8007874 <__submore>
 8007044:	2800      	cmp	r0, #0
 8007046:	d0f1      	beq.n	800702c <_sungetc_r+0x26>
 8007048:	e7e1      	b.n	800700e <_sungetc_r+0x8>
 800704a:	6921      	ldr	r1, [r4, #16]
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	b151      	cbz	r1, 8007066 <_sungetc_r+0x60>
 8007050:	4299      	cmp	r1, r3
 8007052:	d208      	bcs.n	8007066 <_sungetc_r+0x60>
 8007054:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007058:	42a9      	cmp	r1, r5
 800705a:	d104      	bne.n	8007066 <_sungetc_r+0x60>
 800705c:	3b01      	subs	r3, #1
 800705e:	3201      	adds	r2, #1
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	6062      	str	r2, [r4, #4]
 8007064:	e7d5      	b.n	8007012 <_sungetc_r+0xc>
 8007066:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800706a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800706e:	6363      	str	r3, [r4, #52]	; 0x34
 8007070:	2303      	movs	r3, #3
 8007072:	63a3      	str	r3, [r4, #56]	; 0x38
 8007074:	4623      	mov	r3, r4
 8007076:	f803 5f46 	strb.w	r5, [r3, #70]!
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	2301      	movs	r3, #1
 800707e:	e7dc      	b.n	800703a <_sungetc_r+0x34>

08007080 <__ssrefill_r>:
 8007080:	b510      	push	{r4, lr}
 8007082:	460c      	mov	r4, r1
 8007084:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007086:	b169      	cbz	r1, 80070a4 <__ssrefill_r+0x24>
 8007088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800708c:	4299      	cmp	r1, r3
 800708e:	d001      	beq.n	8007094 <__ssrefill_r+0x14>
 8007090:	f7fc fd28 	bl	8003ae4 <_free_r>
 8007094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007096:	6063      	str	r3, [r4, #4]
 8007098:	2000      	movs	r0, #0
 800709a:	6360      	str	r0, [r4, #52]	; 0x34
 800709c:	b113      	cbz	r3, 80070a4 <__ssrefill_r+0x24>
 800709e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd10      	pop	{r4, pc}
 80070a4:	6923      	ldr	r3, [r4, #16]
 80070a6:	6023      	str	r3, [r4, #0]
 80070a8:	2300      	movs	r3, #0
 80070aa:	6063      	str	r3, [r4, #4]
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	f043 0320 	orr.w	r3, r3, #32
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295
 80070b8:	e7f3      	b.n	80070a2 <__ssrefill_r+0x22>
	...

080070bc <__ssvfiscanf_r>:
 80070bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c0:	460c      	mov	r4, r1
 80070c2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80070c6:	2100      	movs	r1, #0
 80070c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80070cc:	49a6      	ldr	r1, [pc, #664]	; (8007368 <__ssvfiscanf_r+0x2ac>)
 80070ce:	91a0      	str	r1, [sp, #640]	; 0x280
 80070d0:	f10d 0804 	add.w	r8, sp, #4
 80070d4:	49a5      	ldr	r1, [pc, #660]	; (800736c <__ssvfiscanf_r+0x2b0>)
 80070d6:	4fa6      	ldr	r7, [pc, #664]	; (8007370 <__ssvfiscanf_r+0x2b4>)
 80070d8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007374 <__ssvfiscanf_r+0x2b8>
 80070dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80070e0:	4606      	mov	r6, r0
 80070e2:	91a1      	str	r1, [sp, #644]	; 0x284
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	7813      	ldrb	r3, [r2, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 815a 	beq.w	80073a2 <__ssvfiscanf_r+0x2e6>
 80070ee:	5dd9      	ldrb	r1, [r3, r7]
 80070f0:	f011 0108 	ands.w	r1, r1, #8
 80070f4:	f102 0501 	add.w	r5, r2, #1
 80070f8:	d019      	beq.n	800712e <__ssvfiscanf_r+0x72>
 80070fa:	6863      	ldr	r3, [r4, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	dd0f      	ble.n	8007120 <__ssvfiscanf_r+0x64>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	781a      	ldrb	r2, [r3, #0]
 8007104:	5cba      	ldrb	r2, [r7, r2]
 8007106:	0712      	lsls	r2, r2, #28
 8007108:	d401      	bmi.n	800710e <__ssvfiscanf_r+0x52>
 800710a:	462a      	mov	r2, r5
 800710c:	e7eb      	b.n	80070e6 <__ssvfiscanf_r+0x2a>
 800710e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007110:	3201      	adds	r2, #1
 8007112:	9245      	str	r2, [sp, #276]	; 0x114
 8007114:	6862      	ldr	r2, [r4, #4]
 8007116:	3301      	adds	r3, #1
 8007118:	3a01      	subs	r2, #1
 800711a:	6062      	str	r2, [r4, #4]
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	e7ec      	b.n	80070fa <__ssvfiscanf_r+0x3e>
 8007120:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007122:	4621      	mov	r1, r4
 8007124:	4630      	mov	r0, r6
 8007126:	4798      	blx	r3
 8007128:	2800      	cmp	r0, #0
 800712a:	d0e9      	beq.n	8007100 <__ssvfiscanf_r+0x44>
 800712c:	e7ed      	b.n	800710a <__ssvfiscanf_r+0x4e>
 800712e:	2b25      	cmp	r3, #37	; 0x25
 8007130:	d012      	beq.n	8007158 <__ssvfiscanf_r+0x9c>
 8007132:	469a      	mov	sl, r3
 8007134:	6863      	ldr	r3, [r4, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f340 8091 	ble.w	800725e <__ssvfiscanf_r+0x1a2>
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	7813      	ldrb	r3, [r2, #0]
 8007140:	4553      	cmp	r3, sl
 8007142:	f040 812e 	bne.w	80073a2 <__ssvfiscanf_r+0x2e6>
 8007146:	6863      	ldr	r3, [r4, #4]
 8007148:	3b01      	subs	r3, #1
 800714a:	6063      	str	r3, [r4, #4]
 800714c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800714e:	3201      	adds	r2, #1
 8007150:	3301      	adds	r3, #1
 8007152:	6022      	str	r2, [r4, #0]
 8007154:	9345      	str	r3, [sp, #276]	; 0x114
 8007156:	e7d8      	b.n	800710a <__ssvfiscanf_r+0x4e>
 8007158:	9141      	str	r1, [sp, #260]	; 0x104
 800715a:	9143      	str	r1, [sp, #268]	; 0x10c
 800715c:	7853      	ldrb	r3, [r2, #1]
 800715e:	2b2a      	cmp	r3, #42	; 0x2a
 8007160:	bf02      	ittt	eq
 8007162:	2310      	moveq	r3, #16
 8007164:	1c95      	addeq	r5, r2, #2
 8007166:	9341      	streq	r3, [sp, #260]	; 0x104
 8007168:	220a      	movs	r2, #10
 800716a:	46aa      	mov	sl, r5
 800716c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007170:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007174:	2b09      	cmp	r3, #9
 8007176:	d91d      	bls.n	80071b4 <__ssvfiscanf_r+0xf8>
 8007178:	487e      	ldr	r0, [pc, #504]	; (8007374 <__ssvfiscanf_r+0x2b8>)
 800717a:	2203      	movs	r2, #3
 800717c:	f7f9 f848 	bl	8000210 <memchr>
 8007180:	b140      	cbz	r0, 8007194 <__ssvfiscanf_r+0xd8>
 8007182:	2301      	movs	r3, #1
 8007184:	eba0 0009 	sub.w	r0, r0, r9
 8007188:	fa03 f000 	lsl.w	r0, r3, r0
 800718c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800718e:	4318      	orrs	r0, r3
 8007190:	9041      	str	r0, [sp, #260]	; 0x104
 8007192:	4655      	mov	r5, sl
 8007194:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007198:	2b78      	cmp	r3, #120	; 0x78
 800719a:	d806      	bhi.n	80071aa <__ssvfiscanf_r+0xee>
 800719c:	2b57      	cmp	r3, #87	; 0x57
 800719e:	d810      	bhi.n	80071c2 <__ssvfiscanf_r+0x106>
 80071a0:	2b25      	cmp	r3, #37	; 0x25
 80071a2:	d0c6      	beq.n	8007132 <__ssvfiscanf_r+0x76>
 80071a4:	d856      	bhi.n	8007254 <__ssvfiscanf_r+0x198>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d064      	beq.n	8007274 <__ssvfiscanf_r+0x1b8>
 80071aa:	2303      	movs	r3, #3
 80071ac:	9347      	str	r3, [sp, #284]	; 0x11c
 80071ae:	230a      	movs	r3, #10
 80071b0:	9342      	str	r3, [sp, #264]	; 0x108
 80071b2:	e071      	b.n	8007298 <__ssvfiscanf_r+0x1dc>
 80071b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80071b6:	fb02 1103 	mla	r1, r2, r3, r1
 80071ba:	3930      	subs	r1, #48	; 0x30
 80071bc:	9143      	str	r1, [sp, #268]	; 0x10c
 80071be:	4655      	mov	r5, sl
 80071c0:	e7d3      	b.n	800716a <__ssvfiscanf_r+0xae>
 80071c2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80071c6:	2a20      	cmp	r2, #32
 80071c8:	d8ef      	bhi.n	80071aa <__ssvfiscanf_r+0xee>
 80071ca:	a101      	add	r1, pc, #4	; (adr r1, 80071d0 <__ssvfiscanf_r+0x114>)
 80071cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071d0:	08007283 	.word	0x08007283
 80071d4:	080071ab 	.word	0x080071ab
 80071d8:	080071ab 	.word	0x080071ab
 80071dc:	080072e1 	.word	0x080072e1
 80071e0:	080071ab 	.word	0x080071ab
 80071e4:	080071ab 	.word	0x080071ab
 80071e8:	080071ab 	.word	0x080071ab
 80071ec:	080071ab 	.word	0x080071ab
 80071f0:	080071ab 	.word	0x080071ab
 80071f4:	080071ab 	.word	0x080071ab
 80071f8:	080071ab 	.word	0x080071ab
 80071fc:	080072f7 	.word	0x080072f7
 8007200:	080072cd 	.word	0x080072cd
 8007204:	0800725b 	.word	0x0800725b
 8007208:	0800725b 	.word	0x0800725b
 800720c:	0800725b 	.word	0x0800725b
 8007210:	080071ab 	.word	0x080071ab
 8007214:	080072d1 	.word	0x080072d1
 8007218:	080071ab 	.word	0x080071ab
 800721c:	080071ab 	.word	0x080071ab
 8007220:	080071ab 	.word	0x080071ab
 8007224:	080071ab 	.word	0x080071ab
 8007228:	08007307 	.word	0x08007307
 800722c:	080072d9 	.word	0x080072d9
 8007230:	0800727b 	.word	0x0800727b
 8007234:	080071ab 	.word	0x080071ab
 8007238:	080071ab 	.word	0x080071ab
 800723c:	08007303 	.word	0x08007303
 8007240:	080071ab 	.word	0x080071ab
 8007244:	080072cd 	.word	0x080072cd
 8007248:	080071ab 	.word	0x080071ab
 800724c:	080071ab 	.word	0x080071ab
 8007250:	08007283 	.word	0x08007283
 8007254:	3b45      	subs	r3, #69	; 0x45
 8007256:	2b02      	cmp	r3, #2
 8007258:	d8a7      	bhi.n	80071aa <__ssvfiscanf_r+0xee>
 800725a:	2305      	movs	r3, #5
 800725c:	e01b      	b.n	8007296 <__ssvfiscanf_r+0x1da>
 800725e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007260:	4621      	mov	r1, r4
 8007262:	4630      	mov	r0, r6
 8007264:	4798      	blx	r3
 8007266:	2800      	cmp	r0, #0
 8007268:	f43f af68 	beq.w	800713c <__ssvfiscanf_r+0x80>
 800726c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800726e:	2800      	cmp	r0, #0
 8007270:	f040 808d 	bne.w	800738e <__ssvfiscanf_r+0x2d2>
 8007274:	f04f 30ff 	mov.w	r0, #4294967295
 8007278:	e08f      	b.n	800739a <__ssvfiscanf_r+0x2de>
 800727a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800727c:	f042 0220 	orr.w	r2, r2, #32
 8007280:	9241      	str	r2, [sp, #260]	; 0x104
 8007282:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007288:	9241      	str	r2, [sp, #260]	; 0x104
 800728a:	2210      	movs	r2, #16
 800728c:	2b6f      	cmp	r3, #111	; 0x6f
 800728e:	9242      	str	r2, [sp, #264]	; 0x108
 8007290:	bf34      	ite	cc
 8007292:	2303      	movcc	r3, #3
 8007294:	2304      	movcs	r3, #4
 8007296:	9347      	str	r3, [sp, #284]	; 0x11c
 8007298:	6863      	ldr	r3, [r4, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	dd42      	ble.n	8007324 <__ssvfiscanf_r+0x268>
 800729e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80072a0:	0659      	lsls	r1, r3, #25
 80072a2:	d404      	bmi.n	80072ae <__ssvfiscanf_r+0x1f2>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	781a      	ldrb	r2, [r3, #0]
 80072a8:	5cba      	ldrb	r2, [r7, r2]
 80072aa:	0712      	lsls	r2, r2, #28
 80072ac:	d441      	bmi.n	8007332 <__ssvfiscanf_r+0x276>
 80072ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	dc50      	bgt.n	8007356 <__ssvfiscanf_r+0x29a>
 80072b4:	466b      	mov	r3, sp
 80072b6:	4622      	mov	r2, r4
 80072b8:	a941      	add	r1, sp, #260	; 0x104
 80072ba:	4630      	mov	r0, r6
 80072bc:	f000 f876 	bl	80073ac <_scanf_chars>
 80072c0:	2801      	cmp	r0, #1
 80072c2:	d06e      	beq.n	80073a2 <__ssvfiscanf_r+0x2e6>
 80072c4:	2802      	cmp	r0, #2
 80072c6:	f47f af20 	bne.w	800710a <__ssvfiscanf_r+0x4e>
 80072ca:	e7cf      	b.n	800726c <__ssvfiscanf_r+0x1b0>
 80072cc:	220a      	movs	r2, #10
 80072ce:	e7dd      	b.n	800728c <__ssvfiscanf_r+0x1d0>
 80072d0:	2300      	movs	r3, #0
 80072d2:	9342      	str	r3, [sp, #264]	; 0x108
 80072d4:	2303      	movs	r3, #3
 80072d6:	e7de      	b.n	8007296 <__ssvfiscanf_r+0x1da>
 80072d8:	2308      	movs	r3, #8
 80072da:	9342      	str	r3, [sp, #264]	; 0x108
 80072dc:	2304      	movs	r3, #4
 80072de:	e7da      	b.n	8007296 <__ssvfiscanf_r+0x1da>
 80072e0:	4629      	mov	r1, r5
 80072e2:	4640      	mov	r0, r8
 80072e4:	f000 f9c6 	bl	8007674 <__sccl>
 80072e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80072ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ee:	9341      	str	r3, [sp, #260]	; 0x104
 80072f0:	4605      	mov	r5, r0
 80072f2:	2301      	movs	r3, #1
 80072f4:	e7cf      	b.n	8007296 <__ssvfiscanf_r+0x1da>
 80072f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80072f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fc:	9341      	str	r3, [sp, #260]	; 0x104
 80072fe:	2300      	movs	r3, #0
 8007300:	e7c9      	b.n	8007296 <__ssvfiscanf_r+0x1da>
 8007302:	2302      	movs	r3, #2
 8007304:	e7c7      	b.n	8007296 <__ssvfiscanf_r+0x1da>
 8007306:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007308:	06c3      	lsls	r3, r0, #27
 800730a:	f53f aefe 	bmi.w	800710a <__ssvfiscanf_r+0x4e>
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007312:	1d19      	adds	r1, r3, #4
 8007314:	9100      	str	r1, [sp, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f010 0f01 	tst.w	r0, #1
 800731c:	bf14      	ite	ne
 800731e:	801a      	strhne	r2, [r3, #0]
 8007320:	601a      	streq	r2, [r3, #0]
 8007322:	e6f2      	b.n	800710a <__ssvfiscanf_r+0x4e>
 8007324:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007326:	4621      	mov	r1, r4
 8007328:	4630      	mov	r0, r6
 800732a:	4798      	blx	r3
 800732c:	2800      	cmp	r0, #0
 800732e:	d0b6      	beq.n	800729e <__ssvfiscanf_r+0x1e2>
 8007330:	e79c      	b.n	800726c <__ssvfiscanf_r+0x1b0>
 8007332:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007334:	3201      	adds	r2, #1
 8007336:	9245      	str	r2, [sp, #276]	; 0x114
 8007338:	6862      	ldr	r2, [r4, #4]
 800733a:	3a01      	subs	r2, #1
 800733c:	2a00      	cmp	r2, #0
 800733e:	6062      	str	r2, [r4, #4]
 8007340:	dd02      	ble.n	8007348 <__ssvfiscanf_r+0x28c>
 8007342:	3301      	adds	r3, #1
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	e7ad      	b.n	80072a4 <__ssvfiscanf_r+0x1e8>
 8007348:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800734a:	4621      	mov	r1, r4
 800734c:	4630      	mov	r0, r6
 800734e:	4798      	blx	r3
 8007350:	2800      	cmp	r0, #0
 8007352:	d0a7      	beq.n	80072a4 <__ssvfiscanf_r+0x1e8>
 8007354:	e78a      	b.n	800726c <__ssvfiscanf_r+0x1b0>
 8007356:	2b04      	cmp	r3, #4
 8007358:	dc0e      	bgt.n	8007378 <__ssvfiscanf_r+0x2bc>
 800735a:	466b      	mov	r3, sp
 800735c:	4622      	mov	r2, r4
 800735e:	a941      	add	r1, sp, #260	; 0x104
 8007360:	4630      	mov	r0, r6
 8007362:	f000 f87d 	bl	8007460 <_scanf_i>
 8007366:	e7ab      	b.n	80072c0 <__ssvfiscanf_r+0x204>
 8007368:	08007007 	.word	0x08007007
 800736c:	08007081 	.word	0x08007081
 8007370:	08007e46 	.word	0x08007e46
 8007374:	08007e3a 	.word	0x08007e3a
 8007378:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <__ssvfiscanf_r+0x2ec>)
 800737a:	2b00      	cmp	r3, #0
 800737c:	f43f aec5 	beq.w	800710a <__ssvfiscanf_r+0x4e>
 8007380:	466b      	mov	r3, sp
 8007382:	4622      	mov	r2, r4
 8007384:	a941      	add	r1, sp, #260	; 0x104
 8007386:	4630      	mov	r0, r6
 8007388:	f3af 8000 	nop.w
 800738c:	e798      	b.n	80072c0 <__ssvfiscanf_r+0x204>
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007394:	bf18      	it	ne
 8007396:	f04f 30ff 	movne.w	r0, #4294967295
 800739a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80073a4:	e7f9      	b.n	800739a <__ssvfiscanf_r+0x2de>
 80073a6:	bf00      	nop
 80073a8:	00000000 	.word	0x00000000

080073ac <_scanf_chars>:
 80073ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	4615      	mov	r5, r2
 80073b2:	688a      	ldr	r2, [r1, #8]
 80073b4:	4680      	mov	r8, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	b932      	cbnz	r2, 80073c8 <_scanf_chars+0x1c>
 80073ba:	698a      	ldr	r2, [r1, #24]
 80073bc:	2a00      	cmp	r2, #0
 80073be:	bf0c      	ite	eq
 80073c0:	2201      	moveq	r2, #1
 80073c2:	f04f 32ff 	movne.w	r2, #4294967295
 80073c6:	608a      	str	r2, [r1, #8]
 80073c8:	6822      	ldr	r2, [r4, #0]
 80073ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800745c <_scanf_chars+0xb0>
 80073ce:	06d1      	lsls	r1, r2, #27
 80073d0:	bf5f      	itttt	pl
 80073d2:	681a      	ldrpl	r2, [r3, #0]
 80073d4:	1d11      	addpl	r1, r2, #4
 80073d6:	6019      	strpl	r1, [r3, #0]
 80073d8:	6816      	ldrpl	r6, [r2, #0]
 80073da:	2700      	movs	r7, #0
 80073dc:	69a0      	ldr	r0, [r4, #24]
 80073de:	b188      	cbz	r0, 8007404 <_scanf_chars+0x58>
 80073e0:	2801      	cmp	r0, #1
 80073e2:	d107      	bne.n	80073f4 <_scanf_chars+0x48>
 80073e4:	682a      	ldr	r2, [r5, #0]
 80073e6:	7811      	ldrb	r1, [r2, #0]
 80073e8:	6962      	ldr	r2, [r4, #20]
 80073ea:	5c52      	ldrb	r2, [r2, r1]
 80073ec:	b952      	cbnz	r2, 8007404 <_scanf_chars+0x58>
 80073ee:	2f00      	cmp	r7, #0
 80073f0:	d031      	beq.n	8007456 <_scanf_chars+0xaa>
 80073f2:	e022      	b.n	800743a <_scanf_chars+0x8e>
 80073f4:	2802      	cmp	r0, #2
 80073f6:	d120      	bne.n	800743a <_scanf_chars+0x8e>
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007400:	071b      	lsls	r3, r3, #28
 8007402:	d41a      	bmi.n	800743a <_scanf_chars+0x8e>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	06da      	lsls	r2, r3, #27
 8007408:	bf5e      	ittt	pl
 800740a:	682b      	ldrpl	r3, [r5, #0]
 800740c:	781b      	ldrbpl	r3, [r3, #0]
 800740e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007412:	682a      	ldr	r2, [r5, #0]
 8007414:	686b      	ldr	r3, [r5, #4]
 8007416:	3201      	adds	r2, #1
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	68a2      	ldr	r2, [r4, #8]
 800741c:	3b01      	subs	r3, #1
 800741e:	3a01      	subs	r2, #1
 8007420:	606b      	str	r3, [r5, #4]
 8007422:	3701      	adds	r7, #1
 8007424:	60a2      	str	r2, [r4, #8]
 8007426:	b142      	cbz	r2, 800743a <_scanf_chars+0x8e>
 8007428:	2b00      	cmp	r3, #0
 800742a:	dcd7      	bgt.n	80073dc <_scanf_chars+0x30>
 800742c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007430:	4629      	mov	r1, r5
 8007432:	4640      	mov	r0, r8
 8007434:	4798      	blx	r3
 8007436:	2800      	cmp	r0, #0
 8007438:	d0d0      	beq.n	80073dc <_scanf_chars+0x30>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	f013 0310 	ands.w	r3, r3, #16
 8007440:	d105      	bne.n	800744e <_scanf_chars+0xa2>
 8007442:	68e2      	ldr	r2, [r4, #12]
 8007444:	3201      	adds	r2, #1
 8007446:	60e2      	str	r2, [r4, #12]
 8007448:	69a2      	ldr	r2, [r4, #24]
 800744a:	b102      	cbz	r2, 800744e <_scanf_chars+0xa2>
 800744c:	7033      	strb	r3, [r6, #0]
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	443b      	add	r3, r7
 8007452:	6123      	str	r3, [r4, #16]
 8007454:	2000      	movs	r0, #0
 8007456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800745a:	bf00      	nop
 800745c:	08007e46 	.word	0x08007e46

08007460 <_scanf_i>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	4698      	mov	r8, r3
 8007466:	4b76      	ldr	r3, [pc, #472]	; (8007640 <_scanf_i+0x1e0>)
 8007468:	460c      	mov	r4, r1
 800746a:	4682      	mov	sl, r0
 800746c:	4616      	mov	r6, r2
 800746e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007472:	b087      	sub	sp, #28
 8007474:	ab03      	add	r3, sp, #12
 8007476:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800747a:	4b72      	ldr	r3, [pc, #456]	; (8007644 <_scanf_i+0x1e4>)
 800747c:	69a1      	ldr	r1, [r4, #24]
 800747e:	4a72      	ldr	r2, [pc, #456]	; (8007648 <_scanf_i+0x1e8>)
 8007480:	2903      	cmp	r1, #3
 8007482:	bf18      	it	ne
 8007484:	461a      	movne	r2, r3
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	9201      	str	r2, [sp, #4]
 800748a:	1e5a      	subs	r2, r3, #1
 800748c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007490:	bf88      	it	hi
 8007492:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007496:	4627      	mov	r7, r4
 8007498:	bf82      	ittt	hi
 800749a:	eb03 0905 	addhi.w	r9, r3, r5
 800749e:	f240 135d 	movwhi	r3, #349	; 0x15d
 80074a2:	60a3      	strhi	r3, [r4, #8]
 80074a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80074a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80074ac:	bf98      	it	ls
 80074ae:	f04f 0900 	movls.w	r9, #0
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	463d      	mov	r5, r7
 80074b6:	f04f 0b00 	mov.w	fp, #0
 80074ba:	6831      	ldr	r1, [r6, #0]
 80074bc:	ab03      	add	r3, sp, #12
 80074be:	7809      	ldrb	r1, [r1, #0]
 80074c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80074c4:	2202      	movs	r2, #2
 80074c6:	f7f8 fea3 	bl	8000210 <memchr>
 80074ca:	b328      	cbz	r0, 8007518 <_scanf_i+0xb8>
 80074cc:	f1bb 0f01 	cmp.w	fp, #1
 80074d0:	d159      	bne.n	8007586 <_scanf_i+0x126>
 80074d2:	6862      	ldr	r2, [r4, #4]
 80074d4:	b92a      	cbnz	r2, 80074e2 <_scanf_i+0x82>
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	2308      	movs	r3, #8
 80074da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074de:	6063      	str	r3, [r4, #4]
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80074e8:	6022      	str	r2, [r4, #0]
 80074ea:	68a2      	ldr	r2, [r4, #8]
 80074ec:	1e51      	subs	r1, r2, #1
 80074ee:	60a1      	str	r1, [r4, #8]
 80074f0:	b192      	cbz	r2, 8007518 <_scanf_i+0xb8>
 80074f2:	6832      	ldr	r2, [r6, #0]
 80074f4:	1c51      	adds	r1, r2, #1
 80074f6:	6031      	str	r1, [r6, #0]
 80074f8:	7812      	ldrb	r2, [r2, #0]
 80074fa:	f805 2b01 	strb.w	r2, [r5], #1
 80074fe:	6872      	ldr	r2, [r6, #4]
 8007500:	3a01      	subs	r2, #1
 8007502:	2a00      	cmp	r2, #0
 8007504:	6072      	str	r2, [r6, #4]
 8007506:	dc07      	bgt.n	8007518 <_scanf_i+0xb8>
 8007508:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800750c:	4631      	mov	r1, r6
 800750e:	4650      	mov	r0, sl
 8007510:	4790      	blx	r2
 8007512:	2800      	cmp	r0, #0
 8007514:	f040 8085 	bne.w	8007622 <_scanf_i+0x1c2>
 8007518:	f10b 0b01 	add.w	fp, fp, #1
 800751c:	f1bb 0f03 	cmp.w	fp, #3
 8007520:	d1cb      	bne.n	80074ba <_scanf_i+0x5a>
 8007522:	6863      	ldr	r3, [r4, #4]
 8007524:	b90b      	cbnz	r3, 800752a <_scanf_i+0xca>
 8007526:	230a      	movs	r3, #10
 8007528:	6063      	str	r3, [r4, #4]
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	4947      	ldr	r1, [pc, #284]	; (800764c <_scanf_i+0x1ec>)
 800752e:	6960      	ldr	r0, [r4, #20]
 8007530:	1ac9      	subs	r1, r1, r3
 8007532:	f000 f89f 	bl	8007674 <__sccl>
 8007536:	f04f 0b00 	mov.w	fp, #0
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	6822      	ldr	r2, [r4, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d03d      	beq.n	80075be <_scanf_i+0x15e>
 8007542:	6831      	ldr	r1, [r6, #0]
 8007544:	6960      	ldr	r0, [r4, #20]
 8007546:	f891 c000 	ldrb.w	ip, [r1]
 800754a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800754e:	2800      	cmp	r0, #0
 8007550:	d035      	beq.n	80075be <_scanf_i+0x15e>
 8007552:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007556:	d124      	bne.n	80075a2 <_scanf_i+0x142>
 8007558:	0510      	lsls	r0, r2, #20
 800755a:	d522      	bpl.n	80075a2 <_scanf_i+0x142>
 800755c:	f10b 0b01 	add.w	fp, fp, #1
 8007560:	f1b9 0f00 	cmp.w	r9, #0
 8007564:	d003      	beq.n	800756e <_scanf_i+0x10e>
 8007566:	3301      	adds	r3, #1
 8007568:	f109 39ff 	add.w	r9, r9, #4294967295
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	6873      	ldr	r3, [r6, #4]
 8007570:	3b01      	subs	r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	6073      	str	r3, [r6, #4]
 8007576:	dd1b      	ble.n	80075b0 <_scanf_i+0x150>
 8007578:	6833      	ldr	r3, [r6, #0]
 800757a:	3301      	adds	r3, #1
 800757c:	6033      	str	r3, [r6, #0]
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	3b01      	subs	r3, #1
 8007582:	60a3      	str	r3, [r4, #8]
 8007584:	e7d9      	b.n	800753a <_scanf_i+0xda>
 8007586:	f1bb 0f02 	cmp.w	fp, #2
 800758a:	d1ae      	bne.n	80074ea <_scanf_i+0x8a>
 800758c:	6822      	ldr	r2, [r4, #0]
 800758e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007592:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007596:	d1bf      	bne.n	8007518 <_scanf_i+0xb8>
 8007598:	2310      	movs	r3, #16
 800759a:	6063      	str	r3, [r4, #4]
 800759c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075a0:	e7a2      	b.n	80074e8 <_scanf_i+0x88>
 80075a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80075a6:	6022      	str	r2, [r4, #0]
 80075a8:	780b      	ldrb	r3, [r1, #0]
 80075aa:	f805 3b01 	strb.w	r3, [r5], #1
 80075ae:	e7de      	b.n	800756e <_scanf_i+0x10e>
 80075b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075b4:	4631      	mov	r1, r6
 80075b6:	4650      	mov	r0, sl
 80075b8:	4798      	blx	r3
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d0df      	beq.n	800757e <_scanf_i+0x11e>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	05db      	lsls	r3, r3, #23
 80075c2:	d50d      	bpl.n	80075e0 <_scanf_i+0x180>
 80075c4:	42bd      	cmp	r5, r7
 80075c6:	d909      	bls.n	80075dc <_scanf_i+0x17c>
 80075c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80075cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075d0:	4632      	mov	r2, r6
 80075d2:	4650      	mov	r0, sl
 80075d4:	4798      	blx	r3
 80075d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80075da:	464d      	mov	r5, r9
 80075dc:	42bd      	cmp	r5, r7
 80075de:	d02d      	beq.n	800763c <_scanf_i+0x1dc>
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	f012 0210 	ands.w	r2, r2, #16
 80075e6:	d113      	bne.n	8007610 <_scanf_i+0x1b0>
 80075e8:	702a      	strb	r2, [r5, #0]
 80075ea:	6863      	ldr	r3, [r4, #4]
 80075ec:	9e01      	ldr	r6, [sp, #4]
 80075ee:	4639      	mov	r1, r7
 80075f0:	4650      	mov	r0, sl
 80075f2:	47b0      	blx	r6
 80075f4:	6821      	ldr	r1, [r4, #0]
 80075f6:	f8d8 3000 	ldr.w	r3, [r8]
 80075fa:	f011 0f20 	tst.w	r1, #32
 80075fe:	d013      	beq.n	8007628 <_scanf_i+0x1c8>
 8007600:	1d1a      	adds	r2, r3, #4
 8007602:	f8c8 2000 	str.w	r2, [r8]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6018      	str	r0, [r3, #0]
 800760a:	68e3      	ldr	r3, [r4, #12]
 800760c:	3301      	adds	r3, #1
 800760e:	60e3      	str	r3, [r4, #12]
 8007610:	1bed      	subs	r5, r5, r7
 8007612:	44ab      	add	fp, r5
 8007614:	6925      	ldr	r5, [r4, #16]
 8007616:	445d      	add	r5, fp
 8007618:	6125      	str	r5, [r4, #16]
 800761a:	2000      	movs	r0, #0
 800761c:	b007      	add	sp, #28
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	f04f 0b00 	mov.w	fp, #0
 8007626:	e7ca      	b.n	80075be <_scanf_i+0x15e>
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	f8c8 2000 	str.w	r2, [r8]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f011 0f01 	tst.w	r1, #1
 8007634:	bf14      	ite	ne
 8007636:	8018      	strhne	r0, [r3, #0]
 8007638:	6018      	streq	r0, [r3, #0]
 800763a:	e7e6      	b.n	800760a <_scanf_i+0x1aa>
 800763c:	2001      	movs	r0, #1
 800763e:	e7ed      	b.n	800761c <_scanf_i+0x1bc>
 8007640:	08007abc 	.word	0x08007abc
 8007644:	080068ed 	.word	0x080068ed
 8007648:	08007871 	.word	0x08007871
 800764c:	08007fcb 	.word	0x08007fcb

08007650 <_read_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	; (8007670 <_read_r+0x20>)
 8007654:	4604      	mov	r4, r0
 8007656:	4608      	mov	r0, r1
 8007658:	4611      	mov	r1, r2
 800765a:	2200      	movs	r2, #0
 800765c:	602a      	str	r2, [r5, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	f7fa fd6c 	bl	800213c <_read>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_read_r+0x1e>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_read_r+0x1e>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	200003b8 	.word	0x200003b8

08007674 <__sccl>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	780b      	ldrb	r3, [r1, #0]
 8007678:	4604      	mov	r4, r0
 800767a:	2b5e      	cmp	r3, #94	; 0x5e
 800767c:	bf0b      	itete	eq
 800767e:	784b      	ldrbeq	r3, [r1, #1]
 8007680:	1c48      	addne	r0, r1, #1
 8007682:	1c88      	addeq	r0, r1, #2
 8007684:	2200      	movne	r2, #0
 8007686:	bf08      	it	eq
 8007688:	2201      	moveq	r2, #1
 800768a:	1e61      	subs	r1, r4, #1
 800768c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007690:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007694:	42a9      	cmp	r1, r5
 8007696:	d1fb      	bne.n	8007690 <__sccl+0x1c>
 8007698:	b90b      	cbnz	r3, 800769e <__sccl+0x2a>
 800769a:	3801      	subs	r0, #1
 800769c:	bd70      	pop	{r4, r5, r6, pc}
 800769e:	f082 0201 	eor.w	r2, r2, #1
 80076a2:	54e2      	strb	r2, [r4, r3]
 80076a4:	4605      	mov	r5, r0
 80076a6:	4628      	mov	r0, r5
 80076a8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80076ac:	292d      	cmp	r1, #45	; 0x2d
 80076ae:	d006      	beq.n	80076be <__sccl+0x4a>
 80076b0:	295d      	cmp	r1, #93	; 0x5d
 80076b2:	d0f3      	beq.n	800769c <__sccl+0x28>
 80076b4:	b909      	cbnz	r1, 80076ba <__sccl+0x46>
 80076b6:	4628      	mov	r0, r5
 80076b8:	e7f0      	b.n	800769c <__sccl+0x28>
 80076ba:	460b      	mov	r3, r1
 80076bc:	e7f1      	b.n	80076a2 <__sccl+0x2e>
 80076be:	786e      	ldrb	r6, [r5, #1]
 80076c0:	2e5d      	cmp	r6, #93	; 0x5d
 80076c2:	d0fa      	beq.n	80076ba <__sccl+0x46>
 80076c4:	42b3      	cmp	r3, r6
 80076c6:	dcf8      	bgt.n	80076ba <__sccl+0x46>
 80076c8:	3502      	adds	r5, #2
 80076ca:	4619      	mov	r1, r3
 80076cc:	3101      	adds	r1, #1
 80076ce:	428e      	cmp	r6, r1
 80076d0:	5462      	strb	r2, [r4, r1]
 80076d2:	dcfb      	bgt.n	80076cc <__sccl+0x58>
 80076d4:	1af1      	subs	r1, r6, r3
 80076d6:	3901      	subs	r1, #1
 80076d8:	1c58      	adds	r0, r3, #1
 80076da:	42b3      	cmp	r3, r6
 80076dc:	bfa8      	it	ge
 80076de:	2100      	movge	r1, #0
 80076e0:	1843      	adds	r3, r0, r1
 80076e2:	e7e0      	b.n	80076a6 <__sccl+0x32>

080076e4 <_raise_r>:
 80076e4:	291f      	cmp	r1, #31
 80076e6:	b538      	push	{r3, r4, r5, lr}
 80076e8:	4604      	mov	r4, r0
 80076ea:	460d      	mov	r5, r1
 80076ec:	d904      	bls.n	80076f8 <_raise_r+0x14>
 80076ee:	2316      	movs	r3, #22
 80076f0:	6003      	str	r3, [r0, #0]
 80076f2:	f04f 30ff 	mov.w	r0, #4294967295
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076fa:	b112      	cbz	r2, 8007702 <_raise_r+0x1e>
 80076fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007700:	b94b      	cbnz	r3, 8007716 <_raise_r+0x32>
 8007702:	4620      	mov	r0, r4
 8007704:	f000 f830 	bl	8007768 <_getpid_r>
 8007708:	462a      	mov	r2, r5
 800770a:	4601      	mov	r1, r0
 800770c:	4620      	mov	r0, r4
 800770e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007712:	f000 b817 	b.w	8007744 <_kill_r>
 8007716:	2b01      	cmp	r3, #1
 8007718:	d00a      	beq.n	8007730 <_raise_r+0x4c>
 800771a:	1c59      	adds	r1, r3, #1
 800771c:	d103      	bne.n	8007726 <_raise_r+0x42>
 800771e:	2316      	movs	r3, #22
 8007720:	6003      	str	r3, [r0, #0]
 8007722:	2001      	movs	r0, #1
 8007724:	e7e7      	b.n	80076f6 <_raise_r+0x12>
 8007726:	2400      	movs	r4, #0
 8007728:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800772c:	4628      	mov	r0, r5
 800772e:	4798      	blx	r3
 8007730:	2000      	movs	r0, #0
 8007732:	e7e0      	b.n	80076f6 <_raise_r+0x12>

08007734 <raise>:
 8007734:	4b02      	ldr	r3, [pc, #8]	; (8007740 <raise+0xc>)
 8007736:	4601      	mov	r1, r0
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	f7ff bfd3 	b.w	80076e4 <_raise_r>
 800773e:	bf00      	nop
 8007740:	20000014 	.word	0x20000014

08007744 <_kill_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	4d07      	ldr	r5, [pc, #28]	; (8007764 <_kill_r+0x20>)
 8007748:	2300      	movs	r3, #0
 800774a:	4604      	mov	r4, r0
 800774c:	4608      	mov	r0, r1
 800774e:	4611      	mov	r1, r2
 8007750:	602b      	str	r3, [r5, #0]
 8007752:	f7fa fcd9 	bl	8002108 <_kill>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	d102      	bne.n	8007760 <_kill_r+0x1c>
 800775a:	682b      	ldr	r3, [r5, #0]
 800775c:	b103      	cbz	r3, 8007760 <_kill_r+0x1c>
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	bd38      	pop	{r3, r4, r5, pc}
 8007762:	bf00      	nop
 8007764:	200003b8 	.word	0x200003b8

08007768 <_getpid_r>:
 8007768:	f7fa bcc6 	b.w	80020f8 <_getpid>

0800776c <_strtol_l.constprop.0>:
 800776c:	2b01      	cmp	r3, #1
 800776e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007772:	d001      	beq.n	8007778 <_strtol_l.constprop.0+0xc>
 8007774:	2b24      	cmp	r3, #36	; 0x24
 8007776:	d906      	bls.n	8007786 <_strtol_l.constprop.0+0x1a>
 8007778:	f7fc f860 	bl	800383c <__errno>
 800777c:	2316      	movs	r3, #22
 800777e:	6003      	str	r3, [r0, #0]
 8007780:	2000      	movs	r0, #0
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007786:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800786c <_strtol_l.constprop.0+0x100>
 800778a:	460d      	mov	r5, r1
 800778c:	462e      	mov	r6, r5
 800778e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007792:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007796:	f017 0708 	ands.w	r7, r7, #8
 800779a:	d1f7      	bne.n	800778c <_strtol_l.constprop.0+0x20>
 800779c:	2c2d      	cmp	r4, #45	; 0x2d
 800779e:	d132      	bne.n	8007806 <_strtol_l.constprop.0+0x9a>
 80077a0:	782c      	ldrb	r4, [r5, #0]
 80077a2:	2701      	movs	r7, #1
 80077a4:	1cb5      	adds	r5, r6, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d05b      	beq.n	8007862 <_strtol_l.constprop.0+0xf6>
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d109      	bne.n	80077c2 <_strtol_l.constprop.0+0x56>
 80077ae:	2c30      	cmp	r4, #48	; 0x30
 80077b0:	d107      	bne.n	80077c2 <_strtol_l.constprop.0+0x56>
 80077b2:	782c      	ldrb	r4, [r5, #0]
 80077b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077b8:	2c58      	cmp	r4, #88	; 0x58
 80077ba:	d14d      	bne.n	8007858 <_strtol_l.constprop.0+0xec>
 80077bc:	786c      	ldrb	r4, [r5, #1]
 80077be:	2310      	movs	r3, #16
 80077c0:	3502      	adds	r5, #2
 80077c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80077c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80077ca:	f04f 0c00 	mov.w	ip, #0
 80077ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80077d2:	4666      	mov	r6, ip
 80077d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80077d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80077dc:	f1be 0f09 	cmp.w	lr, #9
 80077e0:	d816      	bhi.n	8007810 <_strtol_l.constprop.0+0xa4>
 80077e2:	4674      	mov	r4, lr
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	dd24      	ble.n	8007832 <_strtol_l.constprop.0+0xc6>
 80077e8:	f1bc 0f00 	cmp.w	ip, #0
 80077ec:	db1e      	blt.n	800782c <_strtol_l.constprop.0+0xc0>
 80077ee:	45b1      	cmp	r9, r6
 80077f0:	d31c      	bcc.n	800782c <_strtol_l.constprop.0+0xc0>
 80077f2:	d101      	bne.n	80077f8 <_strtol_l.constprop.0+0x8c>
 80077f4:	45a2      	cmp	sl, r4
 80077f6:	db19      	blt.n	800782c <_strtol_l.constprop.0+0xc0>
 80077f8:	fb06 4603 	mla	r6, r6, r3, r4
 80077fc:	f04f 0c01 	mov.w	ip, #1
 8007800:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007804:	e7e8      	b.n	80077d8 <_strtol_l.constprop.0+0x6c>
 8007806:	2c2b      	cmp	r4, #43	; 0x2b
 8007808:	bf04      	itt	eq
 800780a:	782c      	ldrbeq	r4, [r5, #0]
 800780c:	1cb5      	addeq	r5, r6, #2
 800780e:	e7ca      	b.n	80077a6 <_strtol_l.constprop.0+0x3a>
 8007810:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007814:	f1be 0f19 	cmp.w	lr, #25
 8007818:	d801      	bhi.n	800781e <_strtol_l.constprop.0+0xb2>
 800781a:	3c37      	subs	r4, #55	; 0x37
 800781c:	e7e2      	b.n	80077e4 <_strtol_l.constprop.0+0x78>
 800781e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007822:	f1be 0f19 	cmp.w	lr, #25
 8007826:	d804      	bhi.n	8007832 <_strtol_l.constprop.0+0xc6>
 8007828:	3c57      	subs	r4, #87	; 0x57
 800782a:	e7db      	b.n	80077e4 <_strtol_l.constprop.0+0x78>
 800782c:	f04f 3cff 	mov.w	ip, #4294967295
 8007830:	e7e6      	b.n	8007800 <_strtol_l.constprop.0+0x94>
 8007832:	f1bc 0f00 	cmp.w	ip, #0
 8007836:	da05      	bge.n	8007844 <_strtol_l.constprop.0+0xd8>
 8007838:	2322      	movs	r3, #34	; 0x22
 800783a:	6003      	str	r3, [r0, #0]
 800783c:	4646      	mov	r6, r8
 800783e:	b942      	cbnz	r2, 8007852 <_strtol_l.constprop.0+0xe6>
 8007840:	4630      	mov	r0, r6
 8007842:	e79e      	b.n	8007782 <_strtol_l.constprop.0+0x16>
 8007844:	b107      	cbz	r7, 8007848 <_strtol_l.constprop.0+0xdc>
 8007846:	4276      	negs	r6, r6
 8007848:	2a00      	cmp	r2, #0
 800784a:	d0f9      	beq.n	8007840 <_strtol_l.constprop.0+0xd4>
 800784c:	f1bc 0f00 	cmp.w	ip, #0
 8007850:	d000      	beq.n	8007854 <_strtol_l.constprop.0+0xe8>
 8007852:	1e69      	subs	r1, r5, #1
 8007854:	6011      	str	r1, [r2, #0]
 8007856:	e7f3      	b.n	8007840 <_strtol_l.constprop.0+0xd4>
 8007858:	2430      	movs	r4, #48	; 0x30
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1b1      	bne.n	80077c2 <_strtol_l.constprop.0+0x56>
 800785e:	2308      	movs	r3, #8
 8007860:	e7af      	b.n	80077c2 <_strtol_l.constprop.0+0x56>
 8007862:	2c30      	cmp	r4, #48	; 0x30
 8007864:	d0a5      	beq.n	80077b2 <_strtol_l.constprop.0+0x46>
 8007866:	230a      	movs	r3, #10
 8007868:	e7ab      	b.n	80077c2 <_strtol_l.constprop.0+0x56>
 800786a:	bf00      	nop
 800786c:	08007e46 	.word	0x08007e46

08007870 <_strtol_r>:
 8007870:	f7ff bf7c 	b.w	800776c <_strtol_l.constprop.0>

08007874 <__submore>:
 8007874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007878:	460c      	mov	r4, r1
 800787a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800787c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007880:	4299      	cmp	r1, r3
 8007882:	d11d      	bne.n	80078c0 <__submore+0x4c>
 8007884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007888:	f7fc f998 	bl	8003bbc <_malloc_r>
 800788c:	b918      	cbnz	r0, 8007896 <__submore+0x22>
 800788e:	f04f 30ff 	mov.w	r0, #4294967295
 8007892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800789a:	63a3      	str	r3, [r4, #56]	; 0x38
 800789c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80078a0:	6360      	str	r0, [r4, #52]	; 0x34
 80078a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80078a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80078aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80078ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80078b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80078b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80078ba:	6020      	str	r0, [r4, #0]
 80078bc:	2000      	movs	r0, #0
 80078be:	e7e8      	b.n	8007892 <__submore+0x1e>
 80078c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80078c2:	0077      	lsls	r7, r6, #1
 80078c4:	463a      	mov	r2, r7
 80078c6:	f7ff fb6f 	bl	8006fa8 <_realloc_r>
 80078ca:	4605      	mov	r5, r0
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d0de      	beq.n	800788e <__submore+0x1a>
 80078d0:	eb00 0806 	add.w	r8, r0, r6
 80078d4:	4601      	mov	r1, r0
 80078d6:	4632      	mov	r2, r6
 80078d8:	4640      	mov	r0, r8
 80078da:	f7fe f89c 	bl	8005a16 <memcpy>
 80078de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80078e2:	f8c4 8000 	str.w	r8, [r4]
 80078e6:	e7e9      	b.n	80078bc <__submore+0x48>

080078e8 <__ascii_wctomb>:
 80078e8:	b149      	cbz	r1, 80078fe <__ascii_wctomb+0x16>
 80078ea:	2aff      	cmp	r2, #255	; 0xff
 80078ec:	bf85      	ittet	hi
 80078ee:	238a      	movhi	r3, #138	; 0x8a
 80078f0:	6003      	strhi	r3, [r0, #0]
 80078f2:	700a      	strbls	r2, [r1, #0]
 80078f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80078f8:	bf98      	it	ls
 80078fa:	2001      	movls	r0, #1
 80078fc:	4770      	bx	lr
 80078fe:	4608      	mov	r0, r1
 8007900:	4770      	bx	lr
	...

08007904 <_fstat_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d07      	ldr	r5, [pc, #28]	; (8007924 <_fstat_r+0x20>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	4611      	mov	r1, r2
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	f7fa fc58 	bl	80021c6 <_fstat>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	d102      	bne.n	8007920 <_fstat_r+0x1c>
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	b103      	cbz	r3, 8007920 <_fstat_r+0x1c>
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	bd38      	pop	{r3, r4, r5, pc}
 8007922:	bf00      	nop
 8007924:	200003b8 	.word	0x200003b8

08007928 <_isatty_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d06      	ldr	r5, [pc, #24]	; (8007944 <_isatty_r+0x1c>)
 800792c:	2300      	movs	r3, #0
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	602b      	str	r3, [r5, #0]
 8007934:	f7fa fc57 	bl	80021e6 <_isatty>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_isatty_r+0x1a>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_isatty_r+0x1a>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	200003b8 	.word	0x200003b8

08007948 <_malloc_usable_size_r>:
 8007948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800794c:	1f18      	subs	r0, r3, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	bfbc      	itt	lt
 8007952:	580b      	ldrlt	r3, [r1, r0]
 8007954:	18c0      	addlt	r0, r0, r3
 8007956:	4770      	bx	lr

08007958 <_gettimeofday>:
 8007958:	4b02      	ldr	r3, [pc, #8]	; (8007964 <_gettimeofday+0xc>)
 800795a:	2258      	movs	r2, #88	; 0x58
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f04f 30ff 	mov.w	r0, #4294967295
 8007962:	4770      	bx	lr
 8007964:	200003b8 	.word	0x200003b8

08007968 <_init>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr

08007974 <_fini>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	bf00      	nop
 8007978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797a:	bc08      	pop	{r3}
 800797c:	469e      	mov	lr, r3
 800797e:	4770      	bx	lr
